{
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null)   return null;
  XMLRPCClient client=new XMLRPCClient(blog.getUrl(),blog.getHttpuser(),blog.getHttppassword());
  Object[] result;
  try {
    result=(Object[])client.call("wp.getComments",commentParams);
  }
 catch (  XMLRPCException e) {
    throw new XMLRPCException(e);
  }
  if (result.length == 0)   return null;
  int commentID, postID;
  java.util.Date date;
  Map<?,?> contentHash;
  String authorName, content, status, authorEmail, authorURL, postTitle;
  CommentList comments=new CommentList();
  for (int ctr=0; ctr < result.length; ctr++) {
    contentHash=(Map<?,?>)result[ctr];
    content=contentHash.get("content").toString();
    status=contentHash.get("status").toString();
    postID=Integer.parseInt(contentHash.get("post_id").toString());
    commentID=Integer.parseInt(contentHash.get("comment_id").toString());
    date=(Date)contentHash.get("date_created_gmt");
    authorName=contentHash.get("author").toString();
    authorURL=contentHash.get("author_url").toString();
    authorEmail=contentHash.get("author_email").toString();
    postTitle=contentHash.get("post_title").toString();
    String formattedDate=getFormattedCommentDate(ctx,date);
    Comment comment=new Comment(postID,commentID,authorName,formattedDate,content,status,postTitle,authorURL,authorEmail,null);
    comments.add(comment);
  }
  int localBlogId=blog.getLocalTableBlogId();
  CommentTable.saveComments(localBlogId,comments);
  return comments;
}
