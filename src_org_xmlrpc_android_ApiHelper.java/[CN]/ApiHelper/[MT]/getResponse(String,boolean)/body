{
  final String res[]=new String[1];
  final SSLHandshakeException sslHandshakeException[]=new SSLHandshakeException[1];
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  trustAllSslCertificates(ignoreSslCertificate);
  final Response.Listener<String> responseListener=new Response.Listener<String>(){
    @Override public void onResponse(    String response){
      res[0]=response;
      countDownLatch.countDown();
    }
  }
;
  final Response.ErrorListener errorListener=new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      if ((error != null && error.networkResponse != null) && (error.networkResponse.statusCode == HttpURLConnection.HTTP_MOVED_PERM || error.networkResponse.statusCode == HttpURLConnection.HTTP_MOVED_TEMP)) {
        String newUrl=error.networkResponse.headers.get("Location");
        if (newUrl == null) {
          AppLog.e(T.API,url + " moved but Location header is not found");
          countDownLatch.countDown();
          return;
        }
        AppLog.i(T.API,url + " moved to " + newUrl);
        StringRequest stringRequestRedirect=new StringRequest(Request.Method.GET,newUrl,responseListener,new Response.ErrorListener(){
          @Override public void onErrorResponse(          VolleyError error){
            if (error != null && error.getCause() instanceof SSLHandshakeException) {
              sslHandshakeException[0]=(SSLHandshakeException)error.getCause();
              countDownLatch.countDown();
              return;
            }
            AppLog.e(T.API,error);
            countDownLatch.countDown();
          }
        }
);
        WordPress.requestQueue.add(stringRequestRedirect);
      }
 else {
        if (error != null && error.getCause() instanceof SSLHandshakeException) {
          sslHandshakeException[0]=(SSLHandshakeException)error.getCause();
          countDownLatch.countDown();
          return;
        }
        AppLog.e(T.API,error);
        countDownLatch.countDown();
      }
    }
  }
;
  StringRequest stringRequest=new StringRequest(Request.Method.GET,url,responseListener,errorListener);
  WordPress.requestQueue.add(stringRequest);
  try {
    countDownLatch.await(30,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    AppLog.e(T.API,e);
    return null;
  }
 finally {
    trustAllSslCertificates(false);
  }
  if (sslHandshakeException[0] != null) {
    throw sslHandshakeException[0];
  }
  return res[0];
}
