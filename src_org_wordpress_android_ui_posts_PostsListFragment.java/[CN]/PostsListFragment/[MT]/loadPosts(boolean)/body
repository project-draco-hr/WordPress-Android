{
  List<Map<String,Object>> loadedPosts;
  if (WordPress.currentBlog != null) {
    mLoadedBlogId=WordPress.currentBlog.getRemoteBlogId();
  }
  try {
    loadedPosts=WordPress.wpDB.loadUploadedPosts(WordPress.currentBlog.getLocalTableBlogId(),isPage);
  }
 catch (  Exception e1) {
    return false;
  }
  if (loadedPosts != null) {
    numRecords=loadedPosts.size();
    mTitles=new String[loadedPosts.size()];
    mPostIDs=new String[loadedPosts.size()];
    mDateCreated=new String[loadedPosts.size()];
    mDateCreatedFormatted=new String[loadedPosts.size()];
    mStatuses=new String[loadedPosts.size()];
  }
 else {
    mTitles=new String[0];
    mPostIDs=new String[0];
    mDateCreated=new String[0];
    mDateCreatedFormatted=new String[0];
    mStatuses=new String[0];
    if (mPostListAdapter != null) {
      mPostListAdapter.notifyDataSetChanged();
      if (WordPress.currentPost != null) {
        mOnPostActionListener.onPostAction(PostsActivity.POST_CLEAR,WordPress.currentPost);
        WordPress.currentPost=null;
      }
    }
  }
  if (loadedPosts != null) {
    Date d=new Date();
    for (int i=0; i < loadedPosts.size(); i++) {
      Map<String,Object> contentHash=loadedPosts.get(i);
      mTitles[i]=StringUtils.unescapeHTML(contentHash.get("title").toString());
      mPostIDs[i]=contentHash.get("id").toString();
      mDateCreated[i]=contentHash.get("date_created_gmt").toString();
      if (contentHash.get("post_status") != null) {
        String api_status=contentHash.get("post_status").toString();
        if (api_status.equals("publish")) {
          mStatuses[i]=getResources().getText(R.string.published).toString();
        }
 else         if (api_status.equals("draft")) {
          mStatuses[i]=getResources().getText(R.string.draft).toString();
        }
 else         if (api_status.equals("pending")) {
          mStatuses[i]=getResources().getText(R.string.pending_review).toString();
        }
 else         if (api_status.equals("private")) {
          mStatuses[i]=getResources().getText(R.string.post_private).toString();
        }
        if ((Long)contentHash.get("date_created_gmt") > d.getTime() && api_status.equals("publish")) {
          mStatuses[i]=getResources().getText(R.string.scheduled).toString();
        }
      }
      long localTime=(Long)contentHash.get("date_created_gmt");
      mDateCreatedFormatted[i]=getFormattedDate(localTime);
    }
  }
  boolean drafts=loadDrafts();
  if (drafts) {
    mPostIDs=StringUtils.mergeStringArrays(mDraftIDs,mPostIDs);
    mTitles=StringUtils.mergeStringArrays(mDraftTitles,mTitles);
    mDateCreatedFormatted=StringUtils.mergeStringArrays(mDraftDateCreated,mDateCreatedFormatted);
    mStatuses=StringUtils.mergeStringArrays(mDraftStatuses,mStatuses);
  }
 else {
    if (mPostListAdapter != null) {
      mPostListAdapter.notifyDataSetChanged();
    }
  }
  if (loadedPosts != null || drafts == true) {
    ListView listView=getListView();
    listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
    listView.setDivider(getResources().getDrawable(R.drawable.list_divider));
    listView.setDividerHeight(1);
    listView.removeFooterView(switcher);
    if (loadedPosts != null) {
      if (loadedPosts.size() >= 20) {
        listView.addFooterView(switcher);
      }
    }
    if (loadMore) {
      mPostListAdapter.notifyDataSetChanged();
    }
 else {
      mPostListAdapter=new PostListAdapter(getActivity().getBaseContext());
      listView.setAdapter(mPostListAdapter);
      listView.setOnItemClickListener(new OnItemClickListener(){
        public void onItemClick(        AdapterView<?> arg0,        View v,        int position,        long id){
          if (position >= mPostIDs.length)           return;
          if (v == null)           return;
          if (!mParentActivity.mIsRefreshing) {
            mSelectedID=v.getId();
            showPost(mSelectedID);
          }
 else {
            Toast.makeText(mParentActivity,R.string.please_wait_refresh_done,Toast.LENGTH_SHORT).show();
          }
        }
      }
);
      listView.setOnCreateContextMenuListener(new OnCreateContextMenuListener(){
        public void onCreateContextMenu(        ContextMenu menu,        View v,        ContextMenuInfo menuInfo){
          AdapterView.AdapterContextMenuInfo info;
          try {
            info=(AdapterView.AdapterContextMenuInfo)menuInfo;
          }
 catch (          ClassCastException e) {
            AppLog.e(T.EDITOR,"bad menuInfo",e);
            return;
          }
          if (mParentActivity.mIsRefreshing)           return;
          Object[] args={R.id.row_post_id};
          try {
            Method m=android.view.View.class.getMethod("getTag");
            m.invoke(mSelectedID,args);
          }
 catch (          NoSuchMethodException e) {
            mSelectedID=info.targetView.getId();
          }
catch (          IllegalArgumentException e) {
            mSelectedID=info.targetView.getId();
          }
catch (          IllegalAccessException e) {
            mSelectedID=info.targetView.getId();
          }
catch (          InvocationTargetException e) {
            mSelectedID=info.targetView.getId();
          }
          boolean allowComments=false;
          Post post=new Post(WordPress.currentBlog.getLocalTableBlogId(),mSelectedID,isPage);
          if (post.getId() >= 0) {
            allowComments=post.isMt_allow_comments();
          }
          if (PostUploadService.isUploading(post)) {
            return;
          }
          mRowID=info.position;
          if (totalDrafts > 0 && mRowID < totalDrafts) {
            menu.clear();
            menu.setHeaderTitle(getResources().getText(R.string.draft_actions));
            menu.add(MENU_GROUP_DRAFTS,MENU_ITEM_EDIT,0,getResources().getText(R.string.edit_draft));
            menu.add(MENU_GROUP_DRAFTS,MENU_ITEM_DELETE,0,getResources().getText(R.string.delete_draft));
          }
 else {
            menu.clear();
            if (isPage) {
              menu.setHeaderTitle(getResources().getText(R.string.page_actions));
              menu.add(MENU_GROUP_PAGES,MENU_ITEM_EDIT,0,getResources().getText(R.string.edit_page));
              menu.add(MENU_GROUP_PAGES,MENU_ITEM_DELETE,0,getResources().getText(R.string.delete_page));
              menu.add(MENU_GROUP_PAGES,MENU_ITEM_PREVIEW,0,getResources().getText(R.string.preview_page));
              if ("publish".equals(post.getPost_status())) {
                menu.add(MENU_GROUP_PAGES,MENU_ITEM_SHARE,0,getResources().getText(R.string.share_url_page));
              }
            }
 else {
              menu.setHeaderTitle(getResources().getText(R.string.post_actions));
              menu.add(MENU_GROUP_POSTS,MENU_ITEM_EDIT,0,getResources().getText(R.string.edit_post));
              menu.add(MENU_GROUP_POSTS,MENU_ITEM_DELETE,0,getResources().getText(R.string.delete_post));
              menu.add(MENU_GROUP_POSTS,MENU_ITEM_PREVIEW,0,getResources().getText(R.string.preview_post));
              if ("publish".equals(post.getPost_status())) {
                menu.add(MENU_GROUP_POSTS,MENU_ITEM_SHARE,0,getResources().getText(R.string.share_url));
              }
            }
          }
        }
      }
);
    }
    if (this.shouldSelectAfterLoad && mPostIDs != null && mPostIDs.length >= 1) {
      selectAndShowFirstPost();
      shouldSelectAfterLoad=false;
    }
    if (loadedPosts == null) {
      refreshPosts(false);
    }
    mListScrollPositionManager.restoreScrollOffset();
    return true;
  }
 else {
    if (loadedPosts == null) {
      refreshPosts(false);
      if (!isPage)       new ApiHelper.RefreshBlogContentTask(getActivity(),WordPress.getCurrentBlog(),null).execute(false);
    }
    mListScrollPositionManager.restoreScrollOffset();
    return false;
  }
}
