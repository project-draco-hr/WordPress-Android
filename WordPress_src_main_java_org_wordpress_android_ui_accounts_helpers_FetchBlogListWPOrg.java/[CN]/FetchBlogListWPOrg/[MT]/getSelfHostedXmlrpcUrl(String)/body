{
  url=UrlUtils.convertUrlToPunycodeIfNeeded(url);
  url=UrlUtils.addUrlSchemeIfNeeded(url,false);
  if (!URLUtil.isValidUrl(url)) {
    mErrorMsgId=org.wordpress.android.R.string.invalid_site_url_message;
    return null;
  }
  ArrayList<String> urlsToTry=smartURLCleanerForXMLRPCCalls(url);
  AppLog.i(T.NUX,"The app will call system.listMethods on the following URLs: " + urlsToTry);
  for (  String currentURL : urlsToTry) {
    try {
      Object[] methods=(Object[])doSystemListMethodsXMLRPC(currentURL);
      AppLog.i(T.NUX,"system.listMethods replied with XML-RPC objects on the URL: " + currentURL);
      AppLog.i(T.NUX,"Validating the XML-RPC response...");
      if (validateListMethodsResponse(methods)) {
        AppLog.i(T.NUX,"Validating ends with success!!! Endpoint found!!!");
        return currentURL;
      }
 else {
        AppLog.w(T.NUX,"Validating ends with error!!! Endpoint found but doesn't contain all the required methods.");
        mErrorMsgId=org.wordpress.android.R.string.xmlrpc_missing_method_error;
        return null;
      }
    }
 catch (    XMLRPCException e) {
      AppLog.e(T.NUX,"system.listMethods failed on: " + currentURL,e);
      if (isHTTPAuthErrorMessage(e)) {
        mHttpAuthRequired=true;
        return null;
      }
    }
catch (    SSLHandshakeException|SSLPeerUnverifiedException e) {
      if (!WPUrlUtils.isWordPressCom(currentURL)) {
        mErroneousSslCertificate=true;
      }
      AppLog.e(T.NUX,"SSL error. Erroneous SSL certificate detected.",e);
      return null;
    }
catch (    IOException e) {
      AnalyticsTracker.track(Stat.LOGIN_FAILED_TO_GUESS_XMLRPC);
      AppLog.e(T.NUX,"system.listMethods failed on: " + currentURL,e);
      if (isHTTPAuthErrorMessage(e)) {
        mHttpAuthRequired=true;
        return null;
      }
    }
catch (    XmlPullParserException e) {
      AnalyticsTracker.track(Stat.LOGIN_FAILED_TO_GUESS_XMLRPC);
      AppLog.e(T.NUX,"system.listMethods failed on: " + currentURL,e);
      if (isHTTPAuthErrorMessage(e)) {
        mHttpAuthRequired=true;
        return null;
      }
    }
catch (    IllegalArgumentException e) {
      CrashlyticsUtils.setString(ExtraKey.ENTERED_URL,currentURL);
      CrashlyticsUtils.logException(e,ExceptionType.SPECIFIC,T.NUX);
      mErrorMsgId=org.wordpress.android.R.string.invalid_site_url_message;
      return null;
    }
  }
  AppLog.w(T.NUX,"The XML-RPC endpoint was not found by using our 'smart' cleaning approach. Time to start the Endpoint discovery process");
  urlsToTry=smartURLCleanerForRSD(url);
  AppLog.i(T.NUX,"The app will call the RSD discovery process on the following URLs: " + urlsToTry);
  String xmlrpcUrl=null;
  for (  String currentURL : urlsToTry) {
    try {
      AppLog.i(T.NUX,"Downloading the HTML content at the following URL: " + currentURL);
      String responseHTML=ApiHelper.getResponse(currentURL);
      if (TextUtils.isEmpty(responseHTML)) {
        AppLog.w(T.NUX,"Content downloaded but it's empty or null. Skipping this URL");
        continue;
      }
      String rsdUrl=getRSDMetaTagHrefRegEx(responseHTML);
      if (rsdUrl == null) {
        rsdUrl=getRSDMetaTagHref(responseHTML);
      }
      rsdUrl=UrlUtils.addUrlSchemeIfNeeded(rsdUrl,false);
      if (rsdUrl == null) {
        AppLog.i(T.NUX,"Can't find the RSD endpoint in the HTML document. Try to check the pingback tag, and the apiLink tag.");
        xmlrpcUrl=UrlUtils.addUrlSchemeIfNeeded(getXMLRPCPingback(responseHTML),false);
        if (xmlrpcUrl == null) {
          xmlrpcUrl=UrlUtils.addUrlSchemeIfNeeded(getXMLRPCApiLink(responseHTML),false);
        }
      }
 else {
        AppLog.i(T.NUX,"RSD endpoint found at the following address: " + rsdUrl);
        AppLog.i(T.NUX,"Getting the XML-RPC url by downloading the RSD doc");
        String rsdEndpointDocument=ApiHelper.getResponse(rsdUrl);
        xmlrpcUrl=UrlUtils.addUrlSchemeIfNeeded(getXMLRPCApiLink(rsdEndpointDocument),false);
      }
      if (xmlrpcUrl != null) {
        AppLog.i(T.NUX,"Found the XML-RPC endpoint in the HTML document!!!");
        break;
      }
    }
 catch (    SSLHandshakeException e) {
      if (!WPUrlUtils.isWordPressCom(url)) {
        mErroneousSslCertificate=true;
      }
      AppLog.w(T.NUX,"SSLHandshakeException failed. Erroneous SSL certificate detected.");
      return null;
    }
  }
  if (URLUtil.isValidUrl(xmlrpcUrl)) {
    try {
      Object[] methods=(Object[])doSystemListMethodsXMLRPC(xmlrpcUrl);
      AppLog.i(T.NUX,"system.listMethods replied with XML-RPC objects on the URL: " + xmlrpcUrl);
      AppLog.i(T.NUX,"Validating the XML-RPC response...");
      if (!validateListMethodsResponse(methods)) {
        mErrorMsgId=org.wordpress.android.R.string.xmlrpc_missing_method_error;
        return null;
      }
      AppLog.i(T.NUX,"Validating ends with success!!! Endpoint found!!!");
      return xmlrpcUrl;
    }
 catch (    XMLRPCException e) {
      AppLog.e(T.NUX,"system.listMethods failed on: " + xmlrpcUrl,e);
      if (isHTTPAuthErrorMessage(e)) {
        mHttpAuthRequired=true;
        return null;
      }
    }
catch (    SSLHandshakeException|SSLPeerUnverifiedException e) {
      if (!WPUrlUtils.isWordPressCom(xmlrpcUrl)) {
        mErroneousSslCertificate=true;
      }
      AppLog.e(T.NUX,"SSL error. Erroneous SSL certificate detected.",e);
      return null;
    }
catch (    IOException e) {
      AnalyticsTracker.track(Stat.LOGIN_FAILED_TO_GUESS_XMLRPC);
      AppLog.e(T.NUX,"system.listMethods failed on: " + xmlrpcUrl,e);
      if (isHTTPAuthErrorMessage(e)) {
        mHttpAuthRequired=true;
        return null;
      }
    }
catch (    XmlPullParserException e) {
      AnalyticsTracker.track(Stat.LOGIN_FAILED_TO_GUESS_XMLRPC);
      AppLog.e(T.NUX,"system.listMethods failed on: " + xmlrpcUrl,e);
      if (isHTTPAuthErrorMessage(e)) {
        mHttpAuthRequired=true;
        return null;
      }
    }
catch (    IllegalArgumentException e) {
      CrashlyticsUtils.setString(ExtraKey.ENTERED_URL,xmlrpcUrl);
      CrashlyticsUtils.logException(e,ExceptionType.SPECIFIC,T.NUX);
      mErrorMsgId=org.wordpress.android.R.string.invalid_site_url_message;
      return null;
    }
  }
  return xmlrpcUrl;
}
