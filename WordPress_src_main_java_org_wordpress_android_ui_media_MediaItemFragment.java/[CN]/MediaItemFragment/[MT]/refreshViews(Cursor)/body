{
  if (!isAdded() || !cursor.moveToFirst()) {
    return;
  }
  String state=cursor.getString(cursor.getColumnIndex(WordPressDB.COLUMN_NAME_UPLOAD_STATE));
  mIsLocal=MediaUtils.isLocalFile(state);
  if (mIsLocal && getActivity() != null) {
    getActivity().invalidateOptionsMenu();
  }
  String caption=cursor.getString(cursor.getColumnIndex(WordPressDB.COLUMN_NAME_CAPTION));
  if (TextUtils.isEmpty(caption)) {
    mCaptionView.setVisibility(View.GONE);
  }
 else {
    mCaptionView.setText(caption);
    mCaptionView.setVisibility(View.VISIBLE);
  }
  String desc=cursor.getString(cursor.getColumnIndex(WordPressDB.COLUMN_NAME_DESCRIPTION));
  if (TextUtils.isEmpty(desc)) {
    mDescriptionView.setVisibility(View.GONE);
  }
 else {
    mDescriptionView.setText(desc);
    mDescriptionView.setVisibility(View.VISIBLE);
  }
  String date=MediaUtils.getDate(cursor.getLong(cursor.getColumnIndex(WordPressDB.COLUMN_NAME_DATE_CREATED_GMT)));
  mDateView.setText(date);
  TextView txtDateLabel=(TextView)getView().findViewById(R.id.media_listitem_details_date_label);
  txtDateLabel.setText(mIsLocal ? R.string.media_details_label_date_added : R.string.media_details_label_date_uploaded);
  String fileURL=cursor.getString(cursor.getColumnIndex(WordPressDB.COLUMN_NAME_FILE_URL));
  String fileName=cursor.getString(cursor.getColumnIndex(WordPressDB.COLUMN_NAME_FILE_NAME));
  mImageUri=TextUtils.isEmpty(fileURL) ? cursor.getString(cursor.getColumnIndex(WordPressDB.COLUMN_NAME_FILE_PATH)) : fileURL;
  boolean isValidImage=MediaUtils.isValidImage(mImageUri);
  mFileNameView.setText(fileName);
  float mediaWidth=cursor.getInt(cursor.getColumnIndex(WordPressDB.COLUMN_NAME_WIDTH));
  float mediaHeight=cursor.getInt(cursor.getColumnIndex(WordPressDB.COLUMN_NAME_HEIGHT));
  if (isValidImage) {
    int screenWidth=DisplayUtils.getDisplayPixelWidth(getActivity());
    int screenHeight=DisplayUtils.getDisplayPixelHeight(getActivity());
    int imageWidth;
    int imageHeight;
    boolean isFullWidth;
    if (mediaWidth == 0 || mediaHeight == 0) {
      imageWidth=screenWidth;
      imageHeight=screenHeight / 2;
      isFullWidth=true;
    }
 else     if (mediaWidth > mediaHeight) {
      float ratio=mediaHeight / mediaWidth;
      imageWidth=Math.min(screenWidth,(int)mediaWidth);
      imageHeight=(int)(imageWidth * ratio);
      isFullWidth=(imageWidth == screenWidth);
    }
 else {
      float ratio=mediaWidth / mediaHeight;
      imageHeight=Math.min(screenHeight / 2,(int)mediaHeight);
      imageWidth=(int)(imageHeight * ratio);
      isFullWidth=false;
    }
    FrameLayout frameView=(FrameLayout)getView().findViewById(R.id.layout_image_frame);
    frameView.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,imageHeight));
    if (!isFullWidth) {
      int hpadding=getResources().getDimensionPixelSize(R.dimen.content_margin);
      int vpadding=getResources().getDimensionPixelSize(R.dimen.margin_extra_large);
      frameView.setPadding(hpadding,vpadding,hpadding,vpadding);
    }
    if (mIsLocal) {
      final String filePath=cursor.getString(cursor.getColumnIndex(WordPressDB.COLUMN_NAME_FILE_PATH));
      loadLocalImage(mImageView,filePath,imageWidth,imageHeight);
    }
 else {
      String thumbnailURL;
      if (WordPress.getCurrentBlog() != null && WordPress.getCurrentBlog().isPhotonCapable()) {
        thumbnailURL=StringUtils.getPhotonUrl(mImageUri,imageWidth);
      }
 else {
        thumbnailURL=UrlUtils.removeQuery(mImageUri) + "?w=" + imageWidth;
      }
      mImageView.setImageUrl(thumbnailURL,WPNetworkImageView.ImageType.PHOTO);
    }
  }
 else {
    int placeholderResId=WordPressMediaUtils.getPlaceholder(mImageUri);
    mImageView.setDefaultImageResId(placeholderResId);
    mImageView.showDefaultImage();
  }
  String dimens=(mediaWidth > 0 && mediaHeight > 0) ? (int)mediaWidth + " x " + (int)mediaHeight : null;
  String fileExt=TextUtils.isEmpty(fileURL) ? null : fileURL.replaceAll(".*\\.(\\w+)$","$1").toUpperCase();
  boolean hasDimens=!TextUtils.isEmpty(dimens);
  boolean hasExt=!TextUtils.isEmpty(fileExt);
  if (hasDimens & hasExt) {
    mFileTypeView.setText(fileExt + ", " + dimens);
    mFileTypeView.setVisibility(View.VISIBLE);
  }
 else   if (hasExt) {
    mFileTypeView.setText(fileExt);
    mFileTypeView.setVisibility(View.VISIBLE);
  }
 else {
    mFileTypeView.setVisibility(View.GONE);
  }
  if (!mIsLocal && isValidImage) {
    mImageView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        Blog blog=WordPress.getCurrentBlog();
        boolean isPrivate=blog != null && blog.isPrivate();
        EnumSet<PhotoViewerOption> imageOptions=EnumSet.noneOf(PhotoViewerOption.class);
        if (isPrivate) {
          imageOptions.add(PhotoViewerOption.IS_PRIVATE_IMAGE);
        }
        ReaderActivityLauncher.showReaderPhotoViewer(v.getContext(),mImageUri,imageOptions);
      }
    }
);
  }
}
