{
  final Blog blog=WordPress.getBlog(localTableBlogID);
  if (blog == null || !PlansUtils.isPlanFeatureAvailableForBlog(blog)) {
    return false;
  }
  Map<String,String> params=getDefaultRestCallParameters();
  WordPress.getRestClientUtils().get("sites/" + blog.getDotComBlogId() + "/plans",params,null,new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject response){
      if (response != null) {
        AppLog.d(AppLog.T.PLANS,response.toString());
        List<SitePlan> plans=new ArrayList<>();
        try {
          JSONArray planIDs=response.names();
          if (planIDs != null) {
            for (int i=0; i < planIDs.length(); i++) {
              String currentKey=planIDs.getString(i);
              JSONObject currentPlanJSON=response.getJSONObject(currentKey);
              SitePlan currentPlan=new SitePlan(Long.valueOf(currentKey),currentPlanJSON,blog);
              plans.add(currentPlan);
            }
          }
          if (listener != null) {
            listener.onResponse(plans);
          }
        }
 catch (        JSONException e) {
          AppLog.e(AppLog.T.PLANS,"Can't parse the plans list returned from the server",e);
          if (listener != null) {
            listener.onError(e);
          }
        }
      }
    }
  }
,new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      AppLog.e(AppLog.T.UTILS,"Error downloading plans",volleyError);
      if (listener != null) {
        listener.onError(volleyError);
      }
    }
  }
);
  return true;
}
