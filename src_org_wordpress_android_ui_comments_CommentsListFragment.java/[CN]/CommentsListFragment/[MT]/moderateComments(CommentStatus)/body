{
  final String newStatusStr=CommentStatus.toString(newStatus);
  final Blog blog=WordPress.currentBlog;
  Iterator it=selectedCommentPositions.iterator();
  final List<Comment> commentsUpdatedList=new LinkedList<Comment>();
  while (it.hasNext()) {
    int i=(Integer)it.next();
    client=new XMLRPCClient(blog.getUrl(),blog.getHttpuser(),blog.getHttppassword());
    Comment listRow=(Comment)getListView().getItemAtPosition(i);
    int curCommentID=listRow.commentID;
    Map<String,String> contentHash, postHash=new HashMap<String,String>();
    contentHash=(Map<String,String>)allComments.get(curCommentID);
    if (contentHash.get("status").equals(newStatusStr)) {
      it.remove();
      continue;
    }
    postHash.put("status",newStatusStr);
    postHash.put("content",contentHash.get("comment"));
    postHash.put("author",contentHash.get("author"));
    postHash.put("author_url",contentHash.get("url"));
    postHash.put("author_email",contentHash.get("email"));
    Object[] params={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),curCommentID,postHash};
    Object result;
    try {
      result=client.call("wp.editComment",params);
      boolean bResult=Boolean.parseBoolean(result.toString());
      if (bResult) {
        it.remove();
        listRow.setStatus(newStatusStr);
        contentHash.put("status",newStatusStr);
        model.set(i,listRow);
        WordPress.wpDB.updateCommentStatus(WordPress.currentBlog.getLocalTableBlogId(),listRow.commentID,newStatusStr);
        commentsUpdatedList.add(WordPress.wpDB.getComment(WordPress.currentBlog.getLocalTableBlogId(),listRow.commentID));
      }
    }
 catch (    XMLRPCException e) {
      moderateErrorMsg=getResources().getText(R.string.error_moderate_comment).toString();
    }
  }
  dismissDialog(ID_DIALOG_MODERATING);
  Thread action=new Thread(){
    public void run(){
      if (moderateErrorMsg == "") {
        String msg=getResources().getText(R.string.comment_moderated).toString();
        if (checkedCommentTotal > 1)         msg=getResources().getText(R.string.comments_moderated).toString();
        Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
        checkedCommentTotal=0;
        hideModerationBar();
        mOnCommentChangeListener.onCommentsModerated(commentsUpdatedList);
        ((WPActionBarActivity)getActivity()).updateMenuDrawer();
      }
 else {
        if (!getActivity().isFinishing()) {
          checkedCommentTotal=0;
          hideModerationBar();
          getListView().invalidateViews();
          FragmentTransaction ft=getFragmentManager().beginTransaction();
          WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
          ft.add(alert,"alert");
          ft.commitAllowingStateLoss();
        }
        moderateErrorMsg="";
      }
    }
  }
;
  getActivity().runOnUiThread(action);
  progressDialog=new ProgressDialog(getActivity().getApplicationContext());
}
