{
  Vector<Object> settings=new Vector<Object>();
  WordPressDB settingsDB=new WordPressDB(moderateCommentsTab.this);
  settings=settingsDB.loadSettings(moderateCommentsTab.this,id);
  String sURL="";
  if (settings.get(0).toString().contains("xmlrpc.php")) {
    sURL=settings.get(0).toString();
  }
 else {
    sURL=settings.get(0).toString() + "xmlrpc.php";
  }
  String sUsername=settings.get(2).toString();
  String sPassword=settings.get(3).toString();
  String sHttpuser=settings.get(4).toString();
  String sHttppassword=settings.get(5).toString();
  int sBlogId=Integer.parseInt(settings.get(12).toString());
  for (int i=0; i < checkedComments.size(); i++) {
    if (checkedComments.get(i).toString().equals("true")) {
      client=new XMLRPCClient(sURL,sHttpuser,sHttppassword);
      CommentEntry listRow=(CommentEntry)getListView().getItemAtPosition(i);
      String curCommentID=listRow.commentID;
      HashMap contentHash, postHash=new HashMap();
      contentHash=(HashMap)allComments.get(curCommentID);
      postHash.put("status",newStatus);
      postHash.put("content",contentHash.get("comment"));
      postHash.put("author",contentHash.get("author"));
      postHash.put("author_url",contentHash.get("url"));
      postHash.put("author_email",contentHash.get("email"));
      Object[] params={sBlogId,sUsername,sPassword,curCommentID,postHash};
      Object result=null;
      try {
        result=(Object)client.call("wp.editComment",params);
        boolean bResult=Boolean.parseBoolean(result.toString());
        if (bResult) {
          checkedComments.set(i,"false");
          listRow.status=newStatus;
          model.set(i,listRow);
          settingsDB.updateCommentStatus(moderateCommentsTab.this,id,listRow.commentID,newStatus);
        }
      }
 catch (      XMLRPCException e) {
        moderateErrorMsg=e.getLocalizedMessage();
      }
    }
  }
  dismissDialog(ID_DIALOG_MODERATING);
  Thread action=new Thread(){
    public void run(){
      if (moderateErrorMsg == "") {
        Toast.makeText(moderateCommentsTab.this,getResources().getText(R.string.comments_moderated),Toast.LENGTH_SHORT).show();
      }
 else {
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(moderateCommentsTab.this);
        dialogBuilder.setTitle(getResources().getText(R.string.connection_error));
        dialogBuilder.setMessage(moderateErrorMsg);
        dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        if (!isFinishing()) {
          dialogBuilder.create().show();
        }
      }
    }
  }
;
  this.runOnUiThread(action);
  if (moderateErrorMsg == "") {
    checkedCommentTotal=0;
    inModeration=false;
    Thread action2=new Thread(){
      public void run(){
        pd=new ProgressDialog(moderateCommentsTab.this);
        showOrHideBulkCheckBoxes();
        hideModerationBar();
        thumbs.notifyDataSetChanged();
      }
    }
;
    this.runOnUiThread(action2);
  }
}
