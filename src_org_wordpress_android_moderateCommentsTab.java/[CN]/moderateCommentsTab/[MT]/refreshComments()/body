{
  Thread action=new Thread(){
    public void run(){
      pd=ProgressDialog.show(moderateCommentsTab.this,"Refresh Comments","Attempting to get comments",true,false);
    }
  }
;
  runOnUiThread(action);
  Vector settings=new Vector();
  settingsDB settingsDB=new settingsDB(this);
  settings=settingsDB.loadSettings(this,id);
  String sURL="";
  if (settings.get(0).toString().contains("xmlrpc.php")) {
    sURL=settings.get(0).toString();
  }
 else {
    sURL=settings.get(0).toString() + "xmlrpc.php";
  }
  String sUsername=settings.get(2).toString();
  String sPassword=settings.get(3).toString();
  HashMap hPost=new HashMap();
  hPost.put("status","");
  hPost.put("post_id","");
  hPost.put("number",30);
  List<Object> list=new ArrayList<Object>();
  client=new XMLRPCClient(sURL);
  XMLRPCMethod method=new XMLRPCMethod("wp.getComments",new XMLRPCMethodCallback(){
    public void callFinished(    Object[] result){
      String s="done";
      pd.dismiss();
      if (result.length == 0) {
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(moderateCommentsTab.this);
        dialogBuilder.setTitle("No Comments Found");
        dialogBuilder.setMessage("You don't have any comments on your blog");
        dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        dialogBuilder.create().show();
      }
 else {
        s=result.toString();
        origComments=result;
        String author, commentID, comment, dateCreated, dateCreatedFormatted, status, authorEmail, authorURL, postTitle;
        HashMap contentHash=new HashMap();
        Vector dbVector=new Vector();
        for (int ctr=0; ctr < result.length; ctr++) {
          HashMap<String,String> dbValues=new HashMap();
          contentHash=(HashMap)result[ctr];
          allComments.put(contentHash.get("comment_id").toString(),contentHash);
          comment=contentHash.get("content").toString();
          author=contentHash.get("author").toString();
          status=contentHash.get("status").toString();
          commentID=contentHash.get("comment_id").toString();
          dateCreated=contentHash.get("date_created_gmt").toString();
          authorURL=contentHash.get("author_url").toString();
          authorEmail=contentHash.get("author_email").toString();
          postTitle=contentHash.get("post_title").toString();
          Date d=new Date();
          SimpleDateFormat sdf=new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
          String cDate=dateCreated.replace("America/Los_Angeles","PST");
          try {
            d=sdf.parse(cDate);
            SimpleDateFormat sdfOut=new SimpleDateFormat("MMMM dd, yyyy hh:mm a");
            dateCreatedFormatted=sdfOut.format(d);
          }
 catch (          ParseException pe) {
            pe.printStackTrace();
            dateCreatedFormatted=dateCreated;
          }
          dbValues.put("blogID",id);
          dbValues.put("commentID",commentID);
          dbValues.put("author",author);
          dbValues.put("comment",comment);
          dbValues.put("commentDate",dateCreated);
          dbValues.put("commentDateFormatted",dateCreatedFormatted);
          dbValues.put("status",status);
          dbValues.put("url",authorURL);
          dbValues.put("email",authorEmail);
          dbValues.put("postTitle",postTitle);
          dbVector.add(ctr,dbValues);
        }
        postStoreDB postStoreDB=new postStoreDB(moderateCommentsTab.this);
        postStoreDB.saveComments(moderateCommentsTab.this,dbVector);
        loadComments();
      }
    }
  }
);
  Object[] params={1,sUsername,sPassword,hPost};
  method.call(params);
}
