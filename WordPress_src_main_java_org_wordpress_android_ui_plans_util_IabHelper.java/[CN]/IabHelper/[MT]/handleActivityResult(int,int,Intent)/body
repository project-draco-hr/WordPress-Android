{
  IabResult result;
  if (requestCode != mRequestCode)   return false;
  checkNotDisposed();
  checkSetupDone("handleActivityResult");
  flagEndAsync();
  if (data == null) {
    logError("Null data in IAB activity result.");
    result=new IabResult(IABHELPER_BAD_RESPONSE,"Null data in IAB result");
    if (mPurchaseListener != null)     mPurchaseListener.onIabPurchaseFinished(result,null);
    return true;
  }
  int responseCode=getResponseCodeFromIntent(data);
  String purchaseData=data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
  String dataSignature=data.getStringExtra(RESPONSE_INAPP_SIGNATURE);
  if (resultCode == Activity.RESULT_OK && responseCode == BILLING_RESPONSE_RESULT_OK) {
    logDebug("Successful resultcode from purchase activity.");
    logDebug("Purchase data: " + purchaseData);
    logDebug("Data signature: " + dataSignature);
    logDebug("Extras: " + data.getExtras());
    logDebug("Expected item type: " + mPurchasingItemType);
    if (purchaseData == null || dataSignature == null) {
      logError("BUG: either purchaseData or dataSignature is null.");
      logDebug("Extras: " + data.getExtras().toString());
      result=new IabResult(IABHELPER_UNKNOWN_ERROR,"IAB returned null purchaseData or dataSignature");
      if (mPurchaseListener != null)       mPurchaseListener.onIabPurchaseFinished(result,null);
      return true;
    }
    Purchase purchase=null;
    try {
      purchase=new Purchase(mPurchasingItemType,purchaseData,dataSignature);
      String sku=purchase.getSku();
      if (!Security.verifyPurchase(mSignatureBase64,purchaseData,dataSignature)) {
        logError("Purchase signature verification FAILED for sku " + sku);
        result=new IabResult(IABHELPER_VERIFICATION_FAILED,"Signature verification failed for sku " + sku);
        if (mPurchaseListener != null)         mPurchaseListener.onIabPurchaseFinished(result,purchase);
        return true;
      }
      logDebug("Purchase signature successfully verified.");
    }
 catch (    JSONException e) {
      logError("Failed to parse purchase data.");
      e.printStackTrace();
      result=new IabResult(IABHELPER_BAD_RESPONSE,"Failed to parse purchase data.");
      if (mPurchaseListener != null)       mPurchaseListener.onIabPurchaseFinished(result,null);
      return true;
    }
    if (mPurchaseListener != null) {
      mPurchaseListener.onIabPurchaseFinished(new IabResult(BILLING_RESPONSE_RESULT_OK,"Success"),purchase);
    }
  }
 else   if (resultCode == Activity.RESULT_OK) {
    logDebug("Result code was OK but in-app billing response was not OK: " + getResponseDesc(responseCode));
    if (mPurchaseListener != null) {
      result=new IabResult(responseCode,"Problem purchashing item.");
      mPurchaseListener.onIabPurchaseFinished(result,null);
    }
  }
 else   if (resultCode == Activity.RESULT_CANCELED) {
    logDebug("Purchase canceled - Response: " + getResponseDesc(responseCode));
    result=new IabResult(IABHELPER_USER_CANCELLED,"User canceled.");
    if (mPurchaseListener != null)     mPurchaseListener.onIabPurchaseFinished(result,null);
  }
 else {
    logError("Purchase failed. Result code: " + Integer.toString(resultCode) + ". Response: "+ getResponseDesc(responseCode));
    result=new IabResult(IABHELPER_UNKNOWN_PURCHASE_RESPONSE,"Unknown purchase response.");
    if (mPurchaseListener != null)     mPurchaseListener.onIabPurchaseFinished(result,null);
  }
  return true;
}
