{
  int finalHeight=0;
  BitmapFactory.Options opts=new BitmapFactory.Options();
  opts.inJustDecodeBounds=true;
  Bitmap bm=BitmapFactory.decodeByteArray(bytes,0,bytes.length,opts);
  int width=opts.outWidth;
  int height=opts.outHeight;
  int finalWidth=500;
  byte[] finalBytes;
  if (sMaxImageWidth.equals("Original Size")) {
    if (bytes.length > 1000000) {
      float finWidth=1000;
      int sample=0;
      float fWidth=width;
      sample=new Double(Math.ceil(fWidth / finWidth)).intValue();
      if (sample == 3) {
        sample=4;
      }
 else       if (sample > 4 && sample < 8) {
        sample=8;
      }
      opts.inSampleSize=sample;
      opts.inJustDecodeBounds=false;
      float percentage=(float)finalWidth / width;
      float proportionateHeight=height * percentage;
      finalHeight=(int)Math.rint(proportionateHeight);
      bm=BitmapFactory.decodeByteArray(bytes,0,bytes.length,opts);
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      bm.compress(Bitmap.CompressFormat.JPEG,85,baos);
      bm.recycle();
      finalBytes=baos.toByteArray();
    }
 else {
      finalBytes=bytes;
    }
  }
 else {
    finalWidth=Integer.parseInt(sMaxImageWidth);
    if (finalWidth > width) {
      finalBytes=bytes;
    }
 else {
      int sample=0;
      float fWidth=width;
      sample=new Double(Math.ceil(fWidth / 1200)).intValue();
      if (sample == 3) {
        sample=4;
      }
 else       if (sample > 4 && sample < 8) {
        sample=8;
      }
      opts.inSampleSize=sample;
      opts.inJustDecodeBounds=false;
      bm=BitmapFactory.decodeByteArray(bytes,0,bytes.length,opts);
      float percentage=(float)finalWidth / bm.getWidth();
      float proportionateHeight=bm.getHeight() * percentage;
      finalHeight=(int)Math.rint(proportionateHeight);
      float scaleWidth=((float)finalWidth) / bm.getWidth();
      float scaleHeight=((float)finalHeight) / bm.getHeight();
      float scaleBy=Math.min(scaleWidth,scaleHeight);
      Matrix matrix=new Matrix();
      matrix.postScale(scaleBy,scaleBy);
      if ((orientation != null) && (orientation.equals("90") || orientation.equals("180") || orientation.equals("270"))) {
        matrix.postRotate(Integer.valueOf(orientation));
      }
      Bitmap resized=Bitmap.createBitmap(bm,0,0,bm.getWidth(),bm.getHeight(),matrix,true);
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      resized.compress(Bitmap.CompressFormat.JPEG,85,baos);
      bm.recycle();
      resized.recycle();
      finalBytes=baos.toByteArray();
    }
  }
  return finalBytes;
}
