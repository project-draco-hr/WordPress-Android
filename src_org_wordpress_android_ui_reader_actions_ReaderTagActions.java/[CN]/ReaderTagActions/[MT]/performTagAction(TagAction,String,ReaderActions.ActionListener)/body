{
  if (TextUtils.isEmpty(tagName))   return false;
  final ReaderTag originalTopic;
  final String path;
  final String tagNameForApi=sanitizeTitle(tagName);
switch (action) {
case DELETE:
    originalTopic=ReaderTagTable.getTag(tagName);
  if (originalTopic == null)   return false;
ReaderTagTable.deleteTag(tagName);
ReaderPostTable.deletePostsWithTag(tagName);
path="read/tags/" + tagNameForApi + "/mine/delete";
break;
case ADD:
originalTopic=null;
String endpoint="/read/tags/" + tagNameForApi + "/posts";
ReaderTag newTopic=new ReaderTag(tagName,endpoint,ReaderTagType.SUBSCRIBED);
ReaderTagTable.addOrUpdateTag(newTopic);
path="read/tags/" + tagNameForApi + "/mine/new";
break;
default :
return false;
}
com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
@Override public void onResponse(JSONObject jsonObject){
AppLog.i(T.READER,"tag action " + action.name() + " succeeded");
if (actionListener != null) actionListener.onActionResult(true);
}
}
;
RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
@Override public void onErrorResponse(VolleyError volleyError){
String error=VolleyUtils.errStringFromVolleyError(volleyError);
boolean isSuccess=(action == TagAction.ADD && error.equals("already_subscribed")) || (action == TagAction.DELETE && error.equals("not_subscribed"));
if (isSuccess) {
AppLog.w(T.READER,"tag action " + action.name() + " succeeded with error "+ error);
if (actionListener != null) actionListener.onActionResult(true);
return;
}
AppLog.w(T.READER,"tag action " + action.name() + " failed");
AppLog.e(T.READER,volleyError);
switch (action) {
case DELETE:
ReaderTagTable.addOrUpdateTag(originalTopic);
break;
case ADD:
ReaderTagTable.deleteTag(tagName);
break;
}
if (actionListener != null) actionListener.onActionResult(false);
}
}
;
WordPress.restClient.post(path,listener,errorListener);
return true;
}
