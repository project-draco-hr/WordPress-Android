{
  if (wpcom) {
    blogURL=URL_WORDPRESS;
  }
 else {
    blogURL=mUrlEdit.getText().toString().trim();
  }
  final String username=mUsernameEdit.getText().toString().trim();
  final String password=mPasswordEdit.getText().toString().trim();
  if (blogURL.equals("") || username.equals("") || password.equals("")) {
    pd.dismiss();
    AlertUtil.showAlert(AddAccount.this,R.string.required_fields,R.string.url_username_password_required);
    return;
  }
  if (!(blogURL.toLowerCase().startsWith("http://")) && !(blogURL.toLowerCase().startsWith("https://"))) {
    blogURL="http://" + blogURL;
  }
  if (!URLUtil.isValidUrl(blogURL)) {
    pd.dismiss();
    AlertUtil.showAlert(AddAccount.this,R.string.invalid_url,R.string.invalid_url_message);
    return;
  }
  String rsdUrl=getRSDMetaTagHrefRegEx(blogURL);
  if (rsdUrl == null) {
    rsdUrl=getRSDMetaTagHref(blogURL);
  }
  if (rsdUrl != null) {
    xmlrpcURL=ApiHelper.getXMLRPCUrl(rsdUrl);
    if (xmlrpcURL == null)     xmlrpcURL=rsdUrl.replace("?rsd","");
  }
 else {
    isCustomURL=false;
    try {
      client=new XMLRPCClient(blogURL,httpuser,httppassword);
      try {
        client.call("system.listMethods");
        xmlrpcURL=blogURL;
        isCustomURL=true;
      }
 catch (      XMLRPCException e) {
        String guessURL=blogURL;
        if (guessURL.substring(guessURL.length() - 1,guessURL.length()).equals("/")) {
          guessURL=guessURL.substring(0,guessURL.length() - 1);
        }
        guessURL+="/xmlrpc.php";
        client=new XMLRPCClient(guessURL,httpuser,httppassword);
        try {
          client.call("system.listMethods");
          xmlrpcURL=guessURL;
        }
 catch (        XMLRPCException ex) {
        }
      }
    }
 catch (    Exception e) {
    }
  }
  if (xmlrpcURL == null) {
    pd.dismiss();
    AlertUtil.showAlert(AddAccount.this,R.string.error,R.string.no_site_error);
  }
 else {
    client=new XMLRPCClient(xmlrpcURL,httpuser,httppassword);
    XMLRPCMethod method=new XMLRPCMethod("wp.getUsersBlogs",new XMLRPCMethodCallback(){
      public void callFinished(      Object[] result){
        final String[] blogNames=new String[result.length];
        final String[] urls=new String[result.length];
        final String[] homeURLs=new String[result.length];
        final int[] blogIds=new int[result.length];
        final boolean[] wpcoms=new boolean[result.length];
        final String[] wpVersions=new String[result.length];
        Map<Object,Object> contentHash=new HashMap<Object,Object>();
        blogCtr=0;
        for (int ctr=0; ctr < result.length; ctr++) {
          contentHash=(Map<Object,Object>)result[ctr];
          boolean match=false;
          String matchBlogName=contentHash.get("blogName").toString();
          if (matchBlogName.length() == 0) {
            matchBlogName=contentHash.get("url").toString();
          }
          match=WordPress.wpDB.checkMatch(matchBlogName,contentHash.get("xmlrpc").toString(),username);
          if (!match) {
            blogNames[blogCtr]=matchBlogName;
            if (isCustomURL)             urls[blogCtr]=blogURL;
 else             urls[blogCtr]=contentHash.get("xmlrpc").toString();
            homeURLs[blogCtr]=contentHash.get("url").toString();
            blogIds[blogCtr]=Integer.parseInt(contentHash.get("blogid").toString());
            String blogURL=urls[blogCtr];
            aBlogNames.add(EscapeUtils.unescapeHtml(blogNames[blogCtr]));
            boolean wpcomFlag=false;
            if (blogURL.toLowerCase().contains("wordpress.com")) {
              wpcomFlag=true;
            }
            wpcoms[blogCtr]=wpcomFlag;
            String wpVersion="";
            if (!wpcomFlag) {
              Map<String,String> hPost=new HashMap<String,String>();
              hPost.put("software_version","software_version");
              Object[] vParams={1,username,password,hPost};
              Object versionResult=new Object();
              try {
                versionResult=(Object)client.call("wp.getOptions",vParams);
              }
 catch (              XMLRPCException e) {
              }
              if (versionResult != null) {
                try {
                  contentHash=(Map<Object,Object>)versionResult;
                  Map<?,?> sv=(Map<?,?>)contentHash.get("software_version");
                  wpVersion=sv.get("value").toString();
                }
 catch (                Exception e) {
                }
              }
            }
 else {
              wpVersion="3.4";
            }
            wpVersions[blogCtr]=wpVersion;
            blogCtr++;
          }
        }
        pd.dismiss();
        if (blogCtr == 0) {
          String additionalText="";
          if (result.length > 0) {
            additionalText=getString(R.string.additional);
          }
          AlertUtil.showAlert(AddAccount.this,R.string.no_blogs_found,String.format(getString(R.string.no_blogs_message),additionalText),getString(R.string.ok),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              dialog.dismiss();
            }
          }
);
        }
 else {
          if (blogCtr > 1) {
            LayoutInflater inflater=(LayoutInflater)AddAccount.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            final ListView lv=(ListView)inflater.inflate(R.layout.select_blogs_list,null);
            lv.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
            lv.setItemsCanFocus(false);
            ArrayAdapter<CharSequence> blogs=new ArrayAdapter<CharSequence>(AddAccount.this,R.layout.blogs_row,aBlogNames);
            lv.setAdapter(blogs);
            AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(AddAccount.this);
            dialogBuilder.setTitle(R.string.select_blogs);
            dialogBuilder.setView(lv);
            dialogBuilder.setNegativeButton(R.string.add_selected,new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int whichButton){
                SparseBooleanArray selectedItems=lv.getCheckedItemPositions();
                for (int i=0; i < selectedItems.size(); i++) {
                  if (selectedItems.get(selectedItems.keyAt(i)) == true) {
                    int rowID=selectedItems.keyAt(i);
                    long blogID=-1;
                    blogID=WordPress.wpDB.addAccount(urls[rowID],homeURLs[rowID],blogNames[rowID],username,password,httpuser,httppassword,"Above Text",false,false,"500",5,false,blogIds[rowID],wpcoms[rowID],wpVersions[rowID]);
                    if (i == 0) {
                      if (blogID >= 0) {
                        WordPress.setCurrentBlog((int)blogID);
                      }
                    }
                  }
                }
                setResult(RESULT_OK);
                finish();
              }
            }
);
            dialogBuilder.setPositiveButton(R.string.add_all,new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int whichButton){
                for (int i=0; i < blogCtr; i++) {
                  long blogID=-1;
                  blogID=WordPress.wpDB.addAccount(urls[i],homeURLs[i],blogNames[i],username,password,httpuser,httppassword,"Above Text",false,false,"500",5,false,blogIds[i],wpcoms[i],wpVersions[i]);
                  if (i == 0) {
                    if (blogID >= 0) {
                      WordPress.setCurrentBlog((int)blogID);
                    }
                  }
                }
                setResult(RESULT_OK);
                finish();
              }
            }
);
            dialogBuilder.setCancelable(true);
            AlertDialog ad=dialogBuilder.create();
            ad.setInverseBackgroundForced(true);
            ad.show();
            final Button addSelected=ad.getButton(AlertDialog.BUTTON_NEGATIVE);
            addSelected.setEnabled(false);
            lv.setOnItemClickListener(new OnItemClickListener(){
              public void onItemClick(              AdapterView<?> arg0,              View arg1,              int arg2,              long arg3){
                SparseBooleanArray selectedItems=lv.getCheckedItemPositions();
                boolean isChecked=false;
                for (int i=0; i < selectedItems.size(); i++) {
                  if (selectedItems.get(selectedItems.keyAt(i)) == true) {
                    isChecked=true;
                  }
                }
                if (!isChecked) {
                  addSelected.setEnabled(false);
                }
 else {
                  addSelected.setEnabled(true);
                }
              }
            }
);
          }
 else {
            long blogID=WordPress.wpDB.addAccount(urls[0],homeURLs[0],blogNames[0],username,password,httpuser,httppassword,"Above Text",false,false,"500",5,false,blogIds[0],wpcoms[0],wpVersions[0]);
            if (blogID >= 0) {
              WordPress.setCurrentBlog((int)blogID);
            }
            setResult(RESULT_OK);
            finish();
          }
        }
      }
    }
);
    Object[] params={username,password};
    method.call(params);
  }
}
