{
  List<?> arguments=params[0];
  WordPress.currentBlog=(Blog)arguments.get(0);
  Blog blog=WordPress.currentBlog;
  if (blog == null) {
    setError(ErrorType.INVALID_CURRENT_BLOG,"ApiHelper - current blog is null");
    return 0;
  }
  String blogId=String.valueOf(blog.getLocalTableBlogId());
  XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
  Map<String,Object> filter=new HashMap<String,Object>();
  filter.put("number",50);
  filter.put("offset",mOffset);
  if (mFilter == Filter.IMAGES) {
    filter.put("mime_type","image/*");
  }
 else   if (mFilter == Filter.UNATTACHED) {
    filter.put("parent_id",0);
  }
  Object[] apiParams={blog.getRemoteBlogId(),blog.getUsername(),blog.getPassword(),filter};
  Object[] results=null;
  try {
    results=(Object[])client.call(Method.GET_MEDIA_LIBRARY,apiParams);
  }
 catch (  ClassCastException cce) {
    setError(ErrorType.INVALID_RESULT,cce.getMessage(),cce);
    return 0;
  }
catch (  XMLRPCException e) {
    prepareErrorMessage(e);
    return 0;
  }
catch (  IOException e) {
    prepareErrorMessage(e);
    return 0;
  }
catch (  XmlPullParserException e) {
    prepareErrorMessage(e);
    return 0;
  }
  if (blogId == null) {
    setError(ErrorType.INVALID_CURRENT_BLOG,"Invalid blogId");
    return 0;
  }
  if (results == null) {
    setError(ErrorType.INVALID_RESULT,"Invalid blogId");
    return 0;
  }
  Map<?,?> resultMap;
  if (mOffset == 0) {
    WordPress.wpDB.setMediaFilesMarkedForDeleted(blogId);
  }
  for (  Object result : results) {
    resultMap=(Map<?,?>)result;
    boolean isDotCom=(WordPress.getCurrentBlog() != null && WordPress.getCurrentBlog().isDotcomFlag());
    MediaFile mediaFile=new MediaFile(blogId,resultMap,isDotCom);
    WordPress.wpDB.saveMediaFile(mediaFile);
  }
  WordPress.wpDB.deleteFilesMarkedForDeleted(blogId);
  return results.length;
}
