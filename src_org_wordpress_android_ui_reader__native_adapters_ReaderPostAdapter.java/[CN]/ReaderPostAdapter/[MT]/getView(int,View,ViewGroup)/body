{
  final ReaderPost post=(ReaderPost)getItem(position);
  final PostViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.reader_listitem_post_excerpt,parent,false);
    holder=new PostViewHolder();
    holder.txtTitle=(TextView)convertView.findViewById(R.id.text_title);
    holder.txtText=(TextView)convertView.findViewById(R.id.text_excerpt);
    holder.txtBlogName=(TextView)convertView.findViewById(R.id.text_blog_name);
    holder.txtDate=(TextView)convertView.findViewById(R.id.text_date);
    holder.txtFollow=(TextView)convertView.findViewById(R.id.text_follow);
    holder.txtCommentCount=(TextView)convertView.findViewById(R.id.text_comment_count);
    holder.txtLikeCount=(TextView)convertView.findViewById(R.id.text_like_count);
    holder.imgFeatured=(WPNetworkImageView)convertView.findViewById(R.id.image_featured);
    holder.imgAvatar=(WPNetworkImageView)convertView.findViewById(R.id.image_avatar);
    holder.imgBtnLike=(ImageView)convertView.findViewById(R.id.image_like_btn);
    holder.imgBtnComment=(ImageView)convertView.findViewById(R.id.image_comment_btn);
    holder.imgBtnReblog=(ImageView)convertView.findViewById(R.id.image_reblog_btn);
    convertView.setTag(holder);
  }
 else {
    holder=(PostViewHolder)convertView.getTag();
  }
  holder.txtTitle.setText(post.getTitle());
  holder.txtDate.setText(DateTimeUtils.javaDateToTimeSpan(post.getDatePublished()));
  if (post.isWP()) {
    holder.txtBlogName.setText(post.getBlogName());
  }
 else {
    holder.txtBlogName.setText("\n" + post.getBlogName());
  }
  if (post.hasExcerpt()) {
    holder.txtText.setVisibility(View.VISIBLE);
    holder.txtText.setText(post.getExcerpt());
  }
 else {
    holder.txtText.setVisibility(View.GONE);
  }
  if (post.hasFeaturedImage()) {
    final String imageUrl=post.getFeaturedImageForDisplay(mPhotonWidth,mPhotonHeight);
    holder.imgFeatured.setImageUrl(imageUrl,WPNetworkImageView.ImageType.PHOTO);
    holder.imgFeatured.setVisibility(View.VISIBLE);
  }
 else   if (post.hasFeaturedVideo()) {
    holder.imgFeatured.setVideoUrl(post.postId,post.getFeaturedVideo());
    holder.imgFeatured.setVisibility(View.VISIBLE);
  }
 else {
    holder.imgFeatured.setVisibility(View.GONE);
  }
  if (post.hasPostAvatar()) {
    holder.imgAvatar.setImageUrl(post.getPostAvatarForDisplay(mAvatarSz),WPNetworkImageView.ImageType.AVATAR);
  }
 else {
    holder.imgAvatar.showDefaultImage(WPNetworkImageView.ImageType.AVATAR);
  }
  if (post.isWP()) {
    final int pos=position;
    showFollowStatus(holder.txtFollow,post.isFollowedByCurrentUser);
    holder.txtFollow.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleFollow(holder,pos,post);
      }
    }
);
    showLikeStatus(holder.imgBtnLike,post.isLikedByCurrentUser);
    holder.imgBtnLike.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleLike(holder,pos,post);
      }
    }
);
    showReblogStatus(holder.imgBtnReblog,post.isRebloggedByCurrentUser);
    if (!post.isRebloggedByCurrentUser && post.isWP()) {
      holder.imgBtnReblog.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          ReaderAniUtils.zoomAction(holder.imgBtnReblog);
          if (mReblogListener != null)           mReblogListener.onRequestReblog(post);
        }
      }
);
    }
    holder.imgBtnLike.setVisibility(View.VISIBLE);
    holder.imgBtnComment.setVisibility(View.VISIBLE);
    holder.imgBtnReblog.setVisibility(View.VISIBLE);
    holder.txtFollow.setVisibility(View.VISIBLE);
  }
 else {
    holder.imgBtnLike.setVisibility(View.INVISIBLE);
    holder.imgBtnComment.setVisibility(View.INVISIBLE);
    holder.imgBtnReblog.setVisibility(View.INVISIBLE);
    holder.txtFollow.setVisibility(View.GONE);
  }
  showCounts(holder,post);
  if (mAnimateRows)   animateRow(convertView);
  if (mCanRequestMorePosts && mDataRequestedListener != null && (position >= getCount() - 1))   mDataRequestedListener.onRequestData(ReaderActions.RequestDataAction.LOAD_OLDER);
  if (mEnableImagePreload && position > (mLastPreloadPos - PRELOAD_OFFSET))   preloadPostImages(position + PRELOAD_OFFSET);
  return convertView;
}
