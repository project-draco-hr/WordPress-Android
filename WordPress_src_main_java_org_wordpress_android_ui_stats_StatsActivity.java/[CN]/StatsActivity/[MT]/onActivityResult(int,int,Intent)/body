{
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == SignInActivity.REQUEST_CODE) {
    if (resultCode == RESULT_CANCELED) {
      finish();
    }
    mResultCode=resultCode;
    final Blog currentBlog=WordPress.getBlog(mLocalBlogID);
    if (resultCode == RESULT_OK && currentBlog != null && !currentBlog.isDotcomFlag()) {
      if (StatsUtils.getBlogId(mLocalBlogID) == null) {
        final Handler handler=new Handler();
        XMLRPCClientInterface xmlrpcClient=XMLRPCFactory.instantiate(currentBlog.getUri(),"","");
        Map<String,String> args=ApiHelper.blogOptionsXMLRPCParameters;
        Object[] params={currentBlog.getRemoteBlogId(),currentBlog.getUsername(),currentBlog.getPassword(),args};
        xmlrpcClient.callAsync(new XMLRPCCallback(){
          @Override public void onSuccess(          long id,          Object result){
            if (result != null && (result instanceof HashMap)) {
              Map<?,?> blogOptions=(HashMap<?,?>)result;
              ApiHelper.updateBlogOptions(currentBlog,blogOptions);
              AnalyticsUtils.refreshMetadata();
              AnalyticsTracker.track(AnalyticsTracker.Stat.SIGNED_INTO_JETPACK);
              AnalyticsTracker.track(AnalyticsTracker.Stat.PERFORMED_JETPACK_SIGN_IN_FROM_STATS_SCREEN);
              if (isFinishing()) {
                return;
              }
              if (NetworkUtils.checkConnection(StatsActivity.this)) {
                handler.post(new Runnable(){
                  @Override public void run(){
                    mSwipeToRefreshHelper.setRefreshing(true);
                    mRequestedDate=StatsUtils.getCurrentDateTZ(mLocalBlogID);
                    createFragments(true);
                  }
                }
);
              }
            }
          }
          @Override public void onFailure(          long id,          Exception error){
            AppLog.e(T.STATS,"Cannot load blog options (wp.getOptions failed) " + "and no jetpack_client_id is then available",error);
            handler.post(new Runnable(){
              @Override public void run(){
                mSwipeToRefreshHelper.setRefreshing(false);
                ToastUtils.showToast(StatsActivity.this,StatsActivity.this.getString(R.string.error_refresh_stats),Duration.LONG);
              }
            }
);
          }
        }
,ApiHelper.Methods.GET_OPTIONS,params);
      }
 else {
        mRequestedDate=StatsUtils.getCurrentDateTZ(mLocalBlogID);
        createFragments(true);
      }
      mSwipeToRefreshHelper.setRefreshing(true);
    }
  }
}
