{
  if (!hasActivity() || !hasComment() || mIsModeratingComment)   return;
  if (!NetworkUtils.checkConnection(getActivity()))   return;
  mBtnModerate.setEnabled(false);
  mBtnSpam.setEnabled(false);
  mLayoutButtons.clearAnimation();
  AniUtils.flyOut(mLayoutButtons);
  if (mTxtStatus.getVisibility() == View.VISIBLE) {
    mTxtStatus.clearAnimation();
    AniUtils.startAnimation(mTxtStatus,R.anim.fade_out);
    mTxtStatus.setVisibility(View.INVISIBLE);
  }
  final int msgResId;
  final MessageBarType msgType;
switch (newStatus) {
case APPROVED:
    msgResId=R.string.comment_approved;
  msgType=MessageBarType.INFO;
break;
case UNAPPROVED:
msgResId=R.string.comment_unapproved;
msgType=MessageBarType.ALERT;
break;
case SPAM:
msgResId=R.string.comment_spammed;
msgType=MessageBarType.ALERT;
break;
default :
msgResId=R.string.comment_moderated;
msgType=MessageBarType.INFO;
break;
}
MessageBarUtils.showMessageBar(getActivity(),getString(msgResId),msgType,null);
CommentActions.CommentActionListener actionListener=new CommentActions.CommentActionListener(){
@Override public void onActionResult(boolean succeeded){
mIsModeratingComment=false;
if (!hasActivity()) return;
mBtnModerate.setEnabled(true);
mBtnSpam.setEnabled(true);
if (succeeded) {
mComment.setStatus(CommentStatus.toString(newStatus));
if (mOnCommentChangeListener != null) mOnCommentChangeListener.onCommentChanged(ChangedFrom.COMMENT_DETAIL);
}
 else {
ToastUtils.showToast(getActivity(),R.string.error_moderate_comment,ToastUtils.Duration.LONG);
}
updateStatusViews();
}
}
;
mIsModeratingComment=true;
CommentActions.moderateComment(mLocalBlogId,mComment,newStatus,actionListener);
}
