{
  ssl.setEnabledProtocols(ssl.getSupportedProtocols());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
    AppLog.i(T.API,"Setting SNI hostname");
    mFactory.setHostname(ssl,host);
  }
 else {
    AppLog.i(T.API,"No documented SNI support on Android <4.2, trying with reflection");
    try {
      java.lang.reflect.Method setHostnameMethod=ssl.getClass().getMethod("setHostname",String.class);
      setHostnameMethod.invoke(ssl,host);
    }
 catch (    Exception e) {
      AppLog.e(T.API,"SNI not useable",e);
    }
  }
  SSLSession session=ssl.getSession();
  if (!mHostnameVerifier.verify(host,session)) {
    try {
      Certificate[] errorChain=ssl.getSession().getPeerCertificates();
      X509Certificate[] X509CertificateChain=new X509Certificate[errorChain.length];
      for (int i=0; i < errorChain.length; i++) {
        X509Certificate x509Certificate=(X509Certificate)errorChain[0];
        X509CertificateChain[i]=x509Certificate;
      }
      if (X509CertificateChain.length == 0) {
        throw new SSLPeerUnverifiedException("Cannot verify hostname: " + host);
      }
      if (!SelfSignedSSLCertsManager.getInstance(null).isCertificateTrusted(X509CertificateChain[0])) {
        SelfSignedSSLCertsManager.getInstance(null).setLastFailureChain(X509CertificateChain);
        throw new SSLPeerUnverifiedException("Cannot verify hostname: " + host);
      }
    }
 catch (    GeneralSecurityException e) {
      AppLog.e(T.API,"GeneralSecurityException occurred when trying to verify a certificate that has failed" + " the host name verifier check",e);
      throw new SSLPeerUnverifiedException("Cannot verify hostname: " + host);
    }
catch (    IOException e) {
      AppLog.e(T.API,"IOException occurred when trying to verify a certificate that has failed" + " the host name verifier check",e);
      throw new SSLPeerUnverifiedException("Cannot verify hostname: " + host);
    }
catch (    Exception e) {
      AppLog.e(T.API,"An Exception occurred when trying to verify a certificate that has failed" + " the host name verifier check",e);
      throw new SSLPeerUnverifiedException("Cannot verify hostname: " + host);
    }
  }
  AppLog.i(T.API,"Established " + session.getProtocol() + " connection with "+ session.getPeerHost()+ " using "+ session.getCipherSuite());
  return ssl;
}
