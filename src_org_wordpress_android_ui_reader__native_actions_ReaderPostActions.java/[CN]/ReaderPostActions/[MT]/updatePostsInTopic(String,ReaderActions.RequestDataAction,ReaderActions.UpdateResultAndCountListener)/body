{
  final ReaderTopic topic=ReaderTopicTable.getTopic(tagName);
  if (topic == null) {
    if (resultListener != null)     resultListener.onUpdateResult(ReaderActions.UpdateResult.FAILED,-1);
    return;
  }
  StringBuilder sb=new StringBuilder(topic.getEndpoint());
  sb.append("?number=").append(Constants.READER_MAX_POSTS_TO_REQUEST);
  sb.append("&order=DESC");
  if (ReaderPostTable.hasPostsInTopic(tagName)) {
switch (updateAction) {
case LOAD_NEWER:
      String dateNewest=ReaderTopicTable.getTopicNewestDate(tagName);
    if (!TextUtils.isEmpty(dateNewest)) {
      sb.append("&after=").append(UrlUtils.urlEncode(dateNewest));
      ReaderLog.d(String.format("requesting newer posts in topic %s (%s)",tagName,dateNewest));
    }
  break;
case LOAD_OLDER:
String dateOldest=ReaderTopicTable.getTopicOldestDate(tagName);
if (TextUtils.isEmpty(dateOldest)) dateOldest=ReaderPostTable.getOldestPubDateInTopic(tagName);
if (!TextUtils.isEmpty(dateOldest)) {
sb.append("&before=").append(UrlUtils.urlEncode(dateOldest));
ReaderLog.d(String.format("requesting older posts in topic %s (%s)",tagName,dateOldest));
}
break;
}
}
 else {
ReaderLog.d(String.format("requesting posts in empty topic %s",tagName));
}
String endpoint=sb.toString();
com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
@Override public void onResponse(JSONObject jsonObject){
handleUpdatePostsInTopicResponse(tagName,updateAction,jsonObject,resultListener);
}
}
;
RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
@Override public void onErrorResponse(VolleyError volleyError){
ReaderLog.e(volleyError);
if (resultListener != null) resultListener.onUpdateResult(ReaderActions.UpdateResult.FAILED,-1);
}
}
;
WordPress.restClient.get(endpoint,null,null,listener,errorListener);
}
