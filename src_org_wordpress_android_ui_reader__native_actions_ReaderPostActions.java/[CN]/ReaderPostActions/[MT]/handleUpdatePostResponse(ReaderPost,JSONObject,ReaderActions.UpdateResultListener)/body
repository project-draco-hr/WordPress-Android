{
  if (jsonObject == null) {
    if (resultListener != null)     resultListener.onUpdateResult(ReaderActions.UpdateResult.FAILED);
    return;
  }
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      int numReplies=jsonObject.optInt("comment_count");
      int numLikes=jsonObject.optInt("like_count");
      boolean isLiked=JSONUtil.getBool(jsonObject,"i_like");
      boolean isCommentsOpen=JSONUtil.getBool(jsonObject,"comments_open");
      boolean isFollowed=JSONUtil.getBool(jsonObject,"is_following");
      final boolean hasChanges=(numReplies != post.numReplies || numLikes != post.numLikes || isLiked != post.isLikedByCurrentUser || isCommentsOpen != post.isCommentsOpen || isFollowed != post.isFollowedByCurrentUser);
      if (hasChanges) {
        ReaderLog.d("post updated");
        post.numLikes=numLikes;
        post.numReplies=numReplies;
        post.isCommentsOpen=isCommentsOpen;
        post.isLikedByCurrentUser=isLiked;
        post.isFollowedByCurrentUser=isFollowed;
        ReaderPostTable.addOrUpdatePost(post);
      }
      if (resultListener != null) {
        handler.post(new Runnable(){
          public void run(){
            resultListener.onUpdateResult(hasChanges ? ReaderActions.UpdateResult.CHANGED : ReaderActions.UpdateResult.UNCHANGED);
          }
        }
);
      }
    }
  }
.start();
}
