{
  mIsPostTaskRunning=false;
  if (!isAdded()) {
    return;
  }
  if (!result) {
    if (!mHasAlreadyRequestedPost) {
      mHasAlreadyRequestedPost=true;
      AppLog.i(T.READER,"reader post detail > post not found, requesting it");
      requestPost();
    }
    return;
  }
  mScrollView.setVisibility(View.VISIBLE);
  mRenderer=new ReaderPostRenderer(mReaderWebView,mPost);
  mRenderer.beginRender();
  txtTitle.setText(mPost.hasTitle() ? mPost.getTitle() : getString(R.string.reader_untitled_post));
  if (mIsLoggedOutReader) {
    followButton.setVisibility(View.GONE);
  }
 else {
    followButton.setIsFollowed(mPost.isFollowedByCurrentUser);
    followButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        togglePostFollowed();
      }
    }
);
  }
  if (mPost.hasBlogName()) {
    txtBlogName.setText(mPost.getBlogName());
    txtBlogName.setVisibility(View.VISIBLE);
  }
 else   if (mPost.hasBlogUrl()) {
    txtBlogName.setText(UrlUtils.getDomainFromUrl(mPost.getBlogUrl()));
    txtBlogName.setVisibility(View.VISIBLE);
  }
 else {
    txtBlogName.setVisibility(View.GONE);
  }
  if (mPost.hasAuthorName() && !mPost.getAuthorName().equals(mPost.getBlogName())) {
    txtDateAndAuthor.setText(DateTimeUtils.javaDateToTimeSpan(mPost.getDatePublished()) + " / " + mPost.getAuthorName());
  }
 else {
    txtDateAndAuthor.setText(DateTimeUtils.javaDateToTimeSpan(mPost.getDatePublished()));
  }
  if (mPost.hasPostAvatar()) {
    imgAvatar.setImageUrl(mPost.getPostAvatarForDisplay(mResourceVars.headerAvatarSizePx),WPNetworkImageView.ImageType.AVATAR);
    imgAvatar.setVisibility(View.VISIBLE);
  }
 else {
    imgAvatar.setVisibility(View.GONE);
  }
  if (isBlogPreview()) {
    layoutDetailHeader.setVisibility(View.GONE);
  }
 else {
    imgAvatar.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        ReaderActivityLauncher.showReaderBlogPreview(v.getContext(),mPost);
      }
    }
);
  }
  if (mPost.canReblog() && !mIsLoggedOutReader) {
    imgBtnReblog.setVisibility(View.VISIBLE);
    imgBtnReblog.setSelected(mPost.isRebloggedByCurrentUser);
    imgBtnReblog.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        reblogPost();
      }
    }
);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      imgBtnReblog.setBackgroundResource(R.drawable.ripple_oval);
    }
  }
 else {
    imgBtnReblog.setVisibility(View.INVISIBLE);
  }
  if (canBlockBlog()) {
    imgMore.setVisibility(View.VISIBLE);
    imgMore.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (mOnPopupListener != null) {
          mOnPopupListener.onShowPostPopup(view,mPost);
        }
      }
    }
);
  }
 else {
    imgMore.setVisibility(View.GONE);
  }
  mLayoutIcons.setVisibility(canShowIconBar() ? View.VISIBLE : View.GONE);
  refreshIconBarCounts(false);
}
