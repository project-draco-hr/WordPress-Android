{
  mIsPostTaskRunning=false;
  if (!isAdded())   return;
  getActivity().invalidateOptionsMenu();
  if (!result) {
    if (!mHasAlreadyRequestedPost) {
      mHasAlreadyRequestedPost=true;
      AppLog.i(T.READER,"reader post detail > post not found, requesting it");
      requestPost();
    }
 else     if (!TextUtils.isEmpty(mErrorMessage)) {
      showError(mErrorMessage);
    }
    return;
  }
  mReaderWebView.setIsPrivatePost(mPost.isPrivate);
  mReaderWebView.setBlogSchemeIsHttps(UrlUtils.isHttps(mPost.getBlogUrl()));
  TextView txtTitle=(TextView)getView().findViewById(R.id.text_title);
  TextView txtBlogName=(TextView)getView().findViewById(R.id.text_blog_name);
  TextView txtAuthor=(TextView)getView().findViewById(R.id.text_author);
  TextView txtDomain=(TextView)getView().findViewById(R.id.text_domain);
  TextView txtTag=(TextView)getView().findViewById(R.id.text_tag);
  ViewGroup layoutHeader=(ViewGroup)getView().findViewById(R.id.layout_post_detail_header);
  ReaderFollowButton followButton=(ReaderFollowButton)layoutHeader.findViewById(R.id.follow_button);
  WPNetworkImageView imgAvatar=(WPNetworkImageView)getView().findViewById(R.id.image_avatar);
  if (!canShowFooter()) {
    mLayoutFooter.setVisibility(View.GONE);
  }
  int topPadding=(mAutoHideToolbarListener != null ? mToolbarHeight : 0);
  int bottomPadding=(canShowFooter() ? mLayoutFooter.getHeight() : 0);
  mScrollView.setPadding(0,topPadding,0,bottomPadding);
  mScrollView.setVisibility(View.VISIBLE);
  mRenderer=new ReaderPostRenderer(mReaderWebView,mPost);
  mRenderer.beginRender();
  txtTitle.setText(mPost.hasTitle() ? mPost.getTitle() : getString(R.string.reader_untitled_post));
  followButton.setVisibility(mIsLoggedOutReader ? View.GONE : View.VISIBLE);
  if (!mIsLoggedOutReader) {
    followButton.setIsFollowed(mPost.isFollowedByCurrentUser);
    followButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        togglePostFollowed();
      }
    }
);
  }
  if (getPostListType() != ReaderPostListType.BLOG_PREVIEW) {
    layoutHeader.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        ReaderActivityLauncher.showReaderBlogPreview(v.getContext(),mPost);
      }
    }
);
  }
  if (mPost.hasBlogName()) {
    txtBlogName.setText(mPost.getBlogName());
  }
 else   if (mPost.hasAuthorName()) {
    txtBlogName.setText(mPost.getAuthorName());
  }
 else {
    txtBlogName.setText(null);
  }
  int avatarSz=getResources().getDimensionPixelSize(R.dimen.avatar_sz_medium);
  if (mPost.hasBlogUrl()) {
    String imageUrl=GravatarUtils.blavatarFromUrl(mPost.getBlogUrl(),avatarSz);
    imgAvatar.setImageUrl(imageUrl,WPNetworkImageView.ImageType.BLAVATAR);
    txtDomain.setText(UrlUtils.getHost(mPost.getBlogUrl()));
  }
 else {
    imgAvatar.setImageUrl(mPost.getPostAvatarForDisplay(avatarSz),WPNetworkImageView.ImageType.AVATAR);
    txtDomain.setText(null);
  }
  if (mPost.hasAuthorName()) {
    txtAuthor.setText(mPost.getAuthorName());
    txtAuthor.setVisibility(View.VISIBLE);
  }
 else {
    txtAuthor.setVisibility(View.GONE);
  }
  String dateLine;
  if (mPost.hasBlogUrl()) {
    dateLine=UrlUtils.getHost(mPost.getBlogUrl()) + " \u2022 " + DateTimeUtils.javaDateToTimeSpan(mPost.getDatePublished());
  }
 else {
    dateLine=DateTimeUtils.javaDateToTimeSpan(mPost.getDatePublished());
  }
  final String tagToDisplay=mPost.getTagForDisplay(null);
  if (!TextUtils.isEmpty(tagToDisplay)) {
    txtTag.setText(ReaderUtils.makeHashTag(tagToDisplay));
    txtTag.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        ReaderTag tag=ReaderUtils.getTagFromTagName(tagToDisplay,ReaderTagType.FOLLOWED);
        ReaderActivityLauncher.showReaderTagPreview(v.getContext(),tag);
      }
    }
);
  }
  if (canShowFooter() && mLayoutFooter.getVisibility() != View.VISIBLE) {
    AniUtils.fadeIn(mLayoutFooter,AniUtils.Duration.LONG);
  }
  refreshIconCounts();
}
