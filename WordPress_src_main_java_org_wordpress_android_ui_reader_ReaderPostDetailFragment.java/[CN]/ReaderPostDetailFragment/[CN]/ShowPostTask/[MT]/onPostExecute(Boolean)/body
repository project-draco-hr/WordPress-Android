{
  mIsPostTaskRunning=false;
  if (!isAdded()) {
    return;
  }
  if (!result) {
    if (!mHasAlreadyRequestedPost) {
      mHasAlreadyRequestedPost=true;
      AppLog.i(T.READER,"reader post detail > post not found, requesting it");
      requestPost();
    }
    return;
  }
  mScrollView.setVisibility(View.VISIBLE);
  mRenderer=new ReaderPostRenderer(mReaderWebView,mPost);
  mRenderer.beginRender();
  txtTitle.setText(mPost.hasTitle() ? mPost.getTitle() : getString(R.string.reader_untitled_post));
  ReaderUtils.showFollowStatus(txtFollow,mPost.isFollowedByCurrentUser);
  txtFollow.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      togglePostFollowed(mPost,txtFollow);
    }
  }
);
  if (mPost.hasBlogName()) {
    txtBlogName.setText(mPost.getBlogName());
    txtBlogName.setVisibility(View.VISIBLE);
  }
 else   if (mPost.hasBlogUrl()) {
    txtBlogName.setText(UrlUtils.getDomainFromUrl(mPost.getBlogUrl()));
    txtBlogName.setVisibility(View.VISIBLE);
  }
 else {
    txtBlogName.setVisibility(View.GONE);
  }
  if (mPost.hasAuthorName() && !mPost.getAuthorName().equals(mPost.getBlogName())) {
    txtDateAndAuthor.setText(DateTimeUtils.javaDateToTimeSpan(mPost.getDatePublished()) + " / " + mPost.getAuthorName());
  }
 else {
    txtDateAndAuthor.setText(DateTimeUtils.javaDateToTimeSpan(mPost.getDatePublished()));
  }
  if (mPost.hasPostAvatar()) {
    imgAvatar.setImageUrl(mPost.getPostAvatarForDisplay(mResourceVars.likeAvatarSizePx),WPNetworkImageView.ImageType.AVATAR);
    imgAvatar.setVisibility(View.VISIBLE);
  }
 else {
    imgAvatar.setVisibility(View.GONE);
  }
  if (isBlogPreview()) {
    layoutDetailHeader.setVisibility(View.GONE);
  }
 else {
    if (!mPost.isExternal) {
      layoutDetailHeader.setEnabled(true);
      layoutDetailHeader.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          ReaderActivityLauncher.showReaderBlogPreview(v.getContext(),mPost.blogId,mPost.getBlogUrl());
        }
      }
);
    }
 else {
      layoutDetailHeader.setEnabled(false);
    }
  }
  if (mPost.canReblog()) {
    imgBtnReblog.setVisibility(View.VISIBLE);
    imgBtnReblog.setSelected(mPost.isRebloggedByCurrentUser);
    imgBtnReblog.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        reblogPost();
      }
    }
);
  }
 else {
    imgBtnReblog.setVisibility(View.INVISIBLE);
  }
  if (!mPost.isExternal && (mPost.isLikesEnabled || mPost.canReblog() || mPost.isCommentsOpen)) {
    mLayoutIcons.setVisibility(View.VISIBLE);
  }
 else {
    mLayoutIcons.setVisibility(View.GONE);
  }
  if (canBlockBlog()) {
    imgDropDown.setVisibility(View.VISIBLE);
    imgDropDown.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (mOnPopupListener != null) {
          mOnPopupListener.onShowPostPopup(view,mPost);
        }
      }
    }
);
  }
 else {
    imgDropDown.setVisibility(View.GONE);
  }
  mLayoutIcons.setVisibility(mPost.isWP() ? View.VISIBLE : View.GONE);
  refreshIconBarCounts(false);
}
