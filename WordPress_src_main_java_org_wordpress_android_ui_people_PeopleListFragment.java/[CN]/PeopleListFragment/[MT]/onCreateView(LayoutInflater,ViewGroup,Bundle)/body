{
  setHasOptionsMenu(true);
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.people_list_fragment,container,false);
  mLocalTableBlogID=getArguments().getInt(ARG_LOCAL_TABLE_BLOG_ID);
  mFilteredRecyclerView=(FilteredRecyclerView)rootView.findViewById(R.id.filtered_recycler_view);
  mFilteredRecyclerView.addItemDecoration(new PeopleItemDecoration(getActivity(),R.drawable.people_list_divider));
  mFilteredRecyclerView.setLogT(AppLog.T.PEOPLE);
  mFilteredRecyclerView.setSwipeToRefreshEnabled(false);
  mFilteredRecyclerView.setFilterListener(new FilteredRecyclerView.FilterListener(){
    @Override public List<FilterCriteria> onLoadFilterCriteriaOptions(    boolean refresh){
      ArrayList<FilterCriteria> list=new ArrayList<>();
      Collections.addAll(list,PeopleListFilter.values());
      return list;
    }
    @Override public void onLoadFilterCriteriaOptionsAsync(    FilteredRecyclerView.FilterCriteriaAsyncLoaderListener listener,    boolean refresh){
    }
    @Override public FilterCriteria onRecallSelection(){
      mPeopleListFilter=AppPrefs.getPeopleListFilter();
      return mPeopleListFilter;
    }
    @Override public void onLoadData(){
      updatePeople(false);
    }
    @Override public void onFilterSelected(    int position,    FilterCriteria criteria){
      mPeopleListFilter=(PeopleListFilter)criteria;
      AppPrefs.setPeopleListFilter(mPeopleListFilter);
    }
    @Override public String onShowEmptyViewMessage(    EmptyViewMessageType emptyViewMsgType){
      int stringId=0;
switch (emptyViewMsgType) {
case LOADING:
        stringId=R.string.people_fetching;
      break;
case NETWORK_ERROR:
    stringId=R.string.no_network_message;
  break;
case NO_CONTENT:
switch (mPeopleListFilter) {
case TEAM:
  stringId=R.string.people_empty_list_filtered_users;
break;
case FOLLOWERS:
stringId=R.string.people_empty_list_filtered_followers;
break;
case EMAIL_FOLLOWERS:
stringId=R.string.people_empty_list_filtered_email_followers;
break;
}
case GENERIC_ERROR:
switch (mPeopleListFilter) {
case TEAM:
stringId=R.string.error_fetch_users_list;
break;
case FOLLOWERS:
stringId=R.string.error_fetch_followers_list;
break;
case EMAIL_FOLLOWERS:
stringId=R.string.error_fetch_email_followers_list;
break;
}
break;
}
return getString(stringId);
}
@Override public void onShowCustomEmptyView(EmptyViewMessageType emptyViewMsgType){
}
}
);
return rootView;
}
