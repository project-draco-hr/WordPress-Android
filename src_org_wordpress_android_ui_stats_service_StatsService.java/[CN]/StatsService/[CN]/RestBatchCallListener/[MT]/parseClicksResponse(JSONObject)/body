{
  if (mServiceBlogId == null || !mServiceBlogId.equals(mRequestBlogId)) {
    return;
  }
  String[] clicksPaths={mClicksTodayPath,mClicksYesterdayPath};
  for (  String currentClickPath : clicksPaths) {
    if (response.has(currentClickPath)) {
      try {
        final JSONObject currentClicksJsonObject=response.getJSONObject(currentClickPath);
        if (!isSingleCallResponseError(currentClickPath,currentClicksJsonObject)) {
          String date=currentClicksJsonObject.getString("date");
          long dateMs=StatUtils.toMs(date);
          ArrayList<ContentProviderOperation> operations=new ArrayList<ContentProviderOperation>();
          ContentProviderOperation deleteGroup=ContentProviderOperation.newDelete(StatsContentProvider.STATS_CLICK_GROUP_URI).withSelection("blogId=? AND (date=? OR date<=?)",new String[]{mRequestBlogId,dateMs + "",(dateMs - TWO_DAYS) + ""}).build();
          ContentProviderOperation deleteChildOp=ContentProviderOperation.newDelete(StatsContentProvider.STATS_CLICKS_URI).withSelection("blogId=? AND (date=? OR date<=?)",new String[]{mRequestBlogId,dateMs + "",(dateMs - TWO_DAYS) + ""}).build();
          operations.add(deleteGroup);
          operations.add(deleteChildOp);
          JSONArray groups=currentClicksJsonObject.getJSONArray("clicks");
          int groupsCount=Math.min(groups.length(),StatsActivity.STATS_GROUP_MAX_ITEMS);
          for (int i=0; i < groupsCount; i++) {
            JSONObject group=groups.getJSONObject(i);
            StatsClickGroup statGroup=new StatsClickGroup(mRequestBlogId,date,group);
            ContentValues values=StatsClickGroupsTable.getContentValues(statGroup);
            ContentProviderOperation insertGroupOp=ContentProviderOperation.newInsert(StatsContentProvider.STATS_CLICK_GROUP_URI).withValues(values).build();
            operations.add(insertGroupOp);
            JSONArray clicks=group.getJSONArray("results");
            int childCount=Math.min(clicks.length(),StatsActivity.STATS_CHILD_MAX_ITEMS);
            if (childCount > 1) {
              for (int j=0; j < childCount; j++) {
                StatsClick stat=new StatsClick(mRequestBlogId,date,statGroup.getGroupId(),clicks.getJSONArray(j));
                ContentValues v=StatsClicksTable.getContentValues(stat);
                ContentProviderOperation insertChildOp=ContentProviderOperation.newInsert(StatsContentProvider.STATS_CLICKS_URI).withValues(v).build();
                operations.add(insertChildOp);
              }
            }
          }
          getContentResolver().applyBatch(BuildConfig.STATS_PROVIDER_AUTHORITY,operations);
        }
      }
 catch (      RemoteException e) {
        logSingleCallError(currentClickPath,e);
      }
catch (      OperationApplicationException e) {
        logSingleCallError(currentClickPath,e);
      }
catch (      JSONException e) {
        logSingleCallError(currentClickPath,e);
      }
    }
  }
  getContentResolver().notifyChange(StatsContentProvider.STATS_CLICK_GROUP_URI,null);
  getContentResolver().notifyChange(StatsContentProvider.STATS_CLICKS_URI,null);
}
