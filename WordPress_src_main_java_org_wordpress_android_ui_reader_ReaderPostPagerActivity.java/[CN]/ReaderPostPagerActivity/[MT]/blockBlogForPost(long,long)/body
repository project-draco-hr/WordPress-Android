{
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  ReaderActions.ActionListener actionListener=new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (!succeeded && !isFinishing()) {
        hideUndoBar();
        ToastUtils.showToast(ReaderPostPagerActivity.this,R.string.reader_toast_err_block_blog,ToastUtils.Duration.LONG);
      }
    }
  }
;
  final ReaderPostList postsToRestore=ReaderBlogActions.blockBlogFromReader(blogId,actionListener);
  AnalyticsTracker.track(AnalyticsTracker.Stat.READER_BLOCKED_BLOG);
  ReaderAnim.Duration animDuration=ReaderAnim.Duration.SHORT;
  Fragment fragment=getActiveDetailFragment();
  if (fragment != null && fragment.getView() != null) {
    ReaderAnim.scaleOut(fragment.getView(),View.INVISIBLE,animDuration);
  }
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      if (!isFinishing()) {
        int position=mViewPager.getCurrentItem();
        ReaderBlogIdPostId newId=getPagerAdapter().getBestIdNotInBlog(position,blogId);
        long newBlogId=(newId != null ? newId.getBlogId() : 0);
        long newPostId=(newId != null ? newId.getPostId() : 0);
        loadPosts(newBlogId,newPostId,false);
      }
    }
  }
,animDuration.toMillis(this));
  UndoBarController.UndoListener undoListener=new UndoBarController.UndoListener(){
    @Override public void onUndo(    Parcelable parcelable){
      ReaderBlogActions.unblockBlogFromReader(blogId,postsToRestore);
      loadPosts(blogId,postId,false);
    }
  }
;
  new UndoBarController.UndoBar(this).message(getString(R.string.reader_toast_blog_blocked)).listener(undoListener).translucent(true).show();
}
