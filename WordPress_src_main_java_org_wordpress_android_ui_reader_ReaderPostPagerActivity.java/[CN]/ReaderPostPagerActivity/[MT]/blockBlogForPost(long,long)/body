{
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  ReaderActions.ActionListener actionListener=new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (!succeeded && !isFinishing()) {
        hideUndoBar();
        ToastUtils.showToast(ReaderPostPagerActivity.this,R.string.reader_toast_err_block_blog,ToastUtils.Duration.LONG);
      }
    }
  }
;
  final ReaderPostList postsToRestore=ReaderBlogActions.blockBlogFromReader(blogId,actionListener);
  AnalyticsTracker.track(AnalyticsTracker.Stat.READER_BLOCKED_BLOG);
  ReaderBlogIdPostId idAdjacent=getPagerAdapter().getAdjacentId(blogId,postId);
  long adjacentBlogId=(idAdjacent != null ? idAdjacent.getBlogId() : 0);
  long adjacentPostId=(idAdjacent != null ? idAdjacent.getPostId() : 0);
  loadPosts(adjacentBlogId,adjacentPostId,false);
  UndoBarController.UndoListener undoListener=new UndoBarController.UndoListener(){
    @Override public void onUndo(    Parcelable parcelable){
      ReaderBlogActions.unblockBlogFromReader(blogId,postsToRestore);
      loadPosts(blogId,postId,false);
    }
  }
;
  new UndoBarController.UndoBar(this).message(getString(R.string.reader_toast_blog_blocked)).listener(undoListener).translucent(true).show();
}
