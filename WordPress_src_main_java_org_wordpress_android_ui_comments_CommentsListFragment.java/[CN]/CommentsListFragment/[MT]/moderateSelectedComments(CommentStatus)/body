{
  final CommentList selectedComments=getCommentAdapter().getSelectedComments();
  final CommentList updateComments=new CommentList();
  for (  Comment comment : selectedComments) {
    if (comment.getStatusEnum() != newStatus)     updateComments.add(comment);
  }
  if (updateComments.size() == 0)   return;
  if (!NetworkUtils.checkConnection(getActivity()))   return;
  final int dlgId;
switch (newStatus) {
case APPROVED:
    dlgId=CommentDialogs.ID_COMMENT_DLG_APPROVING;
  break;
case UNAPPROVED:
dlgId=CommentDialogs.ID_COMMENT_DLG_UNAPPROVING;
break;
case SPAM:
dlgId=CommentDialogs.ID_COMMENT_DLG_SPAMMING;
break;
case TRASH:
dlgId=CommentDialogs.ID_COMMENT_DLG_TRASHING;
break;
default :
return;
}
getActivity().showDialog(dlgId);
CommentActions.OnCommentsModeratedListener listener=new CommentActions.OnCommentsModeratedListener(){
@Override public void onCommentsModerated(final CommentList moderatedComments){
if (!isAdded()) return;
finishActionMode();
dismissDialog(dlgId);
if (moderatedComments.size() > 0) {
getCommentAdapter().clearSelectedComments();
getCommentAdapter().replaceComments(moderatedComments);
if (mOnCommentChangeListener != null) {
ChangeType changeType=(newStatus == CommentStatus.TRASH ? ChangeType.TRASHED : ChangeType.STATUS);
mOnCommentChangeListener.onCommentChanged(ChangedFrom.COMMENT_LIST,changeType);
}
}
 else {
ToastUtils.showToast(getActivity(),R.string.error_moderate_comment);
}
}
}
;
CommentActions.moderateComments(WordPress.getCurrentLocalTableBlogId(),updateComments,newStatus,listener);
}
