{
  View view=inflater.inflate(R.layout.comment_list_fragment,container,false);
  mFilteredCommentsView=(FilteredRecyclerView)view.findViewById(R.id.filtered_recycler_view);
  mFilteredCommentsView.setLogT(AppLog.T.COMMENTS);
  mFilteredCommentsView.setLifecycleListener(new FilteredRecyclerView.Listener(){
    @Override public FilterCriteria[] onLoadFilterCriteriaOptions(){
      return commentStatuses;
    }
    @Override public void onLoadData(){
      updateComments(false);
    }
    @Override public void onFilterSelected(    int position,    FilterCriteria criteria){
      AppPrefs.setCommentsStatusFilter((CommentStatus)criteria);
      mCommentStatusFilter=(CommentStatus)criteria;
    }
    @Override public FilterCriteria onRecallSelection(){
      mCommentStatusFilter=AppPrefs.getCommentsStatusFilter();
      return mCommentStatusFilter;
    }
    @Override public String onShowEmptyViewMessage(    EmptyViewMessageType emptyViewMsgType){
      int stringId=0;
switch (emptyViewMsgType) {
case LOADING:
        stringId=R.string.comments_fetching;
      break;
case NO_CONTENT:
    if (mFilteredCommentsView.getCurrentFilter() == null) {
      stringId=R.string.comments_empty_list;
    }
 else {
      stringId=R.string.comments_empty_list_filtered;
    }
  break;
case NETWORK_ERROR:
stringId=R.string.no_network_message;
break;
case PERMISSION_ERROR:
stringId=R.string.error_refresh_unauthorized_comments;
break;
case GENERIC_ERROR:
stringId=R.string.error_refresh_comments;
break;
}
return getString(stringId);
}
}
);
return view;
}
