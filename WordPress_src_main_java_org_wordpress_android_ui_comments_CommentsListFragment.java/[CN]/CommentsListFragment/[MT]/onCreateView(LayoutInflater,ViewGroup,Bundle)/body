{
  View view=inflater.inflate(R.layout.comment_list_fragment,container,false);
  mFilteredCommentsView=(FilteredRecyclerView)view.findViewById(R.id.filtered_recycler_view);
  mFilteredCommentsView.setLogT(AppLog.T.COMMENTS);
  mFilteredCommentsView.setFilterListener(new FilteredRecyclerView.FilterListener(){
    @Override public List<FilterCriteria> onLoadFilterCriteriaOptions(    boolean refresh){
      ArrayList<FilterCriteria> criterias=new ArrayList();
      for (      CommentStatus criteria : commentStatuses) {
        criterias.add(criteria);
      }
      return criterias;
    }
    @Override public void onLoadFilterCriteriaOptionsAsync(    FilteredRecyclerView.FilterCriteriaAsyncLoaderListener listener,    boolean refresh){
    }
    @Override public void onLoadData(){
      updateComments(false);
    }
    @Override public void onFilterSelected(    int position,    FilterCriteria criteria){
      AppPrefs.setCommentsStatusFilter((CommentStatus)criteria);
      mCommentStatusFilter=(CommentStatus)criteria;
    }
    @Override public FilterCriteria onRecallSelection(){
      mCommentStatusFilter=AppPrefs.getCommentsStatusFilter();
      return mCommentStatusFilter;
    }
    @Override public String onShowEmptyViewMessage(    EmptyViewMessageType emptyViewMsgType){
      if (emptyViewMsgType == EmptyViewMessageType.NO_CONTENT) {
        FilterCriteria filter=mFilteredCommentsView.getCurrentFilter();
        if (filter == null || CommentStatus.UNKNOWN.equals(filter)) {
          return getString(R.string.comments_empty_list);
        }
 else {
          return getString(R.string.comments_empty_list_filtered,mCommentStatusFilter.getLabel().toLowerCase());
        }
      }
 else {
        int stringId=0;
switch (emptyViewMsgType) {
case LOADING:
          stringId=R.string.comments_fetching;
        break;
case NETWORK_ERROR:
      stringId=R.string.no_network_message;
    break;
case PERMISSION_ERROR:
  stringId=R.string.error_refresh_unauthorized_comments;
break;
case GENERIC_ERROR:
stringId=R.string.error_refresh_comments;
break;
}
return getString(stringId);
}
}
@Override public void onShowCustomEmptyView(EmptyViewMessageType emptyViewMsgType){
}
}
);
return view;
}
