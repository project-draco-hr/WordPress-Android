{
  if (jsonObject == null) {
    resultListener.onUpdateResult(UpdateResult.FAILED);
    return;
  }
  new Thread(){
    @Override public void run(){
      ReaderPostList serverPosts=ReaderPostList.fromJson(jsonObject);
      UpdateResult updateResult=ReaderPostTable.comparePosts(serverPosts);
      if (updateResult.isNewOrChanged()) {
        ReaderPost postWithGap=null;
        if (tag != null) {
switch (updateAction) {
case REQUEST_NEWER:
            int numServerPosts=serverPosts.size();
          if (numServerPosts >= 2 && ReaderPostTable.getNumPostsWithTag(tag) > 0 && !ReaderPostTable.hasOverlap(serverPosts)) {
            postWithGap=serverPosts.get(numServerPosts - 2);
            serverPosts.remove(numServerPosts - 1);
            AppLog.d(AppLog.T.READER,"added gap marker to tag " + tag.getTagNameForLog());
          }
        ReaderPostTable.removeGapMarkerForTag(tag);
      break;
case REQUEST_OLDER_THAN_GAP:
    ReaderPostTable.deletePostsBeforeGapMarkerForTag(tag);
  ReaderPostTable.removeGapMarkerForTag(tag);
break;
}
}
ReaderPostTable.addOrUpdatePosts(tag,serverPosts);
if (postWithGap != null) {
ReaderPostTable.setGapMarkerForTag(postWithGap.blogId,postWithGap.postId,tag);
}
}
 else if (updateResult == UpdateResult.UNCHANGED && updateAction == UpdateAction.REQUEST_OLDER_THAN_GAP) {
ReaderPostTable.removeGapMarkerForTag(tag);
AppLog.w(AppLog.T.READER,"attempt to fill gap returned nothing new");
}
AppLog.d(AppLog.T.READER,"requested posts response = " + updateResult.toString());
resultListener.onUpdateResult(updateResult);
}
}
.start();
}
