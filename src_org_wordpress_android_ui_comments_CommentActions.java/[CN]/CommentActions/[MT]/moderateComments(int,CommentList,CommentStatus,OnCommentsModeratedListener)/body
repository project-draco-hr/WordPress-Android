{
  final Blog blog=WordPress.getBlog(accountId);
  if (blog == null || comments == null || comments.size() == 0 || newStatus == null || newStatus == CommentStatus.UNKNOWN) {
    if (actionListener != null)     actionListener.onCommentsModerated(new CommentList());
    return;
  }
  final CommentList moderatedComments=new CommentList();
  final String newStatusStr=CommentStatus.toString(newStatus);
  final int localBlogId=blog.getLocalTableBlogId();
  final int remoteBlogId=blog.getRemoteBlogId();
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      XMLRPCClient client=new XMLRPCClient(blog.getUrl(),blog.getHttpuser(),blog.getHttppassword());
      for (      Comment comment : comments) {
        Map<String,String> postHash=new HashMap<String,String>();
        postHash.put("status",newStatusStr);
        postHash.put("content",comment.comment);
        postHash.put("author",comment.authorName);
        postHash.put("author_url",comment.authorURL);
        postHash.put("author_email",comment.authorEmail);
        Object[] params={remoteBlogId,blog.getUsername(),blog.getPassword(),comment.commentID,postHash};
        Object result;
        try {
          result=client.call("wp.editComment",params);
          boolean success=(result != null && Boolean.parseBoolean(result.toString()));
          if (success) {
            CommentTable.updateCommentStatus(localBlogId,comment.commentID,newStatusStr);
            comment.setStatus(newStatusStr);
            moderatedComments.add(comment);
          }
        }
 catch (        final XMLRPCException e) {
          AppLog.e(T.COMMENTS,e.getMessage(),e);
        }
      }
      if (actionListener != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            actionListener.onCommentsModerated(moderatedComments);
          }
        }
);
      }
    }
  }
.start();
}
