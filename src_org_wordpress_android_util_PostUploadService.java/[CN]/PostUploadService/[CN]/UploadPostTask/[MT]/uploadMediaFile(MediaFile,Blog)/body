{
  String content="";
  String curImagePath=mf.getFilePath();
  if (curImagePath == null)   return null;
  if (curImagePath.contains("video")) {
    XMLRPCClient client=new XMLRPCClient(blog.getUrl(),blog.getHttpuser(),blog.getHttppassword());
    String tempFileName="wp-" + System.currentTimeMillis();
    try {
      context.openFileOutput(tempFileName,Context.MODE_PRIVATE);
    }
 catch (    FileNotFoundException e) {
      mErrorMessage=getResources().getString(R.string.file_error_create);
      mIsMediaError=true;
      return null;
    }
    File tempFile=context.getFileStreamPath(tempFileName);
    Uri videoUri=Uri.parse(curImagePath);
    File fVideo=null;
    String mimeType="", xRes="", yRes="";
    if (videoUri.toString().contains("content:")) {
      String[] projection;
      Uri imgPath;
      projection=new String[]{Video.Media._ID,Video.Media.DATA,Video.Media.MIME_TYPE,Video.Media.RESOLUTION};
      imgPath=videoUri;
      Cursor cur=context.getContentResolver().query(imgPath,projection,null,null,null);
      if (cur.moveToFirst()) {
        int mimeTypeColumn, resolutionColumn, dataColumn;
        dataColumn=cur.getColumnIndex(Video.Media.DATA);
        mimeTypeColumn=cur.getColumnIndex(Video.Media.MIME_TYPE);
        resolutionColumn=cur.getColumnIndex(Video.Media.RESOLUTION);
        mf=new MediaFile();
        String thumbData=cur.getString(dataColumn);
        mimeType=cur.getString(mimeTypeColumn);
        if (mimeType.equalsIgnoreCase("video/mp4v-es")) {
          mimeType="video/mp4";
        }
        fVideo=new File(thumbData);
        mf.setFilePath(fVideo.getPath());
        String resolution=cur.getString(resolutionColumn);
        if (resolution != null) {
          String[] resx=resolution.split("x");
          xRes=resx[0];
          yRes=resx[1];
        }
 else {
          if (!blog.getMaxImageWidth().equals("Original Size")) {
            xRes=blog.getMaxImageWidth();
            yRes=String.valueOf(Math.round(Integer.valueOf(blog.getMaxImageWidth()) * 0.75));
          }
 else {
            xRes="640";
            yRes="480";
          }
        }
      }
    }
 else {
      fVideo=new File(videoUri.toString().replace("file://",""));
    }
    if (fVideo == null) {
      mErrorMessage=context.getResources().getString(R.string.error_media_upload) + ".";
      return null;
    }
    String imageTitle=fVideo.getName();
    Map<String,Object> m=new HashMap<String,Object>();
    m.put("name",imageTitle);
    m.put("type",mimeType);
    m.put("bits",mf);
    m.put("overwrite",true);
    Object[] params={1,blog.getUsername(),blog.getPassword(),m};
    FeatureSet featureSet=synchronousGetFeatureSet();
    boolean selfHosted=WordPress.currentBlog != null && !WordPress.currentBlog.isDotcomFlag();
    boolean isVideoEnabled=selfHosted || (featureSet != null && mFeatureSet.isVideopressEnabled());
    if (isVideoEnabled) {
      Object result=uploadFileHelper(client,params,tempFile);
      Map<?,?> contentHash=(HashMap<?,?>)result;
      String resultURL=contentHash.get("url").toString();
      if (contentHash.containsKey("videopress_shortcode")) {
        resultURL=contentHash.get("videopress_shortcode").toString() + "\n";
      }
 else {
        resultURL=String.format("<video width=\"%s\" height=\"%s\" controls=\"controls\"><source src=\"%s\" type=\"%s\" /><a href=\"%s\">Click to view video</a>.</video>",xRes,yRes,resultURL,mimeType,resultURL);
      }
      content=content + resultURL;
    }
 else {
      mErrorMessage=getString(R.string.media_no_video_message);
      mErrorUnavailableVideoPress=true;
      return null;
    }
  }
 else {
    curImagePath=mf.getFilePath();
    Uri imageUri=Uri.parse(curImagePath);
    File imageFile=null;
    String mimeType="", orientation="", path="";
    if (imageUri.toString().contains("content:")) {
      String[] projection;
      Uri imgPath;
      projection=new String[]{Images.Media._ID,Images.Media.DATA,Images.Media.MIME_TYPE,Images.Media.ORIENTATION};
      imgPath=imageUri;
      Cursor cur=context.getContentResolver().query(imgPath,projection,null,null,null);
      if (cur.moveToFirst()) {
        int dataColumn, mimeTypeColumn, orientationColumn;
        dataColumn=cur.getColumnIndex(Images.Media.DATA);
        mimeTypeColumn=cur.getColumnIndex(Images.Media.MIME_TYPE);
        orientationColumn=cur.getColumnIndex(Images.Media.ORIENTATION);
        orientation=cur.getString(orientationColumn);
        String thumbData=cur.getString(dataColumn);
        mimeType=cur.getString(mimeTypeColumn);
        imageFile=new File(thumbData);
        path=thumbData;
        mf.setFilePath(imageFile.getPath());
      }
    }
 else {
      path=imageUri.toString().replace("file://","");
      imageFile=new File(path);
      mf.setFilePath(path);
    }
    if (imageFile == null) {
      mErrorMessage=context.getString(R.string.file_not_found);
      mIsMediaError=true;
      return null;
    }
    String fileName=imageFile.getName();
    MimeTypeMap mimeTypeMap=MimeTypeMap.getSingleton();
    String fileExtension=MimeTypeMap.getFileExtensionFromUrl(fileName);
    if (!TextUtils.isEmpty(fileExtension)) {
      mimeType=mimeTypeMap.getMimeTypeFromExtension(fileExtension);
    }
 else {
      try {
        DataInputStream inputStream=new DataInputStream(new FileInputStream(imageFile));
        String imageMimeType=MediaUtils.getMimeTypeOfInputStream(inputStream);
        if (!TextUtils.isEmpty(imageMimeType)) {
          mimeType=imageMimeType;
          if (mimeTypeMap.hasMimeType(mimeType)) {
            fileExtension=mimeTypeMap.getExtensionFromMimeType(mimeType);
            fileName+="." + fileExtension;
          }
        }
        inputStream.close();
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
    }
    ImageHelper ih=new ImageHelper();
    orientation=ih.getExifOrientation(path,orientation);
    String resizedPictureURL=null;
    boolean shouldUploadResizedVersion=!blog.getMaxImageWidth().equals("Original Size");
    if (!shouldUploadResizedVersion && !fileExtension.equals("gif")) {
      int pictureSettingWidth=mf.getWidth();
      BitmapFactory.Options options=new BitmapFactory.Options();
      options.inJustDecodeBounds=true;
      BitmapFactory.decodeFile(path,options);
      int imageHeight=options.outHeight;
      int imageWidth=options.outWidth;
      int[] dimensions={imageWidth,imageHeight};
      if (dimensions[0] != 0 && dimensions[0] != pictureSettingWidth) {
        shouldUploadResizedVersion=true;
      }
    }
    if (shouldUploadResizedVersion) {
      byte[] bytes;
      byte[] finalBytes;
      try {
        bytes=new byte[(int)imageFile.length()];
      }
 catch (      OutOfMemoryError er) {
        mErrorMessage=context.getString(R.string.out_of_memory);
        mIsMediaError=true;
        return null;
      }
      DataInputStream in=null;
      try {
        in=new DataInputStream(new FileInputStream(imageFile));
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      try {
        in.readFully(bytes);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        in.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      String width=String.valueOf(mf.getWidth());
      finalBytes=ih.createThumbnail(bytes,width,orientation,false,fileExtension);
      if (finalBytes == null) {
        mErrorMessage=context.getString(R.string.out_of_memory);
        mIsMediaError=true;
        return null;
      }
      Map<String,Object> m=new HashMap<String,Object>();
      m.put("name",fileName);
      m.put("type",mimeType);
      m.put("bits",finalBytes);
      m.put("overwrite",true);
      resizedPictureURL=uploadPicture(m,mf,blog);
      if (resizedPictureURL == null)       return null;
    }
    String fullSizeUrl=null;
    if (!shouldUploadResizedVersion || blog.isFullSizeImage()) {
      Map<String,Object> m=new HashMap<String,Object>();
      m.put("name",fileName);
      m.put("type",mimeType);
      m.put("bits",mf);
      m.put("overwrite",true);
      fullSizeUrl=uploadPicture(m,mf,blog);
      if (fullSizeUrl == null)       return null;
    }
    String alignment="";
switch (mf.getHorizontalAlignment()) {
case 0:
      alignment="alignnone";
    break;
case 1:
  alignment="alignleft";
break;
case 2:
alignment="aligncenter";
break;
case 3:
alignment="alignright";
break;
}
String alignmentCSS="class=\"" + alignment + " size-full\" ";
if ((fullSizeUrl != null && fullSizeUrl.equalsIgnoreCase("")) || (resizedPictureURL != null && resizedPictureURL.equalsIgnoreCase(""))) {
return "";
}
if (fullSizeUrl != null && resizedPictureURL != null) {
}
 else if (fullSizeUrl == null) {
fullSizeUrl=resizedPictureURL;
}
 else {
resizedPictureURL=fullSizeUrl;
}
String mediaTitle=TextUtils.isEmpty(mf.getTitle()) ? "" : mf.getTitle();
content=content + "<a href=\"" + fullSizeUrl+ "\"><img title=\""+ mediaTitle+ "\" "+ alignmentCSS+ "alt=\"image\" src=\""+ resizedPictureURL+ "\" /></a>";
if (!TextUtils.isEmpty(mf.getCaption())) {
content=String.format("[caption id=\"\" align=\"%s\" width=\"%d\" caption=\"%s\"]%s[/caption]",alignment,mf.getWidth(),TextUtils.htmlEncode(mf.getCaption()),content);
}
}
return content;
}
