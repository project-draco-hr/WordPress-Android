{
  String content="";
  String finalThumbnailUrl=null;
  String finalImageUrl=null;
  if (mf.getFileName() != null) {
    String curImagePath="";
    curImagePath=mf.getFileName();
    boolean video=false;
    if (curImagePath.contains("video")) {
      video=true;
    }
    if (video) {
      XMLRPCClient client=new XMLRPCClient(post.getBlog().getUrl(),post.getBlog().getHttpuser(),post.getBlog().getHttppassword());
      String tempFileName="wp-" + System.currentTimeMillis();
      try {
        context.openFileOutput(tempFileName,Context.MODE_PRIVATE);
      }
 catch (      FileNotFoundException e) {
        error=getResources().getString(R.string.file_error_create);
        mediaError=true;
        return null;
      }
      File tempFile=context.getFileStreamPath(tempFileName);
      Uri videoUri=Uri.parse(curImagePath);
      File fVideo=null;
      String mimeType="", xRes="", yRes="";
      if (videoUri.toString().contains("content:")) {
        String[] projection;
        Uri imgPath;
        projection=new String[]{Video.Media._ID,Video.Media.DATA,Video.Media.MIME_TYPE,Video.Media.RESOLUTION};
        imgPath=videoUri;
        Cursor cur=context.getContentResolver().query(imgPath,projection,null,null,null);
        String thumbData="";
        if (cur.moveToFirst()) {
          int mimeTypeColumn, resolutionColumn, dataColumn;
          dataColumn=cur.getColumnIndex(Video.Media.DATA);
          mimeTypeColumn=cur.getColumnIndex(Video.Media.MIME_TYPE);
          resolutionColumn=cur.getColumnIndex(Video.Media.RESOLUTION);
          mf=new MediaFile();
          thumbData=cur.getString(dataColumn);
          mimeType=cur.getString(mimeTypeColumn);
          if (mimeType.equalsIgnoreCase("video/mp4v-es")) {
            mimeType="video/mp4";
          }
          fVideo=new File(thumbData);
          mf.setFilePath(fVideo.getPath());
          String resolution=cur.getString(resolutionColumn);
          if (resolution != null) {
            String[] resx=resolution.split("x");
            xRes=resx[0];
            yRes=resx[1];
          }
 else {
            if (!post.getBlog().getMaxImageWidth().equals("Original Size")) {
              xRes=post.getBlog().getMaxImageWidth();
              yRes=String.valueOf(Math.round(Integer.valueOf(post.getBlog().getMaxImageWidth()) * 0.75));
            }
 else {
              xRes="640";
              yRes="480";
            }
          }
        }
      }
 else {
        fVideo=new File(videoUri.toString().replace("file://",""));
      }
      if (fVideo == null) {
        error=context.getResources().getString(R.string.error_media_upload) + ".";
        return null;
      }
      String imageTitle=fVideo.getName();
      Map<String,Object> m=new HashMap<String,Object>();
      m.put("name",imageTitle);
      m.put("type",mimeType);
      m.put("bits",mf);
      m.put("overwrite",true);
      Object[] params={1,post.getBlog().getUsername(),post.getBlog().getPassword(),m};
      FeatureSet featureSet=synchronousGetFeatureSet();
      boolean selfHosted=WordPress.currentBlog != null && !WordPress.currentBlog.isDotcomFlag();
      boolean isVideoEnabled=selfHosted || (featureSet != null && mFeatureSet.isVideopressEnabled());
      if (isVideoEnabled) {
        Object result=uploadFileHelper(client,params,tempFile);
        Map<?,?> contentHash=(HashMap<?,?>)result;
        String resultURL=contentHash.get("url").toString();
        if (contentHash.containsKey("videopress_shortcode")) {
          resultURL=contentHash.get("videopress_shortcode").toString() + "\n";
        }
 else {
          resultURL=String.format("<video width=\"%s\" height=\"%s\" controls=\"controls\"><source src=\"%s\" type=\"%s\" /><a href=\"%s\">Click to view video</a>.</video>",xRes,yRes,resultURL,mimeType,resultURL);
        }
        content=content + resultURL;
      }
 else {
        error=getString(R.string.media_no_video_message);
        return null;
      }
    }
 else {
      curImagePath=mf.getFileName();
      Uri imageUri=Uri.parse(curImagePath);
      File jpeg=null;
      String mimeType="", orientation="", path="";
      if (imageUri.toString().contains("content:")) {
        String[] projection;
        Uri imgPath;
        projection=new String[]{Images.Media._ID,Images.Media.DATA,Images.Media.MIME_TYPE,Images.Media.ORIENTATION};
        imgPath=imageUri;
        Cursor cur=context.getContentResolver().query(imgPath,projection,null,null,null);
        String thumbData="";
        if (cur.moveToFirst()) {
          int dataColumn, mimeTypeColumn, orientationColumn;
          dataColumn=cur.getColumnIndex(Images.Media.DATA);
          mimeTypeColumn=cur.getColumnIndex(Images.Media.MIME_TYPE);
          orientationColumn=cur.getColumnIndex(Images.Media.ORIENTATION);
          orientation=cur.getString(orientationColumn);
          thumbData=cur.getString(dataColumn);
          mimeType=cur.getString(mimeTypeColumn);
          jpeg=new File(thumbData);
          path=thumbData;
          mf.setFilePath(jpeg.getPath());
        }
      }
 else {
        path=imageUri.toString().replace("file://","");
        jpeg=new File(path);
        String extension=MimeTypeMap.getFileExtensionFromUrl(path);
        if (extension != null) {
          MimeTypeMap mime=MimeTypeMap.getSingleton();
          mimeType=mime.getMimeTypeFromExtension(extension);
          if (mimeType == null)           mimeType="image/jpeg";
        }
        mf.setFilePath(path);
      }
      if (jpeg == null) {
        error=context.getString(R.string.file_not_found);
        mediaError=true;
        return null;
      }
      ImageHelper ih=new ImageHelper();
      orientation=ih.getExifOrientation(path,orientation);
      String imageTitle=jpeg.getName();
      String resizedPictureURL=null;
      boolean shouldUploadResizedVersion=!post.getBlog().getMaxImageWidth().equals("Original Size");
      if (shouldUploadResizedVersion == false) {
        int pictureSettingWidth=mf.getWidth();
        BitmapFactory.Options options=new BitmapFactory.Options();
        options.inJustDecodeBounds=true;
        BitmapFactory.decodeFile(path,options);
        int imageHeight=options.outHeight;
        int imageWidth=options.outWidth;
        int[] dimensions={imageWidth,imageHeight};
        if (dimensions[0] != 0 && dimensions[0] != pictureSettingWidth) {
          shouldUploadResizedVersion=true;
        }
      }
      if (shouldUploadResizedVersion) {
        byte[] bytes;
        byte[] finalBytes=null;
        try {
          bytes=new byte[(int)jpeg.length()];
        }
 catch (        OutOfMemoryError er) {
          error=context.getString(R.string.out_of_memory);
          mediaError=true;
          return null;
        }
        DataInputStream in=null;
        try {
          in=new DataInputStream(new FileInputStream(jpeg));
        }
 catch (        FileNotFoundException e) {
          e.printStackTrace();
        }
        try {
          in.readFully(bytes);
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
        try {
          in.close();
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
        String width=String.valueOf(mf.getWidth());
        ImageHelper ih2=new ImageHelper();
        finalBytes=ih2.createThumbnail(bytes,width,orientation,false);
        if (finalBytes == null) {
          error=context.getString(R.string.out_of_memory);
          mediaError=true;
          return null;
        }
        Map<String,Object> m=new HashMap<String,Object>();
        m.put("name",imageTitle);
        m.put("type",mimeType);
        m.put("bits",finalBytes);
        m.put("overwrite",true);
        resizedPictureURL=uploadPicture(m,mf);
        if (resizedPictureURL == null)         return null;
      }
      String fullsizeURL=null;
      if (!shouldUploadResizedVersion || post.getBlog().isFullSizeImage()) {
        Map<String,Object> m=new HashMap<String,Object>();
        m.put("name",imageTitle);
        m.put("type",mimeType);
        m.put("bits",mf);
        m.put("overwrite",true);
        fullsizeURL=uploadPicture(m,mf);
        if (fullsizeURL == null)         return null;
      }
      String alignment="";
switch (mf.getHorizontalAlignment()) {
case 0:
        alignment="alignnone";
      break;
case 1:
    alignment="alignleft";
  break;
case 2:
alignment="aligncenter";
break;
case 3:
alignment="alignright";
break;
}
String alignmentCSS="class=\"" + alignment + " size-full\" ";
if ((fullsizeURL != null && fullsizeURL.equalsIgnoreCase("")) || (resizedPictureURL != null && resizedPictureURL.equalsIgnoreCase(""))) {
return "";
}
if (fullsizeURL != null && resizedPictureURL != null) {
}
 else if (fullsizeURL == null) {
fullsizeURL=resizedPictureURL;
}
 else {
resizedPictureURL=fullsizeURL;
}
content=content + "<a href=\"" + fullsizeURL+ "\"><img title=\""+ mf.getTitle()+ "\" "+ alignmentCSS+ "alt=\"image\" src=\""+ resizedPictureURL+ "\" /></a>";
if (!mf.getCaption().equals("")) {
content=String.format("[caption id=\"\" align=\"%s\" width=\"%d\" caption=\"%s\"]%s[/caption]",alignment,mf.getWidth(),TextUtils.htmlEncode(mf.getCaption()),content);
}
}
}
return content;
}
