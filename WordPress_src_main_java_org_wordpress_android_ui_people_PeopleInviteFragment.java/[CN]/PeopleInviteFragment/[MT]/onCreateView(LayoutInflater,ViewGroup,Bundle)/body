{
  setHasOptionsMenu(true);
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.people_invite_fragment,container,false);
  mUsernamesContainer=(ViewGroup)rootView.findViewById(R.id.usernames);
  String role=null;
  if (savedInstanceState != null) {
    ArrayList<String> usernames=savedInstanceState.getStringArrayList(KEY_USERNAMES);
    populateUsernameButtons(usernames,inflater,mUsernamesContainer);
    role=savedInstanceState.getString(KEY_ROLE);
  }
  if (role == null) {
    role=loadDefaultRole();
  }
  mUsernameEditText=(EditText)rootView.findViewById(R.id.invite_usernames);
  mUsernameEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      if (mUsernameEditText.getText().toString().endsWith(" ")) {
        addUsername(mUsernameEditText,inflater,mUsernamesContainer,null);
      }
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  mUsernameEditText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_DONE || (event.getAction() == KeyEvent.ACTION_UP && event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) {
        addUsername(mUsernameEditText,inflater,mUsernamesContainer,null);
      }
      return true;
    }
  }
);
  mUsernameEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (!hasFocus && mUsernameEditText.getText().toString().length() > 0) {
        addUsername(mUsernameEditText,inflater,mUsernamesContainer,null);
      }
    }
  }
);
  View usernamesContainer=rootView.findViewById(R.id.usernames);
  usernamesContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mUsernameEditText.requestFocus();
    }
  }
);
  View roleContainer=rootView.findViewById(R.id.role_container);
  roleContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      RoleSelectDialogFragment.show(PeopleInviteFragment.this,0);
    }
  }
);
  mRoleTextView=(TextView)rootView.findViewById(R.id.role);
  setRole(role);
  final int MAX_CHARS=getResources().getInteger(R.integer.invite_message_char_limit);
  final TextView remainingCharsTextView=(TextView)rootView.findViewById(R.id.message_remaining);
  mCustomMessageEditText=(EditText)rootView.findViewById(R.id.message);
  mCustomMessageEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      mCustomMessage=mCustomMessageEditText.getText().toString();
      updateRemainingCharsView(remainingCharsTextView,mCustomMessage,MAX_CHARS);
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  updateRemainingCharsView(remainingCharsTextView,mCustomMessage,MAX_CHARS);
  return rootView;
}
