{
  super.onViewCreated(view,savedInstanceState);
  mUsernamesContainer=(ViewGroup)getView().findViewById(R.id.usernames);
  String role=null;
  if (savedInstanceState != null) {
    ArrayList<String> usernames=savedInstanceState.getStringArrayList(KEY_USERNAMES);
    mUsernameResults=(HashMap<String,String>)savedInstanceState.getSerializable(KEY_USERNAME_RESULTS);
    populateUsernameButtons(usernames);
    role=savedInstanceState.getString(KEY_ROLE);
  }
  if (role == null) {
    role=loadDefaultRole();
  }
  mUsernameEditText=(MultiUsernameEditText)getView().findViewById(R.id.invite_usernames);
  mUsernameEditText.setOnSelectionChangeListener(new MultiUsernameEditText.OnSelectionChangeListener(){
    @Override public void onSelectionChanged(    int selStart,    int selEnd){
      if (selEnd == 0) {
        if (mUsernameEditText.getText().toString().length() == 0) {
          List<String> list=new ArrayList<>(mUsernameButtons.keySet());
          if (!list.isEmpty()) {
            String username=list.get(list.size() - 1);
            removeUsername(username);
          }
          mUsernameEditText.setText(" ");
        }
        mUsernameEditText.setSelection(1);
      }
    }
  }
);
  mUsernameEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      if (!mAddingUsername && mUsernameEditText.getText().toString().endsWith(" ")) {
        mAddingUsername=true;
        addUsername(mUsernameEditText,null);
        mAddingUsername=false;
      }
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  mUsernameEditText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_DONE || (event != null && event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) {
        addUsername(mUsernameEditText,null);
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  mUsernameEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (!hasFocus && mUsernameEditText.getText().toString().length() > 0) {
        addUsername(mUsernameEditText,null);
      }
    }
  }
);
  View usernamesContainer=getView().findViewById(R.id.usernames);
  usernamesContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      EditTextUtils.showSoftInput(mUsernameEditText);
    }
  }
);
  View roleContainer=getView().findViewById(R.id.role_container);
  roleContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      RoleSelectDialogFragment.show(PeopleInviteFragment.this,0);
    }
  }
);
  mRoleTextView=(TextView)getView().findViewById(R.id.role);
  setRole(role);
  final int MAX_CHARS=getResources().getInteger(R.integer.invite_message_char_limit);
  final TextView remainingCharsTextView=(TextView)getView().findViewById(R.id.message_remaining);
  mCustomMessageEditText=(EditText)getView().findViewById(R.id.message);
  mCustomMessageEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      mCustomMessage=mCustomMessageEditText.getText().toString();
      updateRemainingCharsView(remainingCharsTextView,mCustomMessage,MAX_CHARS);
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  updateRemainingCharsView(remainingCharsTextView,mCustomMessage,MAX_CHARS);
}
