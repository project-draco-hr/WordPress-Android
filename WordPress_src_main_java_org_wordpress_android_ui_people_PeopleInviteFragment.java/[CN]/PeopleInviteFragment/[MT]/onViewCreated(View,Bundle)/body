{
  super.onViewCreated(view,savedInstanceState);
  mUsernamesContainer=(ViewGroup)view.findViewById(R.id.usernames);
  mUsernamesContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      EditTextUtils.showSoftInput(mUsernameEditText);
    }
  }
);
  String role=mRole;
  if (role == null) {
    role=loadDefaultRole();
  }
  mUsernameEditText=(MultiUsernameEditText)view.findViewById(R.id.invite_usernames);
  mUsernameEditText.setOnBackspacePressedListener(new MultiUsernameEditText.OnBackspacePressedListener(){
    @Override public void onBackspacePressed(){
      if (!TextUtils.isEmpty(mUsernameEditText.getText())) {
        return;
      }
      List<String> list=new ArrayList<>(mUsernameButtons.keySet());
      if (!list.isEmpty()) {
        String username=list.get(list.size() - 1);
        removeUsername(username);
      }
    }
  }
);
  mUsernameEditText.addTextChangedListener(new TextWatcher(){
    private boolean shouldIgnoreChanges=false;
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      if (shouldIgnoreChanges) {
        return;
      }
      shouldIgnoreChanges=true;
      if (mUsernameButtons.size() >= MAX_NUMBER_OF_INVITEES && !TextUtils.isEmpty(s)) {
        resetEditTextContent(mUsernameEditText);
      }
 else       if (endsWithDelimiter(mUsernameEditText.getText().toString())) {
        addUsername(mUsernameEditText,null);
      }
      shouldIgnoreChanges=false;
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  mUsernameEditText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_DONE || (event != null && event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) {
        addUsername(mUsernameEditText,null);
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  mUsernameEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (!hasFocus && mUsernameEditText.getText().toString().length() > 0) {
        addUsername(mUsernameEditText,null);
      }
    }
  }
);
  if (mUsernameButtons.size() > 0) {
    ArrayList<String> usernames=new ArrayList<>(mUsernameButtons.keySet());
    populateUsernameButtons(usernames);
  }
  View roleContainer=view.findViewById(R.id.role_container);
  roleContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      RoleSelectDialogFragment.show(PeopleInviteFragment.this,0);
    }
  }
);
  mRoleTextView=(TextView)view.findViewById(R.id.role);
  setRole(role);
  final int MAX_CHARS=getResources().getInteger(R.integer.invite_message_char_limit);
  final TextView remainingCharsTextView=(TextView)view.findViewById(R.id.message_remaining);
  mCustomMessageEditText=(EditText)view.findViewById(R.id.message);
  mCustomMessageEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      mCustomMessage=mCustomMessageEditText.getText().toString();
      updateRemainingCharsView(remainingCharsTextView,mCustomMessage,MAX_CHARS);
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
  updateRemainingCharsView(remainingCharsTextView,mCustomMessage,MAX_CHARS);
}
