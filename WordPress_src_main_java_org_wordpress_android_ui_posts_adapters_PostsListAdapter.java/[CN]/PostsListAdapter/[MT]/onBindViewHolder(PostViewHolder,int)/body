{
  PostsListPost post=mPosts.get(position);
  String date=post.getFormattedDate();
  String titleText=post.getTitle();
  if (titleText.equals("")) {
    titleText="(" + mContext.getResources().getText(R.string.untitled) + ")";
  }
  holder.txtTitle.setText(titleText);
  if (post.isLocalDraft()) {
    holder.txtDate.setVisibility(View.GONE);
  }
 else {
    holder.txtDate.setText(date);
    holder.txtDate.setVisibility(View.VISIBLE);
  }
  String formattedStatus="";
  if ((post.getStatusEnum() == PostStatus.PUBLISHED) && !post.isLocalDraft() && !post.hasLocalChanges()) {
    holder.txtStatus.setVisibility(View.GONE);
  }
 else {
    holder.txtStatus.setVisibility(View.VISIBLE);
    if (post.isUploading()) {
      formattedStatus=mContext.getResources().getString(R.string.post_uploading);
    }
 else     if (post.isLocalDraft()) {
      formattedStatus=mContext.getResources().getString(R.string.local_draft);
    }
 else     if (post.hasLocalChanges()) {
      formattedStatus=mContext.getResources().getString(R.string.local_changes);
    }
 else {
switch (post.getStatusEnum()) {
case DRAFT:
        formattedStatus=mContext.getResources().getString(R.string.draft);
      break;
case PRIVATE:
    formattedStatus=mContext.getResources().getString(R.string.post_private);
  break;
case PENDING:
formattedStatus=mContext.getResources().getString(R.string.pending_review);
break;
case SCHEDULED:
formattedStatus=mContext.getResources().getString(R.string.scheduled);
break;
default :
break;
}
}
if (post.isLocalDraft() || post.getStatusEnum() == PostStatus.DRAFT || post.hasLocalChanges() || post.isUploading()) {
holder.txtStatus.setTextColor(mContext.getResources().getColor(R.color.orange_fire));
}
 else {
holder.txtStatus.setTextColor(mContext.getResources().getColor(R.color.grey_darken_10));
}
formattedStatus=formattedStatus.toUpperCase(Locale.getDefault()).replace(" ","\n");
holder.txtStatus.setText(formattedStatus);
}
if (mOnLoadMoreListener != null && position >= getItemCount() - 1 && position >= PostsListFragment.POSTS_REQUEST_COUNT - 1) {
mOnLoadMoreListener.onLoadMore();
}
holder.itemView.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (mOnPostSelectedListener != null) {
PostsListPost selectedPost=getItem(position);
if (selectedPost != null) {
mOnPostSelectedListener.onPostSelected(selectedPost);
}
}
}
}
);
}
