{
  String content="";
  String finalThumbnailUrl=null;
  String finalImageUrl=null;
  final int printCtr=0;
  final String statusText="Uploading Media File #" + String.valueOf(printCtr + 1);
  n.contentView.setTextViewText(R.id.status_text,statusText);
  if (mf.getFileName() != null) {
    XMLRPCClient client=new XMLRPCClient(post.blog.getUrl(),post.blog.getHttpuser(),post.blog.getHttppassword());
    String curImagePath="";
    curImagePath=mf.getFileName();
    boolean video=false;
    if (curImagePath.contains("video")) {
      video=true;
    }
    if (video) {
      Uri videoUri=Uri.parse(curImagePath);
      File fVideo=null;
      String mimeType="", xRes="", yRes="";
      if (videoUri.toString().contains("content:")) {
        String[] projection;
        Uri imgPath;
        projection=new String[]{Video.Media._ID,Video.Media.DATA,Video.Media.MIME_TYPE,Video.Media.RESOLUTION};
        imgPath=videoUri;
        Cursor cur=((Activity)context).managedQuery(imgPath,projection,null,null,null);
        String thumbData="";
        if (cur.moveToFirst()) {
          int mimeTypeColumn, resolutionColumn, dataColumn;
          dataColumn=cur.getColumnIndex(Video.Media.DATA);
          mimeTypeColumn=cur.getColumnIndex(Video.Media.MIME_TYPE);
          resolutionColumn=cur.getColumnIndex(Video.Media.RESOLUTION);
          mf=new MediaFile();
          thumbData=cur.getString(dataColumn);
          mimeType=cur.getString(mimeTypeColumn);
          fVideo=new File(thumbData);
          mf.setFilePath(fVideo.getPath());
          String resolution=cur.getString(resolutionColumn);
          if (resolution != null) {
            String[] resx=resolution.split("x");
            xRes=resx[0];
            yRes=resx[1];
          }
 else {
            if (!post.blog.getMaxImageWidth().equals("Original Size")) {
              xRes=post.blog.getMaxImageWidth();
              yRes=String.valueOf(Math.round(Integer.valueOf(post.blog.getMaxImageWidth()) * 0.75));
            }
 else {
              xRes="640";
              yRes="480";
            }
          }
        }
      }
 else {
        fVideo=new File(videoUri.toString().replace("file://",""));
      }
      String imageTitle=fVideo.getName();
      HashMap<String,Object> m=new HashMap<String,Object>();
      m.put("name",imageTitle);
      m.put("type",mimeType);
      m.put("bits",mf);
      m.put("overwrite",true);
      Object[] params={1,post.blog.getUsername(),post.blog.getPassword(),m};
      Object result=null;
      try {
        result=(Object)client.call("wp.uploadFile",params);
      }
 catch (      XMLRPCException e) {
        String mediaErrorMsg=e.getLocalizedMessage();
        if (video) {
          if (mediaErrorMsg.contains("Invalid file type")) {
            mediaErrorMsg=context.getResources().getString(R.string.vp_upgrade);
          }
        }
        return null;
      }
      HashMap<?,?> contentHash=new HashMap<Object,Object>();
      contentHash=(HashMap<?,?>)result;
      String resultURL=contentHash.get("url").toString();
      if (contentHash.containsKey("videopress_shortcode")) {
        resultURL=contentHash.get("videopress_shortcode").toString() + "\n";
      }
 else {
        resultURL=String.format("<video width=\"%s\" height=\"%s\" controls=\"controls\"><source src=\"%s\" type=\"%s\" /><a href=\"%s\">Click to view video</a>.</video>",xRes,yRes,resultURL,mimeType,resultURL);
      }
      content=content + resultURL;
    }
 else {
      for (int i=0; i < 2; i++) {
        curImagePath=mf.getFileName();
        if (i == 0 || post.blog.isFullSizeImage()) {
          Uri imageUri=Uri.parse(curImagePath);
          File jpeg=null;
          String mimeType="", orientation="", path="";
          if (imageUri.toString().contains("content:")) {
            String[] projection;
            Uri imgPath;
            projection=new String[]{Images.Media._ID,Images.Media.DATA,Images.Media.MIME_TYPE,Images.Media.ORIENTATION};
            imgPath=imageUri;
            Cursor cur=((Activity)context).managedQuery(imgPath,projection,null,null,null);
            String thumbData="";
            if (cur.moveToFirst()) {
              int dataColumn, mimeTypeColumn, orientationColumn;
              dataColumn=cur.getColumnIndex(Images.Media.DATA);
              mimeTypeColumn=cur.getColumnIndex(Images.Media.MIME_TYPE);
              orientationColumn=cur.getColumnIndex(Images.Media.ORIENTATION);
              orientation=cur.getString(orientationColumn);
              thumbData=cur.getString(dataColumn);
              mimeType=cur.getString(mimeTypeColumn);
              jpeg=new File(thumbData);
              path=thumbData;
              mf.setFilePath(jpeg.getPath());
            }
          }
 else {
            path=imageUri.toString().replace("file://","");
            jpeg=new File(path);
            mf.setFilePath(path);
          }
          if (jpeg == null) {
            break;
          }
          ImageHelper ih=new ImageHelper();
          orientation=ih.getExifOrientation(path,orientation);
          String imageTitle=jpeg.getName();
          byte[] finalBytes=null;
          if (i == 0) {
            byte[] bytes=new byte[(int)jpeg.length()];
            DataInputStream in=null;
            try {
              in=new DataInputStream(new FileInputStream(jpeg));
            }
 catch (            FileNotFoundException e) {
              e.printStackTrace();
            }
            try {
              in.readFully(bytes);
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
            try {
              in.close();
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
            ImageHelper ih2=new ImageHelper();
            finalBytes=ih2.createThumbnail(bytes,String.valueOf(mf.getWidth()),orientation,false);
          }
          Map<String,Object> m=new HashMap<String,Object>();
          m.put("name",imageTitle);
          m.put("type",mimeType);
          if (i == 0) {
            m.put("bits",finalBytes);
          }
 else {
            m.put("bits",mf);
          }
          m.put("overwrite",true);
          Object[] params={1,post.blog.getUsername(),post.blog.getPassword(),m};
          Object result=null;
          try {
            result=(Object)client.call("wp.uploadFile",params);
          }
 catch (          XMLRPCException e) {
            e.printStackTrace();
            e.getLocalizedMessage();
            break;
          }
          HashMap<?,?> contentHash=new HashMap<Object,Object>();
          contentHash=(HashMap<?,?>)result;
          String resultURL=contentHash.get("url").toString();
          if (i == 0) {
            finalThumbnailUrl=resultURL;
          }
 else {
            if (post.blog.isFullSizeImage()) {
              finalImageUrl=resultURL;
            }
 else {
              finalImageUrl="";
            }
          }
          String alignment="";
switch (mf.getHorizontalAlignment()) {
case 0:
            alignment="alignnone";
          break;
case 1:
        alignment="alignleft";
      break;
case 2:
    alignment="aligncenter";
  break;
case 3:
alignment="alignright";
break;
}
String alignmentCSS="class=\"" + alignment + "\" ";
if (resultURL != null) {
if (i != 0 && post.blog.isFullSizeImage()) {
content=content + "<a alt=\"image\" href=\"" + finalImageUrl+ "\"><img title=\""+ mf.getTitle()+ "\" "+ alignmentCSS+ "alt=\"image\" src=\""+ finalThumbnailUrl+ "\" /></a>";
}
 else {
if (i == 0 && post.blog.isFullSizeImage() == false) {
content=content + "<img title=\"" + mf.getTitle()+ "\" "+ alignmentCSS+ "alt=\"image\" src=\""+ finalThumbnailUrl+ "\" />";
}
}
if (!mf.getCaption().equals("")) {
content=String.format("[caption id=\"\" align=\"%s\" width=\"%d\" caption=\"%s\"]%s[/caption]",alignment,mf.getWidth(),EscapeUtils.escapeHtml(mf.getCaption()),content);
}
}
}
}
}
}
return content;
}
