{
  super.onCreate(icicle);
  setContentView(R.layout.edit);
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    id=extras.getString("id");
    accountName=extras.getString("accountName");
    postID=extras.getString("postID");
  }
  this.setTitle(accountName + " - Edit Post");
  loadCategories();
  settingsDB settingsDB=new settingsDB(this);
  Vector categoriesVector=settingsDB.loadSettings(this,id);
  String sURL="";
  if (categoriesVector.get(0).toString().contains("xmlrpc.php")) {
    sURL=categoriesVector.get(0).toString();
  }
 else {
    sURL=categoriesVector.get(0).toString() + "xmlrpc.php";
  }
  String sUsername=categoriesVector.get(2).toString();
  String sPassword=categoriesVector.get(3).toString();
  client=new XMLRPCClient(sURL);
  EditText titleET=(EditText)findViewById(R.id.title);
  String setTitle=titleET.getText().toString();
  if (setTitle.equals("")) {
    pd=ProgressDialog.show(editPost.this,"Getting Post","Please wait while attempting to get post. (note - pictures will not be loaded)",true,false);
    XMLRPCMethod method=new XMLRPCMethod("metaWeblog.getPost",new XMLRPCMethodCallback(){
      public void callFinished(      Object result){
        String s="done";
        s=result.toString();
        pd.dismiss();
        if (result == null) {
        }
 else {
          HashMap contentHash=(HashMap)result;
          EditText titleET=(EditText)findViewById(R.id.title);
          titleET.setText(contentHash.get("title").toString());
          EditText contentET=(EditText)findViewById(R.id.content);
          if (contentHash.get("mt_text_more").toString() != "") {
            contentET.setText(contentHash.get("description").toString() + "<!--more-->\n" + contentHash.get("mt_text_more").toString());
          }
 else {
            contentET.setText(contentHash.get("description").toString());
          }
          EditText tagsET=(EditText)findViewById(R.id.tags);
          tagsET.setText(contentHash.get("mt_keywords").toString());
          String status=contentHash.get("post_status").toString();
          TextView categories=(TextView)findViewById(R.id.selectedCategories);
          Object categoriesArray[]=(Object[])contentHash.get("categories");
          if (categoriesArray != null) {
            int ctr=0;
            String conCategories="";
            for (            Object item : categoriesArray) {
              String category=categoriesArray[ctr].toString();
              if (!selectedCategories.contains(category)) {
                categories.setText(categories.getText().toString() + category + ", ");
                selectedCategories.add(category);
              }
              ctr++;
            }
          }
          CheckBox publishCB=(CheckBox)findViewById(R.id.publish);
          if (status.equals("publish")) {
            publishCB.setChecked(true);
          }
 else {
            publishCB.setChecked(false);
          }
        }
      }
    }
);
    Object[] params={postID,sUsername,sPassword};
    method.call(params);
  }
  Spinner spinner=(Spinner)findViewById(R.id.spinner1);
  spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    public void onItemSelected(    AdapterView parent,    View v,    int position,    long id){
      if (newStart != true) {
        String selectedItem=parent.getItemAtPosition(position).toString();
        TextView selectedCategoriesTV=(TextView)findViewById(R.id.selectedCategories);
        if (!selectedCategories.contains(selectedItem)) {
          selectedCategoriesTV.setText(selectedCategoriesTV.getText().toString() + selectedItem + ", ");
          selectedCategories.add(selectedItem);
        }
      }
 else {
        newStart=false;
      }
    }
    public void onNothingSelected(    AdapterView arg0){
    }
  }
);
  final Button postButton=(Button)findViewById(R.id.post);
  postButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      showDialog(ID_DIALOG_POSTING);
      Thread t=new Thread(){
        String resultCode="";
        public void run(){
          try {
            finalResult=submitPost();
            mHandler.post(mUpdateResults);
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
      }
;
      t.start();
    }
  }
);
  final ImageButton refreshCategoriesButton=(ImageButton)findViewById(R.id.refreshCategoriesButton);
  refreshCategoriesButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      pd=ProgressDialog.show(editPost.this,"Refreshing Categories","Attempting to refresh categories from the wordpress site...",true,true);
      Thread th=new Thread(){
        public void run(){
          finalResult=getCategories();
          mHandler.post(mUpdateResults);
        }
      }
;
      th.start();
    }
  }
);
  final Button addPictureButton=(Button)findViewById(R.id.addPictureButton);
  addPictureButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      Intent photoPickerIntent=new Intent(Intent.ACTION_PICK);
      photoPickerIntent.setType("image/*");
      startActivityForResult(photoPickerIntent,1);
    }
  }
);
  final Button clearCategories=(Button)findViewById(R.id.clearCategories);
  clearCategories.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      TextView selectedCategoriesTV=(TextView)findViewById(R.id.selectedCategories);
      selectedCategoriesTV.setText("Selected categories: ");
      selectedCategories.clear();
    }
  }
);
  final Button boldButton=(Button)findViewById(R.id.bold);
  boldButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      TextView contentText=(TextView)findViewById(R.id.content);
      int selectionStart=contentText.getSelectionStart();
      int selectionEnd=contentText.getSelectionEnd();
      if (selectionStart > selectionEnd) {
        int temp=selectionEnd;
        selectionEnd=selectionStart;
        selectionStart=temp;
      }
      if (selectionStart == -1 || selectionStart == contentText.getText().toString().length() || (selectionStart == selectionEnd)) {
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(editPost.this);
        dialogBuilder.setTitle("No text selected");
        dialogBuilder.setMessage("Please select some text first in order to bold it. You can select text by holding the shift key and scrolling.");
        dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        dialogBuilder.create().show();
      }
 else {
        String textToBold=contentText.getText().toString().substring(selectionStart,selectionEnd);
        textToBold="<strong>" + textToBold + "</strong>";
        String firstHalf=contentText.getText().toString().substring(0,selectionStart);
        String lastHalf=contentText.getText().toString().substring(selectionEnd,contentText.getText().toString().length());
        contentText.setText(firstHalf + textToBold + lastHalf);
        Editable etext=(Editable)contentText.getText();
        Selection.setSelection(etext,selectionStart + textToBold.length());
      }
    }
  }
);
  final Button linkButton=(Button)findViewById(R.id.link);
  linkButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      TextView contentText=(TextView)findViewById(R.id.content);
      int selectionStart=contentText.getSelectionStart();
      int selectionEnd=contentText.getSelectionEnd();
      if (selectionStart > selectionEnd) {
        int temp=selectionEnd;
        selectionEnd=selectionStart;
        selectionStart=temp;
      }
      if (selectionStart == -1 || selectionStart == contentText.getText().toString().length() || (selectionStart == selectionEnd)) {
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(editPost.this);
        dialogBuilder.setTitle("No text selected");
        dialogBuilder.setMessage("Please select some text first in order to link it. You can select text by holding the shift key and scrolling.");
        dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        dialogBuilder.create().show();
      }
 else {
        Intent i=new Intent(editPost.this,link.class);
        startActivityForResult(i,2);
      }
    }
  }
);
  final Button emButton=(Button)findViewById(R.id.em);
  emButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      TextView contentText=(TextView)findViewById(R.id.content);
      int selectionStart=contentText.getSelectionStart();
      int selectionEnd=contentText.getSelectionEnd();
      if (selectionStart > selectionEnd) {
        int temp=selectionEnd;
        selectionEnd=selectionStart;
        selectionStart=temp;
      }
      if (selectionStart == -1 || selectionStart == contentText.getText().toString().length() || (selectionStart == selectionEnd)) {
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(editPost.this);
        dialogBuilder.setTitle("No text selected");
        dialogBuilder.setMessage("Please select some text in order to emphasize it. You can select text by holding the shift key and scrolling.");
        dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        dialogBuilder.create().show();
      }
 else {
        String textToBold=contentText.getText().toString().substring(selectionStart,selectionEnd);
        textToBold="<em>" + textToBold + "</em>";
        String firstHalf=contentText.getText().toString().substring(0,selectionStart);
        String lastHalf=contentText.getText().toString().substring(selectionEnd,contentText.getText().toString().length());
        contentText.setText(firstHalf + textToBold + lastHalf);
        Editable etext=(Editable)contentText.getText();
        Selection.setSelection(etext,selectionStart + textToBold.length());
      }
    }
  }
);
  final Button bquoteButton=(Button)findViewById(R.id.bquote);
  bquoteButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      TextView contentText=(TextView)findViewById(R.id.content);
      int selectionStart=contentText.getSelectionStart();
      int selectionEnd=contentText.getSelectionEnd();
      if (selectionStart > selectionEnd) {
        int temp=selectionEnd;
        selectionEnd=selectionStart;
        selectionStart=temp;
      }
      if (selectionStart == -1 || selectionStart == contentText.getText().toString().length() || (selectionStart == selectionEnd)) {
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(editPost.this);
        dialogBuilder.setTitle("No text selected");
        dialogBuilder.setMessage("Please select some text in order to place it in a blockquote. You can select text by holding the shift key and scrolling.");
        dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        dialogBuilder.create().show();
      }
 else {
        String textToBold=contentText.getText().toString().substring(selectionStart,selectionEnd);
        textToBold="<blockquote>" + textToBold + "</blockquote>";
        String firstHalf=contentText.getText().toString().substring(0,selectionStart);
        String lastHalf=contentText.getText().toString().substring(selectionEnd,contentText.getText().toString().length());
        contentText.setText(firstHalf + textToBold + lastHalf);
        Editable etext=(Editable)contentText.getText();
        Selection.setSelection(etext,selectionStart + textToBold.length());
      }
    }
  }
);
  final Button cancelButton=(Button)findViewById(R.id.cancel);
  cancelButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      finish();
    }
  }
);
  final Button clearPictureButton=(Button)findViewById(R.id.clearPicture);
  clearPictureButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      imageUrl.clear();
      thumbnailUrl.clear();
      selectedImageIDs=new Vector();
      selectedImageCtr=0;
      GridView gridview=(GridView)findViewById(R.id.gridView);
      gridview.setAdapter(null);
    }
  }
);
}
