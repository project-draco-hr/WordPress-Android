{
  mDate=response.getString("date");
  mHighestDayAverage=response.getInt("highest_day_average");
  mHighestWeekAverage=response.getInt("highest_week_average");
  mHighestMonth=response.getInt("highest_month");
  mYears=new LinkedList<Year>();
  mAverages=new LinkedList<Average>();
  mWeeks=new LinkedList<Week>();
  JSONArray dataJSON=response.getJSONArray("data");
  if (dataJSON != null) {
    JSONArray fieldsJSON=response.getJSONArray("fields");
    try {
      fieldColumnsMapping=new HashMap<String,Integer>(2);
      for (int i=0; i < fieldsJSON.length(); i++) {
        final String field=fieldsJSON.getString(i);
        fieldColumnsMapping.put(field,i);
      }
    }
 catch (    JSONException e) {
      AppLog.e(AppLog.T.STATS,"Cannot read the fields indexes from the JSON response",e);
      throw e;
    }
    VisitModel[] visitModels=new VisitModel[dataJSON.length()];
    int viewsColumnIndex=fieldColumnsMapping.get("views");
    int periodColumnIndex=fieldColumnsMapping.get("period");
    for (int i=0; i < dataJSON.length(); i++) {
      try {
        JSONArray currentDayData=dataJSON.getJSONArray(i);
        VisitModel currentVisitModel=new VisitModel();
        currentVisitModel.setPeriod(currentDayData.getString(periodColumnIndex));
        currentVisitModel.setViews(currentDayData.getInt(viewsColumnIndex));
        visitModels[i]=currentVisitModel;
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,"Cannot create the Visit at index " + i,e);
      }
    }
    mDayViews=visitModels;
  }
 else {
    mDayViews=null;
  }
  try {
    JSONObject yearsJSON=response.getJSONObject("years");
    final Iterator keys=yearsJSON.keys();
    while (keys.hasNext()) {
      Year currentYear=new Year();
      String currentYearKey=(String)keys.next();
      currentYear.setLabel(currentYearKey);
      JSONObject currentYearObj=yearsJSON.getJSONObject(currentYearKey);
      int total=currentYearObj.getInt("total");
      currentYear.setTotal(total);
      JSONObject months=currentYearObj.getJSONObject("months");
      final Iterator monthsKeys=months.keys();
      while (monthsKeys.hasNext()) {
        String currentMonthKey=(String)monthsKeys.next();
        int currentMonthVisits=months.getInt(currentMonthKey);
        int currentMonthIndex=Integer.parseInt(currentMonthKey) - 1;
        currentYear.getMonths()[currentMonthIndex]=currentMonthVisits;
      }
      mYears.add(currentYear);
    }
  }
 catch (  JSONException e) {
    AppLog.e(AppLog.T.STATS,"Cannot parse the Years section",e);
  }
  try {
    JSONObject averagesJSON=response.getJSONObject("averages");
    final Iterator averagesKeys=averagesJSON.keys();
    while (averagesKeys.hasNext()) {
      Average currentAverage=new Average();
      String currentJSONKey=(String)averagesKeys.next();
      currentAverage.setLabel(currentJSONKey);
      JSONObject currentAverageJSONObj=averagesJSON.getJSONObject(currentJSONKey);
      currentAverage.setOverall(currentAverageJSONObj.getInt("overall"));
      JSONObject monthsJSON=currentAverageJSONObj.getJSONObject("months");
      final Iterator monthsKeys=monthsJSON.keys();
      while (monthsKeys.hasNext()) {
        String currentMonthKey=(String)monthsKeys.next();
        int currentMonthVisits=monthsJSON.getInt(currentMonthKey);
        int currentMonthIndex=Integer.parseInt(currentMonthKey) - 1;
        currentAverage.getMonths()[currentMonthIndex]=currentMonthVisits;
      }
      mAverages.add(currentAverage);
    }
  }
 catch (  JSONException e) {
    AppLog.e(AppLog.T.STATS,"Cannot parse the Averages section",e);
  }
  try {
    JSONArray weeksJSON=response.getJSONArray("weeks");
    for (int i=0; i < weeksJSON.length(); i++) {
      Week currentWeek=new Week();
      JSONObject currentWeekJSON=weeksJSON.getJSONObject(i);
      currentWeek.setTotal(currentWeekJSON.getInt("total"));
      try {
        if (i == 0) {
          currentWeek.setChange(0);
        }
 else {
          currentWeek.setChange(currentWeekJSON.getInt("change"));
        }
      }
 catch (      JSONException e) {
        currentWeek.setChange(0);
      }
      currentWeek.setAverage(currentWeekJSON.getInt("average"));
      JSONArray daysJSON=currentWeekJSON.getJSONArray("days");
      for (int j=0; j < daysJSON.length(); j++) {
        Day currentDay=new Day();
        JSONObject dayJSON=daysJSON.getJSONObject(j);
        currentDay.setCount(dayJSON.getInt("count"));
        currentDay.setDay(dayJSON.getString("day"));
        currentWeek.getDays().add(currentDay);
      }
      mWeeks.add(currentWeek);
    }
  }
 catch (  JSONException e) {
    AppLog.e(AppLog.T.STATS,"Cannot parse the Weeks section",e);
  }
}
