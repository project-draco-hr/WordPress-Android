{
  if (c == null) {
    throw new IllegalArgumentException("getPostFromCursor > null cursor");
  }
  ReaderPost post=new ReaderPost();
  if (cols == null) {
    cols=new PostColumnIndexes(c);
  }
  post.postId=c.getLong(cols.idx_post_id);
  post.blogId=c.getLong(cols.idx_blog_id);
  post.authorId=c.getLong(cols.idx_author_id);
  post.setPseudoId(c.getString(cols.idx_pseudo_id));
  post.setAuthorName(c.getString(cols.idx_author_name));
  post.setBlogName(c.getString(cols.idx_blog_name));
  post.setBlogUrl(c.getString(cols.idx_blog_url));
  post.setExcerpt(c.getString(cols.idx_excerpt));
  post.setFeaturedImage(c.getString(cols.idx_featured_image));
  post.setFeaturedVideo(c.getString(cols.idx_featured_video));
  post.setTitle(c.getString(cols.idx_title));
  post.setText(c.getString(cols.idx_text));
  post.setUrl(c.getString(cols.idx_url));
  post.setPostAvatar(c.getString(cols.idx_post_avatar));
  post.timestamp=c.getLong(cols.idx_timestamp);
  post.setPublished(c.getString(cols.idx_published));
  post.numReplies=c.getInt(cols.idx_num_replies);
  post.numLikes=c.getInt(cols.idx_num_likes);
  post.isLikedByCurrentUser=SqlUtils.sqlToBool(c.getInt(cols.idx_is_liked));
  post.isFollowedByCurrentUser=SqlUtils.sqlToBool(c.getInt(cols.idx_is_followed));
  post.isCommentsOpen=SqlUtils.sqlToBool(c.getInt(cols.idx_is_comments_open));
  post.isRebloggedByCurrentUser=SqlUtils.sqlToBool(c.getInt(cols.idx_is_reblogged));
  post.isExternal=SqlUtils.sqlToBool(c.getInt(cols.idx_is_external));
  post.isPrivate=SqlUtils.sqlToBool(c.getInt(cols.idx_is_private));
  post.isVideoPress=SqlUtils.sqlToBool(c.getInt(cols.idx_is_videopress));
  post.setPrimaryTag(c.getString(cols.idx_primary_tag));
  post.setSecondaryTag(c.getString(cols.idx_secondary_tag));
  post.isLikesEnabled=SqlUtils.sqlToBool(c.getInt(cols.idx_is_likes_enabled));
  post.isSharingEnabled=SqlUtils.sqlToBool(c.getInt(cols.idx_is_sharing_enabled));
  post.setAttachmentsJson(c.getString(cols.idx_attachments_json));
  return post;
}
