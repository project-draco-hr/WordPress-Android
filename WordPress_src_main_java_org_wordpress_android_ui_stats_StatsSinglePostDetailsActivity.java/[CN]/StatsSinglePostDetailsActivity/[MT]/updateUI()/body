{
  final VisitModel[] dataToShowOnGraph=getDataToShowOnGraph();
  if (dataToShowOnGraph == null || dataToShowOnGraph.length == 0) {
    setupEmptyUI(false);
    return;
  }
  final String[] horLabels=new String[dataToShowOnGraph.length];
  String[] mStatsDate=new String[dataToShowOnGraph.length];
  GraphView.GraphViewData[] views=new GraphView.GraphViewData[dataToShowOnGraph.length];
  for (int i=0; i < dataToShowOnGraph.length; i++) {
    int currentItemValue=0;
    currentItemValue=dataToShowOnGraph[i].getViews();
    views[i]=new GraphView.GraphViewData(i,currentItemValue);
    String currentItemStatsDate=dataToShowOnGraph[i].getPeriod();
    horLabels[i]=StatsUtils.parseDate(currentItemStatsDate,"yyyy-MM-dd","MMM d");
    mStatsDate[i]=currentItemStatsDate;
  }
  mCurrentSeriesOnScreen=new GraphViewSeries(views);
  mCurrentSeriesOnScreen.getStyle().color=getResources().getColor(R.color.stats_bar_graph_views);
  mCurrentSeriesOnScreen.getStyle().padding=DisplayUtils.dpToPx(this,1);
  if (mGraphContainer.getChildCount() >= 1 && mGraphContainer.getChildAt(0) instanceof GraphView) {
    mGraphView=(StatsBarGraph)mGraphContainer.getChildAt(0);
  }
 else {
    mGraphContainer.removeAllViews();
    mGraphView=new StatsBarGraph(this);
    mGraphContainer.addView(mGraphView);
  }
  mGraphView.removeAllSeries();
  mGraphView.addSeries(mCurrentSeriesOnScreen);
  mGraphView.getGraphViewStyle().setNumHorizontalLabels(dataToShowOnGraph.length);
  mGraphView.setHorizontalLabels(horLabels);
  mGraphView.setGestureListener(this);
  mSelectedBarGraphIndex=(mSelectedBarGraphIndex != -1) ? mSelectedBarGraphIndex : dataToShowOnGraph.length - 1;
  mGraphView.highlightBar(mSelectedBarGraphIndex);
  mStatsDateTextView.setText(StatsUtils.parseDate(mStatsDate[mSelectedBarGraphIndex],"yyyy-MM-dd","MMM d"));
  mStatsViewsCountTextView.setText(dataToShowOnGraph[mSelectedBarGraphIndex].getViews() + "");
  if (mRestResponseParsed.getOriginalResponse() != null) {
    mWholeResponse.setText(mRestResponseParsed.getOriginalResponse().toString());
  }
  mMonthsAndYearsList.setVisibility(View.VISIBLE);
  List<PostViewsModel.Year> years=mRestResponseParsed.getYears();
  Integer[] allMonths=new Integer[years.size() * 13];
  for (int i=0; i < years.size(); i++) {
    PostViewsModel.Year currentYear=years.get(i);
    int correctPositionOfTheYearLabel=i * 13;
    allMonths[correctPositionOfTheYearLabel]=Integer.parseInt(currentYear.getLabel());
    int[] currentMonths=currentYear.getMonths();
    int startPositionForMonths=correctPositionOfTheYearLabel + 1;
    for (int j=0; j < 12; j++) {
      allMonths[startPositionForMonths + j]=currentMonths[j];
    }
  }
  StatsUIHelper.reloadLinearLayout(this,new TemporaryAdapter(this,allMonths,mRestResponseParsed.getHighestMonth()),mMonthsAndYearsList,allMonths.length);
  mAveragesList.setVisibility(View.VISIBLE);
  List<PostViewsModel.Average> averages=mRestResponseParsed.getAverages();
  Integer[] allAverages=new Integer[averages.size() * 13];
  for (int i=0; i < averages.size(); i++) {
    PostViewsModel.Average currentAverage=averages.get(i);
    int correctPositionOfTheAverageLabel=i * 13;
    allAverages[correctPositionOfTheAverageLabel]=Integer.parseInt(currentAverage.getLabel());
    int[] currentAverages=currentAverage.getMonths();
    int startPositionForAverages=correctPositionOfTheAverageLabel + 1;
    for (int j=0; j < 12; j++) {
      allAverages[startPositionForAverages + j]=currentAverages[j];
    }
  }
  StatsUIHelper.reloadLinearLayout(this,new TemporaryAdapter(this,allAverages,mRestResponseParsed.getHighestDayAverage()),mAveragesList,allAverages.length);
}
