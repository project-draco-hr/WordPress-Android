{
  this.blogID=blogID;
  this.period=response.getString("period");
  this.date=response.getString("date");
  JSONObject jDaysObject=response.getJSONObject("days");
  if (jDaysObject.length() == 0) {
    throw new JSONException("Invalid document returned from the REST API");
  }
  Iterator<String> keys=jDaysObject.keys();
  String key=keys.next();
  JSONObject firstDayObject=jDaysObject.getJSONObject(key);
  this.otherPlays=firstDayObject.getInt("other_plays");
  this.totalPlays=firstDayObject.getInt("total_plays");
  JSONArray playsJSONArray=firstDayObject.optJSONArray("plays");
  if (playsJSONArray != null) {
    mPlays=new ArrayList<TopPostModel>(playsJSONArray.length());
    for (int i=0; i < playsJSONArray.length(); i++) {
      JSONObject currentVideoplaysJSON=playsJSONArray.getJSONObject(i);
      String postId=String.valueOf(currentVideoplaysJSON.getInt("post_id"));
      String title=currentVideoplaysJSON.getString("title");
      int views=currentVideoplaysJSON.getInt("plays");
      String url=currentVideoplaysJSON.getString("url");
      TopPostModel currentPost=new TopPostModel(blogID,postId,title,views,url);
      mPlays.add(currentPost);
    }
  }
}
