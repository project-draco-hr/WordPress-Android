{
  if (context == null)   return;
  String message=null;
  boolean isInvalidTokenError=false;
  if (error.networkResponse != null && error.networkResponse.data != null) {
    AppLog.e(T.NOTIFS,String.format("Error message: %s",new String(error.networkResponse.data)));
    String jsonString=new String(error.networkResponse.data);
    try {
      JSONObject errorObj=new JSONObject(jsonString);
      message=(String)errorObj.get("message");
      String error_code=(String)errorObj.get("error");
      if (error_code != null && error_code.equals("invalid_token"))       isInvalidTokenError=true;
    }
 catch (    JSONException e) {
      AppLog.e(T.NOTIFS,e);
    }
  }
 else {
    if (error.getMessage() != null && error.getMessage().contains("Limit reached")) {
      message=context.getString(R.string.limit_reached);
    }
  }
  if (isInvalidTokenError && (context instanceof FragmentActivity)) {
    FragmentActivity activity=(FragmentActivity)context;
    FragmentTransaction ft=activity.getSupportFragmentManager().beginTransaction();
    AuthErrorDialogFragment authAlert=AuthErrorDialogFragment.newInstance(WordPress.getCurrentBlog().isDotcomFlag());
    ft.add(authAlert,"alert");
    ft.commitAllowingStateLoss();
  }
 else {
    String fallbackErrorMessage=TextUtils.isEmpty(friendlyMessage) ? context.getString(R.string.error_generic) : friendlyMessage;
    String errorMessage=TextUtils.isEmpty(message) ? fallbackErrorMessage : message;
    showToast(context,errorMessage);
  }
}
