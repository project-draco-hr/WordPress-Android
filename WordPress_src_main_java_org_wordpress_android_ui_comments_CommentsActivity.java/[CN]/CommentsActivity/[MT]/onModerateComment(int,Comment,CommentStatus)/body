{
  FragmentManager fm=getFragmentManager();
  if (fm.getBackStackEntryCount() > 0) {
    fm.popBackStack();
  }
  if (newStatus == CommentStatus.APPROVED || newStatus == CommentStatus.UNAPPROVED) {
    getListFragment().setCommentIsModerating(comment.commentID,true);
    getListFragment().updateEmptyView(EmptyViewMessageType.NO_CONTENT);
    CommentActions.moderateComment(accountId,comment,newStatus,new CommentActions.CommentActionListener(){
      @Override public void onActionResult(      boolean succeeded){
        if (isFinishing() || !hasListFragment()) {
          return;
        }
        getListFragment().setCommentIsModerating(comment.commentID,false);
        if (succeeded) {
          reloadCommentList();
        }
 else {
          getListFragment().updateEmptyView(EmptyViewMessageType.NO_CONTENT);
          ToastUtils.showToast(CommentsActivity.this,R.string.error_moderate_comment,ToastUtils.Duration.LONG);
        }
      }
    }
);
  }
 else   if (newStatus == CommentStatus.SPAM || newStatus == CommentStatus.TRASH || newStatus == CommentStatus.DELETE) {
    mTrashedComments.add(comment);
    getListFragment().removeComment(comment);
    getListFragment().setCommentIsModerating(comment.commentID,true);
    getListFragment().updateEmptyView(EmptyViewMessageType.NO_CONTENT);
    String message=(newStatus == CommentStatus.TRASH ? getString(R.string.comment_trashed) : newStatus == CommentStatus.SPAM ? getString(R.string.comment_spammed) : getString(R.string.comment_deleted_permanently));
    View.OnClickListener undoListener=new View.OnClickListener(){
      @Override public void onClick(      View v){
        mTrashedComments.remove(comment);
        getListFragment().setCommentIsModerating(comment.commentID,false);
        getListFragment().loadComments();
      }
    }
;
    Snackbar snackbar=Snackbar.make(getListFragment().getView(),message,Snackbar.LENGTH_LONG).setAction(R.string.undo,undoListener);
    snackbar.setCallback(new Snackbar.Callback(){
      @Override public void onDismissed(      Snackbar snackbar,      int event){
        super.onDismissed(snackbar,event);
        if (!mTrashedComments.contains(comment)) {
          return;
        }
        mTrashedComments.remove(comment);
        CommentActions.moderateComment(accountId,comment,newStatus,new CommentActions.CommentActionListener(){
          @Override public void onActionResult(          boolean succeeded){
            if (isFinishing() || !hasListFragment()) {
              return;
            }
            getListFragment().setCommentIsModerating(comment.commentID,false);
            if (!succeeded) {
              getListFragment().loadComments();
              ToastUtils.showToast(CommentsActivity.this,R.string.error_moderate_comment,ToastUtils.Duration.LONG);
            }
 else {
              getListFragment().updateEmptyView(EmptyViewMessageType.NO_CONTENT);
            }
          }
        }
);
      }
    }
);
    snackbar.show();
  }
}
