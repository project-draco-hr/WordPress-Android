{
  final String mediaId=cursor.getString(cursor.getColumnIndex("mediaId"));
  String state=cursor.getString(cursor.getColumnIndex("uploadState"));
  TextView stateTextView=(TextView)view.findViewById(R.id.media_grid_item_upload_state);
  if (stateTextView != null) {
    if (state != null && state.length() > 0) {
      if (state.equals("failed")) {
        state="retry";
        stateTextView.setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View v){
            mCallback.onRetryUpload(mediaId);
            notifyDataSetChanged();
          }
        }
);
      }
      stateTextView.setText(state);
      stateTextView.setVisibility(View.VISIBLE);
    }
 else {
      stateTextView.setVisibility(View.GONE);
    }
  }
  boolean isLocalFile=isLocalFile(state);
  TextView filenameView=(TextView)view.findViewById(R.id.media_grid_item_filename);
  String fileName=cursor.getString(cursor.getColumnIndex("fileName"));
  if (filenameView != null) {
    filenameView.setText("File name: " + fileName);
  }
  TextView titleView=(TextView)view.findViewById(R.id.media_grid_item_name);
  String title=cursor.getString(cursor.getColumnIndex("title"));
  if (title == null || title.equals(""))   title=fileName;
  titleView.setText(title);
  TextView uploadDateView=(TextView)view.findViewById(R.id.media_grid_item_upload_date);
  if (uploadDateView != null) {
    String date=MediaUtils.getDate(cursor.getLong(cursor.getColumnIndex("date_created_gmt")));
    uploadDateView.setText("Uploaded on: " + date);
  }
  final NetworkImageView imageView=(NetworkImageView)view.findViewById(R.id.media_grid_item_image);
  if (isLocalFile) {
    loadLocalImage(cursor,imageView);
  }
 else {
    loadNetworkImage(cursor,imageView);
  }
  String fileType=null;
  String filePath=cursor.getString(cursor.getColumnIndex("filePath"));
  if (filePath == null)   filePath=cursor.getString(cursor.getColumnIndex("fileURL"));
  fileType=filePath.replaceAll(".*\\.(\\w+)$","$1").toUpperCase();
  TextView fileTypeView=(TextView)view.findViewById(R.id.media_grid_item_filetype);
  if (Utils.isXLarge(context)) {
    fileTypeView.setText("File type: " + fileType);
  }
 else {
    fileTypeView.setText(fileType);
  }
  TextView dimensionView=(TextView)view.findViewById(R.id.media_grid_item_dimension);
  if (dimensionView != null) {
    if (MediaUtils.isValidImage(filePath)) {
      int width=cursor.getInt(cursor.getColumnIndex("width"));
      int height=cursor.getInt(cursor.getColumnIndex("height"));
      if (width > 0 && height > 0) {
        String dimensions=width + "x" + height;
        dimensionView.setText("Dimensions: " + dimensions);
        dimensionView.setVisibility(View.VISIBLE);
      }
    }
 else {
      dimensionView.setVisibility(View.GONE);
    }
  }
  CheckableFrameLayout frameLayout=(CheckableFrameLayout)view;
  frameLayout.setTag(mediaId);
  frameLayout.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CheckableFrameLayout view,    boolean isChecked){
      String mediaId=(String)view.getTag();
      if (isChecked) {
        if (!mCheckedItems.contains(mediaId)) {
          mCheckedItems.add(mediaId);
        }
      }
 else {
        mCheckedItems.remove(mediaId);
      }
    }
  }
);
  frameLayout.setChecked(mCheckedItems.contains(mediaId));
  updateGridWidth(context,view);
  int position=cursor.getPosition();
  if (cursor.getCount() - position == 25 || (position == cursor.getCount() - 1)) {
    if (mCallback != null)     mCallback.onPrefetchData(cursor.getCount());
  }
}
