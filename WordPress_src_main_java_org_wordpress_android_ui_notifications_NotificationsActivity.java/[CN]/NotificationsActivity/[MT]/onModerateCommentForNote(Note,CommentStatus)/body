{
  FragmentManager fm=getFragmentManager();
  if (fm.getBackStackEntryCount() > 0) {
    fm.popBackStack();
  }
  if (newStatus == CommentStatus.APPROVED || newStatus == CommentStatus.UNAPPROVED) {
    mNotesListFragment.setNoteIsModerating(note.getId(),true);
    CommentActions.moderateCommentForNote(note,newStatus,new CommentActions.CommentActionListener(){
      @Override public void onActionResult(      boolean succeeded){
        if (isFinishing())         return;
        mNotesListFragment.setNoteIsModerating(note.getId(),false);
        if (!succeeded) {
          ToastUtils.showToast(NotificationsActivity.this,R.string.error_moderate_comment,ToastUtils.Duration.LONG);
        }
      }
    }
);
  }
 else   if (newStatus == CommentStatus.TRASH || newStatus == CommentStatus.SPAM) {
    mNotesListFragment.setNoteIsHidden(note.getId(),true);
    new UndoBarController.UndoBar(this).message(newStatus == CommentStatus.TRASH ? R.string.comment_trashed : R.string.comment_spammed).listener(new UndoBarController.AdvancedUndoListener(){
      @Override public void onHide(      Parcelable parcelable){
        if (isFinishing())         return;
        CommentActions.moderateCommentForNote(note,newStatus,new CommentActions.CommentActionListener(){
          @Override public void onActionResult(          boolean succeeded){
            if (isFinishing())             return;
            if (!succeeded) {
              mNotesListFragment.setNoteIsHidden(note.getId(),false);
              ToastUtils.showToast(NotificationsActivity.this,R.string.error_moderate_comment,ToastUtils.Duration.LONG);
            }
          }
        }
);
      }
      @Override public void onClear(){
      }
      @Override public void onUndo(      Parcelable parcelable){
        mNotesListFragment.setNoteIsHidden(note.getId(),false);
      }
    }
).show();
  }
}
