{
  final ReaderPost post=(ReaderPost)getItem(position);
  final PostViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.reader_listitem_post_excerpt,parent,false);
    holder=new PostViewHolder(convertView,getPostListType());
    convertView.setTag(holder);
  }
 else {
    holder=(PostViewHolder)convertView.getTag();
  }
  holder.txtTitle.setText(post.getTitle());
  holder.txtDate.setText(DateTimeUtils.javaDateToTimeSpan(post.getDatePublished()));
  if (getPostListType().isTagType()) {
    holder.imgAvatar.setImageUrl(post.getPostAvatarForDisplay(mAvatarSz),WPNetworkImageView.ImageType.AVATAR);
    if (post.hasBlogName()) {
      holder.txtBlogName.setText(post.getBlogName());
    }
 else     if (post.hasAuthorName()) {
      holder.txtBlogName.setText(post.getAuthorName());
    }
 else {
      holder.txtBlogName.setText(null);
    }
    ReaderUtils.showFollowStatus(holder.txtFollow,post.isFollowedByCurrentUser);
    holder.txtFollow.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleFollow(holder,position,post);
      }
    }
);
    if (!post.isExternal) {
      holder.layoutPostHeader.setEnabled(true);
      holder.layoutPostHeader.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          ReaderActivityLauncher.showReaderBlogPreview(getContext(),post.blogId,post.getBlogUrl());
        }
      }
);
    }
 else {
      holder.layoutPostHeader.setOnClickListener(null);
      holder.layoutPostHeader.setEnabled(false);
    }
  }
  if (post.hasExcerpt()) {
    holder.txtText.setVisibility(View.VISIBLE);
    holder.txtText.setText(post.getExcerpt());
  }
 else {
    holder.txtText.setVisibility(View.GONE);
  }
  final int titleMargin;
  if (post.hasFeaturedImage()) {
    final String imageUrl=post.getFeaturedImageForDisplay(mPhotonWidth,mPhotonHeight);
    holder.imgFeatured.setImageUrl(imageUrl,WPNetworkImageView.ImageType.PHOTO);
    holder.imgFeatured.setVisibility(View.VISIBLE);
    titleMargin=mMarginLarge;
  }
 else   if (post.hasFeaturedVideo()) {
    holder.imgFeatured.setVideoUrl(post.postId,post.getFeaturedVideo());
    holder.imgFeatured.setVisibility(View.VISIBLE);
    titleMargin=mMarginLarge;
  }
 else {
    holder.imgFeatured.setVisibility(View.GONE);
    titleMargin=(holder.layoutPostHeader.getVisibility() == View.VISIBLE ? 0 : mMarginLarge);
  }
  RelativeLayout.LayoutParams params=(RelativeLayout.LayoutParams)holder.txtTitle.getLayoutParams();
  params.topMargin=titleMargin;
  final String tagToDisplay=post.getTagForDisplay(mCurrentTag);
  if (!TextUtils.isEmpty(tagToDisplay)) {
    holder.txtTag.setText(tagToDisplay);
    holder.txtTag.setVisibility(View.VISIBLE);
    holder.txtTag.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (mOnTagSelectedListener != null) {
          mOnTagSelectedListener.onTagSelected(tagToDisplay);
        }
      }
    }
);
  }
 else {
    holder.txtTag.setVisibility(View.GONE);
  }
  if (post.isWP()) {
    showLikeStatus(holder.imgBtnLike,post.isLikedByCurrentUser);
    holder.imgBtnComment.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (parent instanceof ListView) {
          ListView listView=(ListView)parent;
          int index=position + listView.getHeaderViewsCount();
          listView.performItemClick(holder.imgBtnComment,index,getItemId(position));
        }
      }
    }
);
    holder.imgBtnLike.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        toggleLike(holder,position,post);
      }
    }
);
    holder.imgBtnLike.setVisibility(View.VISIBLE);
    holder.imgBtnComment.setVisibility(View.VISIBLE);
    showCounts(holder,post,false);
  }
 else {
    holder.imgBtnLike.setVisibility(View.INVISIBLE);
    holder.imgBtnComment.setVisibility(View.INVISIBLE);
    holder.txtLikeCount.setVisibility(View.GONE);
    holder.txtCommentCount.setVisibility(View.GONE);
  }
  if (post.canReblog()) {
    showReblogStatus(holder.imgBtnReblog,post.isRebloggedByCurrentUser);
    holder.imgBtnReblog.setVisibility(View.VISIBLE);
    if (!post.isRebloggedByCurrentUser) {
      holder.imgBtnReblog.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          ReaderAnim.animateReblogButton(holder.imgBtnReblog);
          if (mReblogListener != null) {
            mReblogListener.onRequestReblog(post,v);
          }
        }
      }
);
    }
  }
 else {
    holder.imgBtnReblog.setVisibility(View.INVISIBLE);
  }
  if (mAnimateRows) {
    animateRow(convertView);
  }
  if (mCanRequestMorePosts && mDataRequestedListener != null && (position >= getCount() - 1)) {
    mDataRequestedListener.onRequestData(ReaderActions.RequestDataAction.LOAD_OLDER);
  }
  if (mEnableImagePreload && position > (mLastPreloadPos - PRELOAD_OFFSET)) {
    preloadPostImages(position + PRELOAD_OFFSET);
  }
  return convertView;
}
