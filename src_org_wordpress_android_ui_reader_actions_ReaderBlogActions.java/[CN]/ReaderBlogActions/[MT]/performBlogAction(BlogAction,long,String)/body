{
  if (TextUtils.isEmpty(blogUrl))   return false;
  final boolean isCurrentlyFollowing=ReaderBlogTable.isFollowedBlogUrl(blogUrl);
  final boolean isAskingToFollow=(action == BlogAction.FOLLOW);
  if (isCurrentlyFollowing == isAskingToFollow)   return true;
  final String path;
  final String domain=UrlUtils.getDomainFromUrl(blogUrl);
switch (action) {
case FOLLOW:
    path="/read/following/mine/new?url=" + domain;
  break;
case UNFOLLOW:
path="/read/following/mine/delete?url=" + domain;
break;
default :
return false;
}
ReaderBlogTable.setIsFollowedBlogUrl(blogUrl,isAskingToFollow);
ReaderPostTable.setFollowStatusForPostsInBlog(blogId,isAskingToFollow);
com.wordpress.rest.RestRequest.Listener listener=new RestRequest.Listener(){
@Override public void onResponse(JSONObject jsonObject){
AppLog.d(T.READER,"blog action " + action.name() + " succeeded");
}
}
;
RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
@Override public void onErrorResponse(VolleyError volleyError){
AppLog.w(T.READER,"blog action " + action.name() + " failed");
AppLog.e(T.READER,volleyError);
ReaderBlogTable.setIsFollowedBlogUrl(blogUrl,isCurrentlyFollowing);
ReaderPostTable.setFollowStatusForPostsInBlog(blogId,isCurrentlyFollowing);
}
}
;
WordPress.getRestClientUtils().post(path,listener,errorListener);
return true;
}
