{
  this.mBlogID=blogID;
  this.mPeriod=response.getString("period");
  this.mDate=response.getString("date");
  JSONObject jDaysObject=response.getJSONObject("days");
  if (jDaysObject.length() == 0) {
    throw new JSONException("Invalid document returned from the REST API");
  }
  JSONArray authorsJSONArray;
  Iterator<String> keys=jDaysObject.keys();
  String key=keys.next();
  JSONObject firstDayObject=jDaysObject.getJSONObject(key);
  this.mOtherViews=firstDayObject.optInt("other_views");
  authorsJSONArray=firstDayObject.optJSONArray("authors");
  if (authorsJSONArray != null) {
    mAuthors=new ArrayList<AuthorModel>(authorsJSONArray.length());
    for (int i=0; i < authorsJSONArray.length(); i++) {
      try {
        JSONObject currentAuthorJSON=authorsJSONArray.getJSONObject(i);
        AuthorModel currentAuthor=new AuthorModel(blogID,mDate,currentAuthorJSON);
        mAuthors.add(currentAuthor);
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,"Unexpected Author object " + "at position " + i + " Response: "+ response.toString(),e);
      }
    }
  }
}
