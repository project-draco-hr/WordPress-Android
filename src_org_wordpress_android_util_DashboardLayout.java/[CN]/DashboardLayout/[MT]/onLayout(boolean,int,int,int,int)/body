{
  int width=r - l;
  int height=b - t;
  final int count=getChildCount();
  int visibleCount=0;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() == GONE) {
      continue;
    }
    ++visibleCount;
  }
  if (visibleCount == 0) {
    return;
  }
  int bestSpaceDifference=Integer.MAX_VALUE;
  int spaceDifference;
  int hSpace=0;
  int vSpace=0;
  int cols=1;
  int rows;
  while (true) {
    rows=(visibleCount - 1) / cols + 1;
    hSpace=((width - mMaxChildWidth * cols) / (cols + 1));
    vSpace=((height - mMaxChildHeight * rows) / (rows + 1));
    spaceDifference=Math.abs(vSpace - hSpace);
    if (rows * cols != visibleCount) {
      spaceDifference*=UNEVEN_GRID_PENALTY_MULTIPLIER;
    }
    if (spaceDifference < bestSpaceDifference) {
      bestSpaceDifference=spaceDifference;
      if (rows == 1) {
        break;
      }
    }
 else {
      --cols;
      rows=(visibleCount - 1) / cols + 1;
      hSpace=((width - mMaxChildWidth * cols) / (cols + 1));
      vSpace=((height - mMaxChildHeight * rows) / (rows + 1));
      break;
    }
    ++cols;
  }
  hSpace=Math.max(0,hSpace);
  vSpace=Math.max(0,vSpace);
  width=(width - hSpace * (cols + 1)) / cols;
  height=(height - vSpace * (rows + 1)) / rows;
  int left, top;
  int col, row;
  int visibleIndex=0;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() == GONE) {
      continue;
    }
    row=visibleIndex / cols;
    col=visibleIndex % cols;
    left=hSpace * (col + 1) + width * col;
    top=vSpace * (row + 1) + height * row;
    child.layout(left,top,(hSpace == 0 && col == cols - 1) ? r : (left + width),(vSpace == 0 && row == rows - 1) ? b : (top + height));
    ++visibleIndex;
  }
}
