{
  final Set<String> urlsToTry=new LinkedHashSet<>();
  urlsToTry.add(siteUrl);
  urlsToTry.add(sanitizeSiteUrl(siteUrl,true));
  urlsToTry.add(sanitizeSiteUrl(siteUrl,false));
  AppLog.i(AppLog.T.NUX,"The app will call the RSD discovery process on the following URLs: " + urlsToTry);
  String xmlrpcUrl=null;
  for (  String currentURL : urlsToTry) {
    try {
      AppLog.i(AppLog.T.NUX,"Downloading the HTML content at the following URL: " + currentURL);
      String responseHTML=ApiHelper.getResponse(currentURL);
      if (TextUtils.isEmpty(responseHTML)) {
        AppLog.w(AppLog.T.NUX,"Content downloaded but it's empty or null. Skipping this URL");
        continue;
      }
      String rsdUrl=getRSDMetaTagHrefRegEx(responseHTML);
      if (rsdUrl == null) {
        rsdUrl=getRSDMetaTagHref(responseHTML);
      }
      rsdUrl=UrlUtils.addUrlSchemeIfNeeded(rsdUrl,false);
      if (rsdUrl == null) {
        AppLog.i(AppLog.T.NUX,"Can't find the RSD endpoint in the HTML document. Try to check the " + "pingback tag, and the apiLink tag.");
        xmlrpcUrl=UrlUtils.addUrlSchemeIfNeeded(getXMLRPCPingback(responseHTML),false);
        if (xmlrpcUrl == null) {
          xmlrpcUrl=UrlUtils.addUrlSchemeIfNeeded(getXMLRPCApiLink(responseHTML),false);
        }
      }
 else {
        AppLog.i(AppLog.T.NUX,"RSD endpoint found at the following address: " + rsdUrl);
        AppLog.i(AppLog.T.NUX,"Downloading the RSD document...");
        String rsdEndpointDocument=ApiHelper.getResponse(rsdUrl);
        if (TextUtils.isEmpty(rsdEndpointDocument)) {
          AppLog.w(AppLog.T.NUX,"Content downloaded but it's empty or null. Skipping this RSD document" + " URL.");
          continue;
        }
        AppLog.i(AppLog.T.NUX,"Extracting the XML-RPC Endpoint address from the RSD document");
        xmlrpcUrl=UrlUtils.addUrlSchemeIfNeeded(getXMLRPCApiLink(rsdEndpointDocument),false);
      }
      if (xmlrpcUrl != null) {
        AppLog.i(AppLog.T.NUX,"Found the XML-RPC endpoint in the HTML document!!!");
        break;
      }
 else {
        AppLog.i(AppLog.T.NUX,"XML-RPC endpoint NOT found");
      }
    }
 catch (    SSLHandshakeException e) {
      if (!WPUrlUtils.isWordPressCom(currentURL)) {
        throw new XMLRPCUtilsException(Kind.ERRONEOUS_SSL_CERTIFICATE,0,currentURL,null);
      }
      AppLog.w(AppLog.T.NUX,"SSLHandshakeException failed. Erroneous SSL certificate detected.");
      return null;
    }
catch (    TimeoutError|TimeoutException e) {
      AppLog.w(AppLog.T.NUX,"Timeout error while connecting to the site: " + currentURL);
      throw new XMLRPCUtilsException(Kind.SITE_TIME_OUT,org.wordpress.android.R.string.site_timeout_error,currentURL,null);
    }
  }
  if (URLUtil.isValidUrl(xmlrpcUrl)) {
    if (checkXMLRPCEndpointValidity(xmlrpcUrl,httpUsername,httpPassword)) {
      return xmlrpcUrl;
    }
  }
  throw new XMLRPCUtilsException(Kind.NO_SITE_ERROR,org.wordpress.android.R.string.no_site_error,null,null);
}
