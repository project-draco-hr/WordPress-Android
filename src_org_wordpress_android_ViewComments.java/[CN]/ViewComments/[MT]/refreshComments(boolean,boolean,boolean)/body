{
  if (!loadMore && !doInBackground) {
    showProgressBar();
  }
  client=new XMLRPCClient(blog.getUrl(),blog.getHttpuser(),blog.getHttppassword());
  HashMap hPost=new HashMap();
  hPost.put("status","");
  hPost.put("post_id","");
  if (loadMore) {
    hPost.put("offset",numRecords);
  }
  if (totalComments != 0 && ((totalComments - numRecords) < 30)) {
    commentsToLoad=totalComments - numRecords;
    hPost.put("number",commentsToLoad);
  }
 else {
    hPost.put("number",30);
  }
  XMLRPCMethod method=new XMLRPCMethod("wp.getComments",new XMLRPCMethodCallback(){
    public void callFinished(    Object[] result){
      if (result.length == 0) {
        if (pd.isShowing()) {
          pd.dismiss();
        }
      }
 else {
        origComments=result;
        String author, postID, commentID, comment, dateCreated, dateCreatedFormatted, status, authorEmail, authorURL, postTitle;
        HashMap contentHash=new HashMap();
        Vector dbVector=new Vector();
        Date d=new Date();
        SimpleDateFormat sdf=new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
        Calendar cal=Calendar.getInstance();
        TimeZone tz=cal.getTimeZone();
        String shortDisplayName="";
        shortDisplayName=tz.getDisplayName(true,TimeZone.SHORT);
        if (result.length < 30) {
          getListView().removeFooterView(switcher);
        }
        for (int ctr=0; ctr < result.length; ctr++) {
          if (loadMore) {
            checkedComments.add("false");
          }
          HashMap<String,String> dbValues=new HashMap();
          contentHash=(HashMap)result[ctr];
          allComments.put(contentHash.get("comment_id").toString(),contentHash);
          comment=contentHash.get("content").toString();
          author=contentHash.get("author").toString();
          status=contentHash.get("status").toString();
          postID=contentHash.get("post_id").toString();
          commentID=contentHash.get("comment_id").toString();
          dateCreated=contentHash.get("date_created_gmt").toString();
          authorURL=contentHash.get("author_url").toString();
          authorEmail=contentHash.get("author_email").toString();
          postTitle=contentHash.get("post_title").toString();
          String cDate=dateCreated.replace(tz.getID(),shortDisplayName);
          try {
            d=sdf.parse(cDate);
            SimpleDateFormat sdfOut=new SimpleDateFormat("MMMM dd, yyyy hh:mm a");
            dateCreatedFormatted=sdfOut.format(d);
          }
 catch (          ParseException pe) {
            pe.printStackTrace();
            dateCreatedFormatted=dateCreated;
          }
          dbValues.put("blogID",String.valueOf(id));
          dbValues.put("postID",postID);
          dbValues.put("commentID",commentID);
          dbValues.put("author",author);
          dbValues.put("comment",comment);
          dbValues.put("commentDate",dateCreated);
          dbValues.put("commentDateFormatted",dateCreatedFormatted);
          dbValues.put("status",status);
          dbValues.put("url",authorURL);
          dbValues.put("email",authorEmail);
          dbValues.put("postTitle",postTitle);
          dbVector.add(ctr,dbValues);
        }
        WordPressDB postStoreDB=new WordPressDB(ViewComments.this);
        postStoreDB.saveComments(ViewComments.this,dbVector,loadMore);
        if (!doInBackground) {
          loadComments(loadMore,refreshOnly);
        }
        if (pd.isShowing()) {
          pd.dismiss();
        }
      }
      if (!loadMore && !doInBackground) {
        closeProgressBar();
      }
 else       if (loadMore) {
        switcher.showPrevious();
      }
    }
  }
);
  Object[] params={blog.getBlogId(),blog.getUsername(),blog.getPassword(),hPost};
  method.call(params);
}
