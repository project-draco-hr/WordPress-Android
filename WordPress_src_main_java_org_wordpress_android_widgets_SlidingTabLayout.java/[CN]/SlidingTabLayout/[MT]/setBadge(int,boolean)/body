{
  final View badgeView=mTabStrip.findViewWithTag(makeBadgeTag(position));
  if (badgeView == null) {
    return;
  }
  boolean wasBadged=(badgeView.getVisibility() == View.VISIBLE);
  if (isBadged == wasBadged) {
    return;
  }
  long duration=getContext().getResources().getInteger(android.R.integer.config_shortAnimTime);
  float start=isBadged ? 0f : 1f;
  float end=isBadged ? 1.5f : 0f;
  PropertyValuesHolder scaleX=PropertyValuesHolder.ofFloat(View.SCALE_X,start,end);
  PropertyValuesHolder scaleY=PropertyValuesHolder.ofFloat(View.SCALE_Y,start,end);
  ObjectAnimator animScale=ObjectAnimator.ofPropertyValuesHolder(badgeView,scaleX,scaleY);
  animScale.setDuration(duration);
  if (isBadged) {
    animScale.setInterpolator(new LinearInterpolator());
  }
 else {
    animScale.setInterpolator(new AccelerateInterpolator());
  }
  animScale.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationStart(    Animator animation){
      if (isBadged) {
        badgeView.setVisibility(View.VISIBLE);
      }
    }
    @Override public void onAnimationEnd(    Animator animation){
      if (!isBadged) {
        badgeView.setVisibility(View.GONE);
      }
    }
  }
);
  AnimatorSet set=new AnimatorSet();
  if (isBadged) {
    PropertyValuesHolder shrinkX=PropertyValuesHolder.ofFloat(View.SCALE_X,end,1f);
    PropertyValuesHolder shrinkY=PropertyValuesHolder.ofFloat(View.SCALE_Y,end,1f);
    ObjectAnimator animShrink=ObjectAnimator.ofPropertyValuesHolder(badgeView,shrinkX,shrinkY);
    animShrink.setInterpolator(new BounceInterpolator());
    animShrink.setDuration(duration);
    set.play(animScale).before(animShrink);
  }
 else {
    set.play(animScale);
  }
  set.start();
}
