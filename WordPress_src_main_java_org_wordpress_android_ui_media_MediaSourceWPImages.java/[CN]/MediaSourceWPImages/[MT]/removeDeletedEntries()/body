{
  final List<MediaItem> existingItems=new ArrayList<>(mMediaItems);
  final List<MediaItem> failedItems=new ArrayList<>();
  for (  final MediaItem mediaItem : existingItems) {
    LimitedBackgroundOperation<MediaItem,Void,MediaItem> backgroundCheck=new LimitedBackgroundOperation<MediaItem,Void,MediaItem>(){
      private int responseCode;
      @Override protected MediaItem performBackgroundOperation(      MediaItem[] params){
        MediaItem mediaItem=params[0];
        try {
          URL mediaUrl=new URL(mediaItem.getSource().toString());
          HttpURLConnection connection=(HttpURLConnection)mediaUrl.openConnection();
          connection.setRequestMethod("GET");
          connection.connect();
          responseCode=connection.getResponseCode();
        }
 catch (        IOException ioException) {
          Log.e("","Error reading from " + mediaItem.getSource() + "\nexception:"+ ioException);
          return null;
        }
        return mediaItem;
      }
      @Override public void performPostExecute(      MediaItem result){
        if (mListener != null && result != null) {
          if (responseCode == 200) {
            mVerifiedItems.add(result);
            List<MediaItem> resultList=new ArrayList<>();
            resultList.add(result);
            if ((existingItems.size() - mVerifiedItems.size()) % 3 == 0) {
              mListener.onMediaAdded(MediaSourceWPImages.this,resultList);
            }
          }
 else {
            failedItems.add(result);
          }
          if ((failedItems.size() + mVerifiedItems.size()) == existingItems.size()) {
            mListener.onMediaLoaded(true);
          }
        }
      }
      @Override public void startExecution(      Object params){
        if (!(params instanceof MediaItem)) {
          throw new IllegalArgumentException("Params must be of type MediaItem");
        }
        executeOnExecutor(THREAD_POOL_EXECUTOR,(MediaItem)params);
      }
    }
;
    backgroundCheck.executeWithLimit(mediaItem);
  }
}
