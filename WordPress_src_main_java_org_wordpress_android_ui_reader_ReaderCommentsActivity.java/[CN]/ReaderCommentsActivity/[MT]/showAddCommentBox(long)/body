{
  if (isFinishing() || mIsSubmittingComment) {
    return;
  }
  final EditText editComment=(EditText)mLayoutCommentBox.findViewById(R.id.edit_comment);
  editComment.setHint(replyToCommentId == 0 ? R.string.reader_hint_comment_on_post : R.string.reader_hint_comment_on_comment);
  if (mLayoutCommentBox.getVisibility() != View.VISIBLE) {
    AniUtils.flyIn(mLayoutCommentBox);
  }
  editComment.requestFocus();
  editComment.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView v,    int actionId,    KeyEvent event){
      if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_ACTION_SEND) {
        submitComment(replyToCommentId);
      }
      return false;
    }
  }
);
  EditTextUtils.showSoftInput(editComment);
  if (replyToCommentId != 0) {
    getCommentAdapter().setHighlightCommentId(replyToCommentId,false);
    mListView.postDelayed(new Runnable(){
      @Override public void run(){
        scrollToCommentId(replyToCommentId);
      }
    }
,300);
  }
  mReplyToCommentId=replyToCommentId;
}
