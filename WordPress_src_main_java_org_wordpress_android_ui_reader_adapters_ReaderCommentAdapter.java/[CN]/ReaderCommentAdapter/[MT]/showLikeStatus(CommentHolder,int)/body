{
  if (!isValidPosition(position)) {
    return;
  }
  final ReaderComment comment=mComments.get(position);
  if (mPost.isLikesEnabled) {
    holder.layoutLikes.setVisibility(View.VISIBLE);
    holder.imgLike.setSelected(comment.isLikedByCurrentUser);
    holder.txtLike.setText(ReaderUtils.getShortLikeLabelText(holder.txtLike.getContext(),comment.numLikes));
    if (comment.numLikes == 0) {
      holder.txtLike.setTextColor(mLinkColor);
      holder.txtLikeCount.setVisibility(View.GONE);
    }
 else {
      holder.txtLike.setTextColor(mNoLinkColor);
      holder.txtLikeCount.setSelected(comment.isLikedByCurrentUser);
      holder.txtLikeCount.setVisibility(View.VISIBLE);
    }
    if (mIsLoggedOutReader) {
      holder.imgLike.setEnabled(false);
      holder.txtLike.setEnabled(false);
      holder.txtLikeCount.setEnabled(false);
    }
 else {
      holder.layoutLikes.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          toggleLike(v.getContext(),holder,position);
        }
      }
);
    }
    holder.txtLikeCount.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        ReaderActivityLauncher.showReaderLikingUsers(v.getContext(),comment);
      }
    }
);
  }
 else {
    holder.layoutLikes.setVisibility(View.GONE);
    holder.layoutLikes.setOnClickListener(null);
  }
}
