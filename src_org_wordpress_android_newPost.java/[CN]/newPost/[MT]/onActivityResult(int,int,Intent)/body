{
  super.onActivityResult(requestCode,resultCode,data);
  if (data != null) {
    Bundle extras=data.getExtras();
switch (requestCode) {
case 0:
      String title=extras.getString("returnStatus");
    break;
case 1:
  Uri imagePath=data.getData();
String imgPath2=imagePath.getEncodedPath();
selectedImageIDs.add(selectedImageCtr,imagePath);
imageUrl.add(selectedImageCtr,imgPath2);
selectedImageCtr++;
GridView gridview=(GridView)findViewById(R.id.gridView);
gridview.setAdapter(new ImageAdapter(this));
break;
case 2:
String linkText=extras.getString("linkText");
if (linkText.equals("http://") != true) {
if (linkText.equals("CANCEL") != true) {
TextView contentText=(TextView)findViewById(R.id.content);
int selectionStart=contentText.getSelectionStart();
int selectionEnd=contentText.getSelectionEnd();
if (selectionStart > selectionEnd) {
int temp=selectionEnd;
selectionEnd=selectionStart;
selectionStart=temp;
}
String textToLink=contentText.getText().toString().substring(selectionStart,selectionEnd);
textToLink="<a href=\"" + linkText + "\">"+ textToLink+ "</a>";
String firstHalf=contentText.getText().toString().substring(0,selectionStart);
String lastHalf=contentText.getText().toString().substring(selectionEnd,contentText.getText().toString().length());
contentText.setText(firstHalf + textToLink + lastHalf);
Editable etext=(Editable)contentText.getText();
Selection.setSelection(etext,selectionStart + textToLink.length());
}
}
break;
case 3:
String saveName=extras.getString("saveName");
if (saveName.equals("CANCEL") != true && saveName.equals("") != true && saveName.equals(null) != true) {
EditText titleET=(EditText)findViewById(R.id.title);
String postTitle=titleET.getText().toString();
EditText contentET=(EditText)findViewById(R.id.content);
String postContent=contentET.getText().toString();
TextView categoriesTV=(TextView)findViewById(R.id.selectedCategories);
String categoriesValue=categoriesTV.getText().toString();
CheckBox publishCB=(CheckBox)findViewById(R.id.publish);
boolean publish=publishCB.isChecked();
savedPostsDB postsDB=new savedPostsDB(newPost.this);
boolean savePostResult=postsDB.savePost(this,saveName,id,postTitle,postContent,categoriesValue,publish);
if (savePostResult == false) {
AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(newPost.this);
dialogBuilder.setTitle("Post Not Saved");
dialogBuilder.setMessage("Duplicate post save names were found. Please save your posts with unique names.");
dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int whichButton){
}
}
);
dialogBuilder.setCancelable(true);
dialogBuilder.create().show();
}
}
break;
case 4:
String selectedPostID=extras.getString("selectedSaveName");
if (selectedPostID.equals("noPostsFound") != true && selectedPostID.equals("CANCEL") != true) {
savedPostsDB postsDB2=new savedPostsDB(newPost.this);
Vector postFields=postsDB2.loadPost(this,selectedPostID,id);
EditText titleET=(EditText)findViewById(R.id.title);
EditText contentET=(EditText)findViewById(R.id.content);
TextView categoriesTV=(TextView)findViewById(R.id.selectedCategories);
CheckBox publishCB=(CheckBox)findViewById(R.id.publish);
titleET.setText(postFields.get(0).toString());
contentET.setText(postFields.get(1).toString());
if (postFields.get(2) != null) {
categoriesTV.setText(postFields.get(2).toString());
}
 else {
categoriesTV.setText("Selected categories: ");
}
boolean publish=false;
if (postFields.get(3) != null) {
if (postFields.get(3).equals("1")) {
publish=true;
}
}
publishCB.setChecked(publish);
selectedImageIDs.clear();
}
 else if (selectedPostID.equals("CANCEL")) {
}
 else {
AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(newPost.this);
dialogBuilder.setTitle("No Posts Found");
dialogBuilder.setMessage("No saved posts were found.");
dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int whichButton){
}
}
);
dialogBuilder.setCancelable(true);
dialogBuilder.create().show();
}
break;
}
}
}
