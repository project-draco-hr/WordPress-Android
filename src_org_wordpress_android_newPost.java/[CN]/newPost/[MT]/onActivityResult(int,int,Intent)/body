{
  super.onActivityResult(requestCode,resultCode,data);
  if (data != null || requestCode == 4) {
    Bundle extras;
    GridView gridview=(GridView)findViewById(R.id.gridView);
    Button clearMedia=(Button)findViewById(R.id.clearPicture);
switch (requestCode) {
case 0:
      extras=data.getExtras();
    String title=extras.getString("returnStatus");
  break;
case 1:
break;
case 2:
extras=data.getExtras();
String linkText=extras.getString("linkText");
if (linkText.equals("http://") != true) {
if (linkText.equals("CANCEL") != true) {
TextView contentText=(TextView)findViewById(R.id.content);
int selectionStart=contentText.getSelectionStart();
int selectionEnd=contentText.getSelectionEnd();
if (selectionStart > selectionEnd) {
int temp=selectionEnd;
selectionEnd=selectionStart;
selectionStart=temp;
}
String textToLink=contentText.getText().toString().substring(selectionStart,selectionEnd);
textToLink="<a href=\"" + linkText + "\">"+ textToLink+ "</a>";
String firstHalf=contentText.getText().toString().substring(0,selectionStart);
String lastHalf=contentText.getText().toString().substring(selectionEnd,contentText.getText().toString().length());
contentText.setText(firstHalf + textToLink + lastHalf);
Editable etext=(Editable)contentText.getText();
Selection.setSelection(etext,selectionStart + textToLink.length());
}
}
break;
case 3:
Uri imageUri=data.getData();
String imgPath=imageUri.getEncodedPath();
selectedImageIDs.add(selectedImageCtr,imageUri);
imageUrl.add(selectedImageCtr,imgPath);
selectedImageCtr++;
gridview.setVisibility(View.VISIBLE);
gridview.setAdapter(new ImageAdapter(this));
clearMedia.setVisibility(View.VISIBLE);
break;
case 4:
if (resultCode == Activity.RESULT_OK) {
File f=null;
if (data != null && (android.os.Build.VERSION.SDK_INT <= android.os.Build.VERSION_CODES.DONUT)) {
try {
String[] projection;
Uri imagePath=data.getData();
projection=new String[]{Images.Media._ID,Images.Media.DATA,Images.Media.MIME_TYPE,Images.Media.ORIENTATION};
Cursor cur=this.managedQuery(imagePath,projection,null,null,null);
String thumbData="";
if (cur.moveToFirst()) {
int nameColumn, dataColumn, heightColumn, widthColumn, mimeTypeColumn, orientationColumn;
nameColumn=cur.getColumnIndex(Images.Media._ID);
dataColumn=cur.getColumnIndex(Images.Media.DATA);
thumbData=cur.getString(dataColumn);
f=new File(thumbData);
}
}
 catch (Exception e) {
AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(newPost.this);
dialogBuilder.setTitle(getResources().getText(R.string.error));
dialogBuilder.setMessage(e.getMessage());
dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int whichButton){
}
}
);
dialogBuilder.setCancelable(true);
dialogBuilder.create().show();
}
}
 else {
f=new File(SD_CARD_TEMP_DIR);
}
try {
Uri capturedImage=Uri.parse(android.provider.MediaStore.Images.Media.insertImage(getContentResolver(),f.getAbsolutePath(),null,null));
Log.i("camera","Selected image: " + capturedImage.toString());
f.delete();
Bundle bundle=new Bundle();
bundle.putString("imageURI",capturedImage.toString());
selectedImageIDs.add(selectedImageCtr,capturedImage);
imageUrl.add(selectedImageCtr,capturedImage.toString());
selectedImageCtr++;
gridview.setVisibility(View.VISIBLE);
gridview.setAdapter(new ImageAdapter(this));
clearMedia.setVisibility(View.VISIBLE);
}
 catch (FileNotFoundException e) {
AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(newPost.this);
dialogBuilder.setTitle(getResources().getText(R.string.file_error));
dialogBuilder.setMessage(getResources().getText(R.string.file_error_encountered));
dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int whichButton){
}
}
);
dialogBuilder.setCancelable(true);
dialogBuilder.create().show();
}
}
 else {
AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(newPost.this);
dialogBuilder.setTitle(getResources().getText(R.string.file_error));
dialogBuilder.setMessage(getResources().getText(R.string.file_error_encountered));
dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int whichButton){
}
}
);
dialogBuilder.setCancelable(true);
dialogBuilder.create().show();
}
break;
case 5:
if (resultCode == RESULT_OK) {
extras=data.getExtras();
String cats=extras.getString("selectedCategories");
long[] checkedCats=extras.getLongArray("checkedItems");
selectedCategories=cats;
checkedCategories=checkedCats;
TextView selectedCategoriesTV=(TextView)findViewById(R.id.selectedCategories);
selectedCategoriesTV.setText(getResources().getText(R.string.selected_categories) + " " + cats);
}
break;
case 6:
Uri videoUri=data.getData();
String videoPath=videoUri.getEncodedPath();
selectedImageIDs.add(selectedImageCtr,videoUri);
imageUrl.add(selectedImageCtr,videoPath);
selectedImageCtr++;
gridview.setVisibility(View.VISIBLE);
gridview.setAdapter(new ImageAdapter(this));
clearMedia.setVisibility(View.VISIBLE);
break;
case 7:
if (resultCode == Activity.RESULT_OK) {
Uri capturedVideo=data.getData();
selectedImageIDs.add(selectedImageCtr,capturedVideo);
imageUrl.add(selectedImageCtr,capturedVideo.toString());
selectedImageCtr++;
gridview.setVisibility(View.VISIBLE);
gridview.setAdapter(new ImageAdapter(this));
clearMedia.setVisibility(View.VISIBLE);
}
 else {
AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(newPost.this);
dialogBuilder.setTitle(getResources().getText(R.string.file_error));
dialogBuilder.setMessage(getResources().getText(R.string.file_error_encountered));
dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int whichButton){
}
}
);
dialogBuilder.setCancelable(true);
dialogBuilder.create().show();
}
break;
}
}
}
