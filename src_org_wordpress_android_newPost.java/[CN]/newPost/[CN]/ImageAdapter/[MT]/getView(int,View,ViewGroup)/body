{
  ImageView imageView;
  if (convertView == null) {
    imageView=new ImageView(mContext);
    imageView.setLayoutParams(new GridView.LayoutParams(130,130));
    imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
    imageView.setPadding(8,8,8,8);
  }
 else {
    imageView=(ImageView)convertView;
  }
  Uri tempURI=(Uri)selectedImageIDs.get(position);
  if (!tempURI.toString().contains("video")) {
    String[] projection=new String[]{Images.Thumbnails._ID,Images.Thumbnails.DATA,Images.Media.ORIENTATION};
    String orientation="";
    Cursor cur=managedQuery(tempURI,projection,null,null,null);
    File jpeg=null;
    if (cur != null) {
      String thumbData="";
      if (cur.moveToFirst()) {
        int nameColumn, dataColumn, orientationColumn;
        nameColumn=cur.getColumnIndex(Images.Media._ID);
        dataColumn=cur.getColumnIndex(Images.Media.DATA);
        orientationColumn=cur.getColumnIndex(Images.Media.ORIENTATION);
        thumbData=cur.getString(dataColumn);
        orientation=cur.getString(orientationColumn);
      }
      jpeg=new File(thumbData);
    }
 else {
      jpeg=new File(tempURI.toString().replace("file://",""));
    }
    imageTitle=jpeg.getName();
    byte[] bytes=new byte[(int)jpeg.length()];
    DataInputStream in=null;
    try {
      in=new DataInputStream(new FileInputStream(jpeg));
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
    try {
      in.readFully(bytes);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    try {
      in.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    BitmapFactory.Options opts=new BitmapFactory.Options();
    opts.inJustDecodeBounds=true;
    Bitmap bm=BitmapFactory.decodeByteArray(bytes,0,bytes.length,opts);
    int width=opts.outHeight;
    int height=opts.outWidth;
    float percentage=(float)100 / width;
    float proportionateHeight=height * percentage;
    int finalHeight=(int)Math.rint(proportionateHeight);
    float scaleWidth=((float)100) / width;
    float scaleHeight=((float)finalHeight) / height;
    float finWidth=200;
    int sample=0;
    float fWidth=width;
    sample=new Double(Math.ceil(fWidth / finWidth)).intValue();
    if (sample == 3) {
      sample=4;
    }
 else     if (sample > 4 && sample < 8) {
      sample=8;
    }
    opts.inSampleSize=sample;
    opts.inJustDecodeBounds=false;
    Bitmap resizedBitmap=BitmapFactory.decodeByteArray(bytes,0,bytes.length,opts);
    if ((orientation != null) && (orientation.equals("90") || orientation.equals("180") || orientation.equals("270"))) {
      Matrix matrix=new Matrix();
      matrix.postRotate(Integer.valueOf(orientation));
      Bitmap rotatedBitmap=Bitmap.createBitmap(resizedBitmap,0,0,resizedBitmap.getWidth(),resizedBitmap.getHeight(),matrix,true);
      imageView.setImageBitmap(rotatedBitmap);
    }
 else {
      imageView.setImageBitmap(resizedBitmap);
    }
  }
 else {
    imageView.setImageDrawable(getResources().getDrawable(R.drawable.video));
  }
  return imageView;
}
