{
  if (cursor.isClosed())   return;
  Bucket.ObjectCursor<Note> objectCursor=(Bucket.ObjectCursor<Note>)cursor;
  NoteViewHolder noteViewHolder=(NoteViewHolder)view.getTag();
  Note.NoteTimeGroup timeGroup=Note.getTimeGroupForTimestamp(getLongForColumnName(objectCursor,Note.Schema.TIMESTAMP_INDEX));
  Note.NoteTimeGroup previousTimeGroup=null;
  if (objectCursor.getPosition() > 0 && objectCursor.moveToPrevious()) {
    previousTimeGroup=Note.getTimeGroupForTimestamp(getLongForColumnName(objectCursor,Note.Schema.TIMESTAMP_INDEX));
    objectCursor.moveToNext();
  }
  if (previousTimeGroup != null && previousTimeGroup == timeGroup) {
    noteViewHolder.headerView.setVisibility(View.GONE);
  }
 else {
    if (timeGroup == Note.NoteTimeGroup.GROUP_TODAY) {
      noteViewHolder.headerText.setText(context.getString(R.string.stats_timeframe_today).toUpperCase());
    }
 else     if (timeGroup == Note.NoteTimeGroup.GROUP_YESTERDAY) {
      noteViewHolder.headerText.setText(context.getString(R.string.stats_timeframe_yesterday).toUpperCase());
    }
 else     if (timeGroup == Note.NoteTimeGroup.GROUP_OLDER_TWO_DAYS) {
      noteViewHolder.headerText.setText(context.getString(R.string.older_two_days).toUpperCase());
    }
 else     if (timeGroup == Note.NoteTimeGroup.GROUP_OLDER_WEEK) {
      noteViewHolder.headerText.setText(context.getString(R.string.older_last_week).toUpperCase());
    }
 else {
      noteViewHolder.headerText.setText(context.getString(R.string.older_month).toUpperCase());
    }
    noteViewHolder.headerView.setVisibility(View.VISIBLE);
  }
  String noteSubjectHtml=getStringForColumnName(objectCursor,Note.Schema.SUBJECT_INDEX).trim();
  CharSequence noteSubjectSpanned=Html.fromHtml(noteSubjectHtml);
  noteSubjectSpanned=noteSubjectSpanned.subSequence(0,TextUtils.getTrimmedLength(noteSubjectSpanned));
  noteViewHolder.txtLabel.setText(noteSubjectSpanned);
  String noteSnippet=getStringForColumnName(objectCursor,Note.Schema.SNIPPET_INDEX);
  if (!TextUtils.isEmpty(noteSnippet)) {
    noteViewHolder.txtLabel.setMaxLines(2);
    noteViewHolder.txtDetail.setText(noteSnippet);
    noteViewHolder.txtDetail.setVisibility(View.VISIBLE);
  }
 else {
    noteViewHolder.txtLabel.setMaxLines(3);
    noteViewHolder.txtDetail.setVisibility(View.GONE);
  }
  String avatarUrl=PhotonUtils.fixAvatar(getStringForColumnName(objectCursor,Note.Schema.ICON_URL_INDEX),mAvatarSz);
  noteViewHolder.imgAvatar.setImageUrl(avatarUrl,WPNetworkImageView.ImageType.AVATAR);
  boolean isUnread=SqlUtils.sqlToBool(getIntForColumnName(objectCursor,Note.Schema.UNREAD_INDEX));
  String noticonCharacter=getStringForColumnName(objectCursor,Note.Schema.NOTICON_INDEX);
  if (!TextUtils.isEmpty(noticonCharacter)) {
    noteViewHolder.noteIcon.setText(noticonCharacter);
    if (isUnread) {
      noteViewHolder.noteIcon.setBackgroundResource(R.drawable.shape_oval_blue);
    }
 else {
      noteViewHolder.noteIcon.setBackgroundResource(R.drawable.shape_oval_grey);
    }
    noteViewHolder.noteIcon.setVisibility(View.VISIBLE);
  }
 else {
    noteViewHolder.noteIcon.setVisibility(View.GONE);
  }
  if (isUnread) {
    view.setBackgroundResource(mUnreadBackgroundResId);
  }
 else {
    view.setBackgroundResource(mReadBackgroundResId);
  }
}
