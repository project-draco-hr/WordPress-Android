{
  if (!isAdded())   return;
  if (newStatus == CommentStatus.APPROVED || newStatus == CommentStatus.UNAPPROVED) {
    note.setLocalStatus(CommentStatus.toRESTString(newStatus));
    note.save();
    setNoteIsModerating(note.getId(),true);
    CommentActions.moderateCommentForNote(note,newStatus,new CommentActions.CommentActionListener(){
      @Override public void onActionResult(      boolean succeeded){
        if (!isAdded())         return;
        setNoteIsModerating(note.getId(),false);
        if (!succeeded) {
          note.setLocalStatus(null);
          note.save();
          ToastUtils.showToast(getActivity(),R.string.error_moderate_comment,ToastUtils.Duration.LONG);
        }
      }
    }
);
  }
 else   if (newStatus == CommentStatus.TRASH || newStatus == CommentStatus.SPAM) {
    setNoteIsHidden(note.getId(),true);
    new UndoBarController.UndoBar(getActivity()).message(newStatus == CommentStatus.TRASH ? R.string.comment_trashed : R.string.comment_spammed).listener(new UndoBarController.AdvancedUndoListener(){
      @Override public void onHide(      Parcelable parcelable){
        CommentActions.moderateCommentForNote(note,newStatus,new CommentActions.CommentActionListener(){
          @Override public void onActionResult(          boolean succeeded){
            if (!isAdded())             return;
            if (!succeeded) {
              setNoteIsHidden(note.getId(),false);
              ToastUtils.showToast(getActivity(),R.string.error_moderate_comment,ToastUtils.Duration.LONG);
            }
          }
        }
);
      }
      @Override public void onClear(      @Nonnull Parcelable[] token){
      }
      @Override public void onUndo(      Parcelable parcelable){
        setNoteIsHidden(note.getId(),false);
      }
    }
).show();
  }
}
