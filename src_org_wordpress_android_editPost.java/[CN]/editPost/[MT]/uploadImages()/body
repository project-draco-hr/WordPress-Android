{
  String content="";
  String finalThumbnailUrl=null;
  String finalImageUrl=null;
  WordPressDB settingsDB=new WordPressDB(this);
  Vector<?> categoriesVector=settingsDB.loadSettings(this,id);
  String sURL="";
  if (categoriesVector.get(0).toString().contains("xmlrpc.php")) {
    sURL=categoriesVector.get(0).toString();
  }
 else {
    sURL=categoriesVector.get(0).toString() + "xmlrpc.php";
  }
  String sUsername=categoriesVector.get(2).toString();
  String sPassword=categoriesVector.get(3).toString();
  String sImagePlacement=categoriesVector.get(4).toString();
  String sCenterThumbnailString=categoriesVector.get(5).toString();
  String sFullSizeImageString=categoriesVector.get(6).toString();
  boolean sFullSizeImage=false;
  if (sFullSizeImageString.equals("1")) {
    sFullSizeImage=true;
  }
  boolean centerThumbnail=false;
  if (sCenterThumbnailString.equals("1")) {
    centerThumbnail=true;
  }
  String sMaxImageWidth=categoriesVector.get(7).toString();
  for (int it=0; it < selectedImageCtr; it++) {
    final int printCtr=it;
    Thread prompt=new Thread(){
      public void run(){
        postingDialog.setMessage("Uploading Media File #" + String.valueOf(printCtr + 1));
        postingDialog.setProgress(postingDialog.getProgress() + (100 / (selectedImageCtr + 1)));
      }
    }
;
    this.runOnUiThread(prompt);
    if (imageUrl.get(it) != null) {
      client=new XMLRPCClient(sURL);
      String curImagePath="";
      curImagePath=imageUrl.get(it).toString();
      boolean video=false;
      if (curImagePath.contains("video")) {
        video=true;
      }
      if (video) {
        Uri videoUri=Uri.parse(curImagePath);
        File fVideo=null;
        String mimeType="";
        MediaFile mf=null;
        if (videoUri.toString().contains("content:")) {
          String[] projection;
          Uri imgPath;
          projection=new String[]{Video.Media._ID,Video.Media.DATA,Video.Media.MIME_TYPE};
          imgPath=videoUri;
          Cursor cur=this.managedQuery(imgPath,projection,null,null,null);
          String thumbData="";
          if (cur.moveToFirst()) {
            int dataColumn, mimeTypeColumn;
            dataColumn=cur.getColumnIndex(Video.Media.DATA);
            mimeTypeColumn=cur.getColumnIndex(Video.Media.MIME_TYPE);
            mf=new MediaFile();
            thumbData=cur.getString(dataColumn);
            mimeType=cur.getString(mimeTypeColumn);
            fVideo=new File(thumbData);
            mf.setFilePath(fVideo.getPath());
          }
        }
 else {
          fVideo=new File(videoUri.toString().replace("file://",""));
        }
        imageTitle=fVideo.getName();
        Map<String,Object> m=new HashMap<String,Object>();
        m.put("name",imageTitle);
        m.put("type",mimeType);
        m.put("bits",mf);
        m.put("overwrite",true);
        Object[] params={1,sUsername,sPassword,m};
        Object result=null;
        try {
          result=(Object)client.call("wp.uploadFile",params);
        }
 catch (        XMLRPCException e) {
          mediaErrorMsg=e.getMessage();
          xmlrpcError=true;
          break;
        }
        HashMap<Object,Object> contentHash=(HashMap<Object,Object>)result;
        String resultURL=contentHash.get("url").toString();
        if (contentHash.containsKey("videopress_shortcode")) {
          resultURL=contentHash.get("videopress_shortcode").toString() + "<br />";
        }
 else {
          resultURL="<a type=\"" + mimeType + "\" href=\""+ resultURL+ "\">View Video</a><br />";
        }
        content=content + resultURL;
      }
 else {
        for (int i=0; i < 2; i++) {
          curImagePath=imageUrl.get(it).toString();
          if (i == 0 || sFullSizeImage) {
            Uri imageUri=Uri.parse(curImagePath);
            File jpeg=null;
            String mimeType="", orientation="";
            MediaFile mf=null;
            if (imageUri.toString().contains("content:")) {
              String[] projection;
              Uri imgPath;
              projection=new String[]{Images.Media._ID,Images.Media.DATA,Images.Media.MIME_TYPE,Images.Media.ORIENTATION};
              imgPath=imageUri;
              Cursor cur=this.managedQuery(imgPath,projection,null,null,null);
              String thumbData="";
              if (cur.moveToFirst()) {
                int dataColumn, mimeTypeColumn, orientationColumn;
                dataColumn=cur.getColumnIndex(Images.Media.DATA);
                mimeTypeColumn=cur.getColumnIndex(Images.Media.MIME_TYPE);
                orientationColumn=cur.getColumnIndex(Images.Media.ORIENTATION);
                mf=new MediaFile();
                orientation=cur.getString(orientationColumn);
                thumbData=cur.getString(dataColumn);
                mimeType=cur.getString(mimeTypeColumn);
                jpeg=new File(thumbData);
                mf.setFilePath(jpeg.getPath());
              }
            }
 else {
              String path=imageUri.toString().replace("file://","");
              jpeg=new File(path);
              mf=new MediaFile();
              mf.setFilePath(path);
            }
            imageTitle=jpeg.getName();
            byte[] finalBytes=null;
            if (i == 0) {
              byte[] bytes=new byte[(int)jpeg.length()];
              DataInputStream in=null;
              try {
                in=new DataInputStream(new FileInputStream(jpeg));
              }
 catch (              FileNotFoundException e) {
                e.printStackTrace();
              }
              try {
                in.readFully(bytes);
              }
 catch (              IOException e) {
                e.printStackTrace();
              }
              try {
                in.close();
              }
 catch (              IOException e) {
                e.printStackTrace();
              }
              imageHelper ih=imageHelper.getInstance();
              finalBytes=ih.createThumbnail(bytes,sMaxImageWidth,orientation,false);
            }
            Map<String,Object> m=new HashMap<String,Object>();
            m.put("name",imageTitle);
            m.put("type",mimeType);
            if (i == 0) {
              m.put("bits",finalBytes);
            }
 else {
              m.put("bits",mf);
            }
            m.put("overwrite",true);
            Object[] params={1,sUsername,sPassword,m};
            Object result=null;
            try {
              result=(Object)client.call("wp.uploadFile",params);
            }
 catch (            XMLRPCException e) {
              e.printStackTrace();
              e.getMessage();
              xmlrpcError=true;
              break;
            }
            HashMap contentHash=new HashMap();
            contentHash=(HashMap)result;
            String resultURL=contentHash.get("url").toString();
            if (i == 0) {
              finalThumbnailUrl=resultURL;
            }
 else {
              if (sFullSizeImage) {
                finalImageUrl=resultURL;
              }
 else {
                finalImageUrl="";
              }
            }
            String centerCSS=" ";
            if (centerThumbnail) {
              centerCSS="style=\"display:block;margin-right:auto;margin-left:auto;\" ";
            }
            if (i != 0 && sFullSizeImage) {
              if (resultURL != null) {
                if (sImagePlacement.equals("Above Text")) {
                  content=content + "<a alt=\"image\" href=\"" + finalImageUrl+ "\"><img "+ centerCSS+ "alt=\"image\" src=\""+ finalThumbnailUrl+ "\" /></a><br /><br />";
                }
 else {
                  content=content + "<br /><a alt=\"image\" href=\"" + finalImageUrl+ "\"><img "+ centerCSS+ "alt=\"image\" src=\""+ finalThumbnailUrl+ "\" /></a>";
                }
              }
            }
 else {
              if (i == 0 && sFullSizeImage == false && resultURL != null) {
                if (sImagePlacement.equals("Above Text")) {
                  content=content + "<img " + centerCSS+ "alt=\"image\" src=\""+ finalThumbnailUrl+ "\" /><br /><br />";
                }
 else {
                  content=content + "<br /><img " + centerCSS+ "alt=\"image\" src=\""+ finalThumbnailUrl+ "\" />";
                }
              }
            }
          }
        }
      }
    }
  }
  return content;
}
