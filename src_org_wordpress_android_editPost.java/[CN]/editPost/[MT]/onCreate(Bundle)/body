{
  super.onCreate(icicle);
  setContentView(R.layout.edit);
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    id=extras.getString("id");
    accountName=escapeUtils.unescapeHtml(extras.getString("accountName"));
    postID=extras.getString("postID");
    localDraft=extras.getBoolean("localDraft",false);
    isPage=extras.getBoolean("isPage",false);
  }
  Display display=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (height > width) {
    width=height;
  }
  if (width > 480) {
    isLargeScreen=true;
  }
  if (isPage) {
    setContentView(R.layout.edit_page);
  }
 else {
    setContentView(R.layout.edit);
  }
  this.setTitle(accountName + " - " + getResources().getText((isPage) ? R.string.edit_page : R.string.edit_post));
  if (localDraft) {
    WordPressDB lDraftsDB=new WordPressDB(this);
    Vector post;
    if (isPage) {
      post=lDraftsDB.loadPageDraft(this,postID);
    }
 else {
      post=lDraftsDB.loadPost(this,postID);
    }
    final HashMap postHashMap=(HashMap)post.get(0);
    EditText titleET=(EditText)findViewById(R.id.title);
    EditText contentET=(EditText)findViewById(R.id.content);
    titleET.setText(postHashMap.get("title").toString());
    contentET.setText(Html.fromHtml(postHashMap.get("content").toString()));
    String picturePaths=postHashMap.get("picturePaths").toString();
    if (!picturePaths.equals("")) {
      String[] pPaths=picturePaths.split(",");
      for (int i=0; i < pPaths.length; i++) {
        Uri imagePath=Uri.parse(pPaths[i]);
        selectedImageIDs.add(selectedImageCtr,imagePath);
        imageUrl.add(selectedImageCtr,pPaths[i]);
        selectedImageCtr++;
        GridView gridview=(GridView)findViewById(R.id.gridView);
        gridview.setVisibility(View.VISIBLE);
        gridview.setAdapter(new ImageAdapter(this));
        Button clearMedia=(Button)findViewById(R.id.clearPicture);
        clearMedia.setVisibility(View.VISIBLE);
      }
    }
    if (!isPage) {
      categories=postHashMap.get("categories").toString();
      if (!categories.equals("")) {
        String[] aCategories=categories.split(",");
        for (int i=0; i < aCategories.length; i++) {
          selectedCategories.add(aCategories[i]);
        }
        TextView tvCategories=(TextView)findViewById(R.id.selectedCategories);
        tvCategories.setText("Selected categories: " + categories);
      }
      WordPressDB settingsDB=new WordPressDB(this);
      Vector settingsVector=settingsDB.loadSettings(this,id);
      String sLocation=settingsVector.get(11).toString();
      location=false;
      if (sLocation.equals("1")) {
        location=true;
      }
      if (location) {
        final Button viewMap=(Button)findViewById(R.id.viewMap);
        viewMap.setOnClickListener(new TextView.OnClickListener(){
          public void onClick(          View v){
            Double latitude=0.0;
            try {
              latitude=curLocation.getLatitude();
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
            if (latitude != 0.0) {
              String uri="geo:" + latitude + ","+ curLocation.getLongitude();
              startActivity(new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri)));
            }
 else {
              Toast.makeText(editPost.this,getResources().getText(R.string.location_toast),Toast.LENGTH_SHORT).show();
            }
          }
        }
);
      }
      Double latitude=(Double)postHashMap.get("latitude");
      Double longitude=(Double)postHashMap.get("longitude");
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
      if (location && latitude > 0) {
        Button updateLocation=(Button)findViewById(R.id.updateLocation);
        updateLocation.setOnClickListener(new Button.OnClickListener(){
          public void onClick(          View v){
            lm=(LocationManager)getSystemService(LOCATION_SERVICE);
            lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,editPost.this);
            lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,editPost.this);
            locationActive=true;
          }
        }
);
        RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
        locationSection.setVisibility(View.VISIBLE);
      }
 else       if (location) {
        lm=(LocationManager)getSystemService(LOCATION_SERVICE);
        lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,editPost.this);
        lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,editPost.this);
        locationActive=true;
        RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
        locationSection.setVisibility(View.VISIBLE);
      }
      Button selectCategories=(Button)findViewById(R.id.selectCategories);
      selectCategories.setOnClickListener(new Button.OnClickListener(){
        public void onClick(        View v){
          Bundle bundle=new Bundle();
          bundle.putString("id",id);
          if (categories != "") {
            bundle.putString("categoriesCSV",categories);
          }
          Intent i=new Intent(editPost.this,selectCategories.class);
          i.putExtras(bundle);
          startActivityForResult(i,5);
        }
      }
);
      String tags=postHashMap.get("tags").toString();
      if (!tags.equals("")) {
        EditText tagsET=(EditText)findViewById(R.id.tags);
        tagsET.setText(tags);
      }
    }
    int publish=Integer.valueOf(postHashMap.get("publish").toString());
    CheckBox publishCB=(CheckBox)findViewById(R.id.publish);
    if (publish == 1) {
      publishCB.setChecked(true);
    }
  }
 else {
    WordPressDB settingsDB=new WordPressDB(this);
    Vector categoriesVector=settingsDB.loadSettings(this,id);
    String sURL="";
    if (categoriesVector.get(0).toString().contains("xmlrpc.php")) {
      sURL=categoriesVector.get(0).toString();
    }
 else {
      sURL=categoriesVector.get(0).toString() + "xmlrpc.php";
    }
    String sUsername=categoriesVector.get(2).toString();
    String sPassword=categoriesVector.get(3).toString();
    client=new XMLRPCClient(sURL);
    EditText titleET=(EditText)findViewById(R.id.title);
    String setTitle=titleET.getText().toString();
    if (setTitle.equals("")) {
      pd=ProgressDialog.show(editPost.this,getResources().getText((isPage) ? R.string.getting_page : R.string.getting_post),getResources().getText((isPage) ? R.string.please_wait_getting_page : R.string.please_wait_getting_post),true,false);
      XMLRPCMethod method=new XMLRPCMethod("metaWeblog.getPost",new XMLRPCMethodCallback(){
        public void callFinished(        Object result){
          String s="done";
          s=result.toString();
          pd.dismiss();
          if (result == null) {
          }
 else {
            HashMap contentHash=(HashMap)result;
            EditText titleET=(EditText)findViewById(R.id.title);
            titleET.setText(escapeUtils.unescapeHtml(contentHash.get("title").toString()));
            EditText contentET=(EditText)findViewById(R.id.content);
            String content="";
            if (contentHash.get("mt_text_more").toString() != "") {
              content=StringHelper.convertHTMLTagsForDisplay(contentHash.get("description").toString() + "<!--more-->\n" + contentHash.get("mt_text_more").toString());
            }
 else {
              content=StringHelper.convertHTMLTagsForDisplay(contentHash.get("description").toString());
            }
            content=content.replace("<p><p>","<p>");
            content=content.replace("</p></p>","</p>");
            content=content.replace("<br><br>","<br>");
            contentET.setText(content);
            String status=contentHash.get("post_status").toString();
            if (!isPage) {
              EditText tagsET=(EditText)findViewById(R.id.tags);
              tagsET.setText(escapeUtils.unescapeHtml(contentHash.get("mt_keywords").toString()));
              TextView categoriesTV=(TextView)findViewById(R.id.selectedCategories);
              Object categoriesArray[]=(Object[])contentHash.get("categories");
              if (categoriesArray != null) {
                int ctr=0;
                categories="";
                for (                Object item : categoriesArray) {
                  String category=categoriesArray[ctr].toString();
                  if (!selectedCategories.contains(category)) {
                    categories+=category + ",";
                    selectedCategories.add(category);
                  }
                  ctr++;
                }
                categories=categories.trim();
                if (categories.endsWith(",")) {
                  categories=categories.substring(0,categories.length() - 1);
                }
                if (categories != "") {
                  categoriesTV.setText(getResources().getText(R.string.selected_categories) + " " + categories);
                }
              }
              Button selectCategories=(Button)findViewById(R.id.selectCategories);
              selectCategories.setOnClickListener(new Button.OnClickListener(){
                public void onClick(                View v){
                  Bundle bundle=new Bundle();
                  bundle.putString("id",id);
                  if (categories != "") {
                    bundle.putString("categoriesCSV",categories);
                  }
                  Intent i=new Intent(editPost.this,selectCategories.class);
                  i.putExtras(bundle);
                  startActivityForResult(i,5);
                }
              }
);
            }
            CheckBox publishCB=(CheckBox)findViewById(R.id.publish);
            if (status.equals("publish")) {
              publishCB.setChecked(true);
            }
 else {
              publishCB.setChecked(false);
            }
          }
        }
      }
);
      Object[] params={postID,sUsername,sPassword};
      method.call(params);
    }
  }
  final Button postButton=(Button)findViewById(R.id.post);
  postButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      if (localDraft) {
        boolean result=savePost();
        if (result) {
          Bundle bundle=new Bundle();
          bundle.putString("returnStatus","OK");
          Intent mIntent=new Intent();
          mIntent.putExtras(bundle);
          setResult(RESULT_OK,mIntent);
          finish();
        }
      }
 else {
        showDialog(ID_DIALOG_POSTING);
        Thread t=new Thread(){
          String resultCode="";
          public void run(){
            try {
              finalResult=submitPost();
              mHandler.post(mUpdateResults);
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
        }
;
        t.start();
      }
    }
  }
);
  final Button addPictureButton=(Button)findViewById(R.id.addPictureButton);
  registerForContextMenu(addPictureButton);
  addPictureButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      addPictureButton.performLongClick();
    }
  }
);
  final EditText contentEdit=(EditText)findViewById(R.id.content);
  contentEdit.addTextChangedListener(new TextWatcher(){
    public void afterTextChanged(    Editable s){
      ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
      ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
      ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
      ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
      ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
      int position=Selection.getSelectionStart(contentEdit.getText());
      if (position < 0) {
        position=0;
      }
      if (position > 0) {
        if (styleStart > position || position > (cursorLoc + 1)) {
          if (position - cursorLoc > 1) {
            styleStart=cursorLoc;
          }
 else {
            styleStart=position - 1;
          }
        }
        if (boldButton.isChecked()) {
          StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
          for (int i=0; i < ss.length; i++) {
            if (ss[i].getStyle() == android.graphics.Typeface.BOLD) {
              s.removeSpan(ss[i]);
            }
          }
          s.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),styleStart,position,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
        if (emButton.isChecked()) {
          StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
          boolean exists=false;
          for (int i=0; i < ss.length; i++) {
            if (ss[i].getStyle() == android.graphics.Typeface.ITALIC) {
              s.removeSpan(ss[i]);
            }
          }
          s.setSpan(new StyleSpan(android.graphics.Typeface.ITALIC),styleStart,position,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
        if (bquoteButton.isChecked()) {
          QuoteSpan[] ss=s.getSpans(styleStart,position,QuoteSpan.class);
          for (int i=0; i < ss.length; i++) {
            s.removeSpan(ss[i]);
          }
          s.setSpan(new QuoteSpan(),styleStart,position,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
        if (underlineButton.isChecked()) {
          UnderlineSpan[] ss=s.getSpans(styleStart,position,UnderlineSpan.class);
          for (int i=0; i < ss.length; i++) {
            s.removeSpan(ss[i]);
          }
          s.setSpan(new UnderlineSpan(),styleStart,position,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
        if (strikeButton.isChecked()) {
          StrikethroughSpan[] ss=s.getSpans(styleStart,position,StrikethroughSpan.class);
          for (int i=0; i < ss.length; i++) {
            s.removeSpan(ss[i]);
          }
          s.setSpan(new StrikethroughSpan(),styleStart,position,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
      }
      cursorLoc=Selection.getSelectionStart(contentEdit.getText());
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  final ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
  boldButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      EditText contentText=(EditText)findViewById(R.id.content);
      int selectionStart=contentText.getSelectionStart();
      styleStart=selectionStart;
      int selectionEnd=contentText.getSelectionEnd();
      if (selectionStart > selectionEnd) {
        int temp=selectionEnd;
        selectionEnd=selectionStart;
        selectionStart=temp;
      }
      if (selectionEnd > selectionStart) {
        Spannable str=contentText.getText();
        StyleSpan[] ss=str.getSpans(selectionStart,selectionEnd,StyleSpan.class);
        boolean exists=false;
        for (int i=0; i < ss.length; i++) {
          if (ss[i].getStyle() == android.graphics.Typeface.BOLD) {
            str.removeSpan(ss[i]);
            exists=true;
          }
        }
        if (!exists) {
          str.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),selectionStart,selectionEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
        boldButton.setChecked(false);
      }
    }
  }
);
  final Button linkButton=(Button)findViewById(R.id.link);
  linkButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      TextView contentText=(TextView)findViewById(R.id.content);
      int selectionStart=contentText.getSelectionStart();
      styleStart=selectionStart;
      int selectionEnd=contentText.getSelectionEnd();
      if (selectionStart > selectionEnd) {
        int temp=selectionEnd;
        selectionEnd=selectionStart;
        selectionStart=temp;
      }
      if (selectionStart == -1 || selectionStart == contentText.getText().toString().length() || (selectionStart == selectionEnd)) {
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(editPost.this);
        dialogBuilder.setTitle(getResources().getText(R.string.no_text_selected));
        dialogBuilder.setMessage(getResources().getText(R.string.select_text_to_link) + " " + getResources().getText(R.string.howto_select_text));
        dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        dialogBuilder.create().show();
      }
 else {
        Intent i=new Intent(editPost.this,link.class);
        startActivityForResult(i,2);
      }
    }
  }
);
  final ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
  emButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      EditText contentText=(EditText)findViewById(R.id.content);
      int selectionStart=contentText.getSelectionStart();
      styleStart=selectionStart;
      int selectionEnd=contentText.getSelectionEnd();
      if (selectionStart > selectionEnd) {
        int temp=selectionEnd;
        selectionEnd=selectionStart;
        selectionStart=temp;
      }
      if (selectionEnd > selectionStart) {
        Spannable str=contentText.getText();
        StyleSpan[] ss=str.getSpans(selectionStart,selectionEnd,StyleSpan.class);
        boolean exists=false;
        for (int i=0; i < ss.length; i++) {
          if (ss[i].getStyle() == android.graphics.Typeface.ITALIC) {
            str.removeSpan(ss[i]);
            exists=true;
          }
        }
        if (!exists) {
          str.setSpan(new StyleSpan(android.graphics.Typeface.ITALIC),selectionStart,selectionEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
        emButton.setChecked(false);
      }
    }
  }
);
  final ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
  underlineButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      EditText contentText=(EditText)findViewById(R.id.content);
      int selectionStart=contentText.getSelectionStart();
      styleStart=selectionStart;
      int selectionEnd=contentText.getSelectionEnd();
      if (selectionStart > selectionEnd) {
        int temp=selectionEnd;
        selectionEnd=selectionStart;
        selectionStart=temp;
      }
      if (selectionEnd > selectionStart) {
        Spannable str=contentText.getText();
        UnderlineSpan[] ss=str.getSpans(selectionStart,selectionEnd,UnderlineSpan.class);
        boolean exists=false;
        for (int i=0; i < ss.length; i++) {
          str.removeSpan(ss[i]);
          exists=true;
        }
        if (!exists) {
          str.setSpan(new UnderlineSpan(),selectionStart,selectionEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
        underlineButton.setChecked(false);
      }
    }
  }
);
  final ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
  strikeButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      EditText contentText=(EditText)findViewById(R.id.content);
      int selectionStart=contentText.getSelectionStart();
      styleStart=selectionStart;
      int selectionEnd=contentText.getSelectionEnd();
      if (selectionStart > selectionEnd) {
        int temp=selectionEnd;
        selectionEnd=selectionStart;
        selectionStart=temp;
      }
      if (selectionEnd > selectionStart) {
        Spannable str=contentText.getText();
        StrikethroughSpan[] ss=str.getSpans(selectionStart,selectionEnd,StrikethroughSpan.class);
        boolean exists=false;
        for (int i=0; i < ss.length; i++) {
          str.removeSpan(ss[i]);
          exists=true;
        }
        if (!exists) {
          str.setSpan(new StrikethroughSpan(),selectionStart,selectionEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
        strikeButton.setChecked(false);
      }
    }
  }
);
  final ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
  bquoteButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      EditText contentText=(EditText)findViewById(R.id.content);
      int selectionStart=contentText.getSelectionStart();
      styleStart=selectionStart;
      int selectionEnd=contentText.getSelectionEnd();
      if (selectionStart > selectionEnd) {
        int temp=selectionEnd;
        selectionEnd=selectionStart;
        selectionStart=temp;
      }
      if (selectionEnd > selectionStart) {
        Spannable str=contentText.getText();
        QuoteSpan[] ss=str.getSpans(selectionStart,selectionEnd,QuoteSpan.class);
        boolean exists=false;
        for (int i=0; i < ss.length; i++) {
          str.removeSpan(ss[i]);
          exists=true;
        }
        if (!exists) {
          str.setSpan(new QuoteSpan(),selectionStart,selectionEnd,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
        strikeButton.setChecked(false);
      }
    }
  }
);
  final Button cancelButton=(Button)findViewById(R.id.cancel);
  cancelButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(editPost.this);
      dialogBuilder.setTitle(getResources().getText(R.string.cancel_edit));
      dialogBuilder.setMessage(getResources().getText((isPage) ? R.string.sure_to_cancel_edit_page : R.string.sure_to_cancel_edit));
      dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
          Bundle bundle=new Bundle();
          bundle.putString("returnStatus","CANCEL");
          Intent mIntent=new Intent();
          mIntent.putExtras(bundle);
          setResult(RESULT_OK,mIntent);
          finish();
        }
      }
);
      dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      dialogBuilder.setCancelable(true);
      dialogBuilder.create().show();
    }
  }
);
  final Button clearPictureButton=(Button)findViewById(R.id.clearPicture);
  clearPictureButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      imageUrl.clear();
      thumbnailUrl.clear();
      selectedImageIDs=new Vector();
      selectedImageCtr=0;
      GridView gridview=(GridView)findViewById(R.id.gridView);
      gridview.setVisibility(View.GONE);
      gridview.setAdapter(null);
      clearPictureButton.setVisibility(View.GONE);
    }
  }
);
}
