{
  super.onCreate(icicle);
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    id=extras.getString("id");
    accountName=escapeUtils.unescapeHtml(extras.getString("accountName"));
    postID=extras.getString("postID");
    localDraft=extras.getBoolean("localDraft",false);
    isPage=extras.getBoolean("isPage",false);
    isNew=extras.getBoolean("isNew",false);
  }
  Display display=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (height > width) {
    width=height;
  }
  if (width > 480) {
    isLargeScreen=true;
  }
  if (isPage) {
    setContentView(R.layout.edit_page);
  }
 else {
    setContentView(R.layout.edit);
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
  Spinner spinner=(Spinner)findViewById(R.id.status);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  spinner.setAdapter(adapter);
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    isAction=true;
    isNew=true;
    WordPressDB settingsDB=new WordPressDB(this);
    Vector<?> accounts=settingsDB.getAccounts(this);
    if (accounts.size() > 0) {
      final String blogNames[]=new String[accounts.size()];
      final String accountIDs[]=new String[accounts.size()];
      for (int i=0; i < accounts.size(); i++) {
        HashMap<?,?> curHash=(HashMap<?,?>)accounts.get(i);
        try {
          blogNames[i]=escapeUtils.unescapeHtml(curHash.get("blogName").toString());
        }
 catch (        Exception e) {
          blogNames[i]="(No Blog Title)";
        }
        accountIDs[i]=curHash.get("id").toString();
      }
      if (accounts.size() != 1) {
        AlertDialog.Builder builder=new AlertDialog.Builder(this);
        builder.setTitle(getResources().getText(R.string.select_a_blog));
        builder.setItems(blogNames,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int item){
            id=accountIDs[item];
            accountName=blogNames[item];
            setTitle(accountName + " - " + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
            setContent();
            lbsCheck();
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
 else {
        id=accountIDs[0];
        accountName=blogNames[0];
        setTitle(accountName + " - " + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
        setContent();
      }
    }
 else {
      Intent i=new Intent(this,wpAndroid.class);
      Toast.makeText(getApplicationContext(),getResources().getText(R.string.no_account),Toast.LENGTH_LONG).show();
      startActivity(i);
      finish();
    }
  }
 else {
    selectedImageIDs.clear();
    selectedImageCtr=0;
    if (!isPage) {
      lbsCheck();
    }
  }
  if (isNew) {
    setTitle(accountName + " - " + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
  }
 else {
    setTitle(accountName + " - " + getResources().getText((isPage) ? R.string.edit_page : R.string.edit_post));
  }
  if (localDraft) {
    WordPressDB lDraftsDB=new WordPressDB(this);
    Vector<?> post;
    if (isPage) {
      post=lDraftsDB.loadPageDraft(this,postID);
    }
 else {
      post=lDraftsDB.loadPost(this,postID);
    }
    final HashMap<?,?> postHashMap=(HashMap<?,?>)post.get(0);
    EditText titleET=(EditText)findViewById(R.id.title);
    EditText contentET=(EditText)findViewById(R.id.content);
    EditText passwordET=(EditText)findViewById(R.id.post_password);
    titleET.setText(postHashMap.get("title").toString());
    contentET.setText(Html.fromHtml(postHashMap.get("content").toString()));
    long pubDate=Long.parseLong(postHashMap.get("pubDate").toString());
    if (pubDate != 0) {
      try {
        Date date=new Date(pubDate);
        SimpleDateFormat sdf=new SimpleDateFormat("MMM dd, yyyy 'at' hh:mm a");
        String sPubDate=sdf.format(date);
        TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
        tvPubDate.setText(sPubDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (postHashMap.get("password") != null)     passwordET.setText(postHashMap.get("password").toString());
    if (postHashMap.get("status") != null) {
      String status=postHashMap.get("status").toString();
      if (status.equals("publish")) {
        spinner.setSelection(0,true);
      }
 else       if (status.equals("draft")) {
        spinner.setSelection(1,true);
      }
 else       if (status.equals("pending")) {
        spinner.setSelection(2,true);
      }
 else       if (status.equals("private")) {
        spinner.setSelection(3,true);
      }
    }
    String picturePaths=postHashMap.get("picturePaths").toString();
    if (!picturePaths.equals("")) {
      String[] pPaths=picturePaths.split(",");
      for (int i=0; i < pPaths.length; i++) {
        Uri imagePath=Uri.parse(pPaths[i]);
        addMedia(imagePath.getEncodedPath(),imagePath);
      }
    }
    if (!isPage) {
      categories=postHashMap.get("categories").toString();
      if (!categories.equals("")) {
        String[] aCategories=categories.split(",");
        for (int i=0; i < aCategories.length; i++) {
          selectedCategories.add(aCategories[i]);
        }
        TextView tvCategories=(TextView)findViewById(R.id.selectedCategories);
        tvCategories.setText("Selected categories: " + categories);
      }
      WordPressDB settingsDB=new WordPressDB(this);
      Vector<?> settingsVector=settingsDB.loadSettings(this,id);
      String sLocation=settingsVector.get(13).toString();
      location=false;
      if (sLocation.equals("1")) {
        location=true;
      }
      if (location) {
        enableLBSButtons();
      }
      Double latitude=(Double)postHashMap.get("latitude");
      Double longitude=(Double)postHashMap.get("longitude");
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
      if (location && latitude > 0) {
        Button updateLocation=(Button)findViewById(R.id.updateLocation);
        updateLocation.setOnClickListener(new Button.OnClickListener(){
          public void onClick(          View v){
            lm=(LocationManager)getSystemService(LOCATION_SERVICE);
            lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,editPost.this);
            lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,editPost.this);
            locationActive=true;
          }
        }
);
        RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
        locationSection.setVisibility(View.VISIBLE);
      }
 else       if (location) {
        lm=(LocationManager)getSystemService(LOCATION_SERVICE);
        lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,editPost.this);
        lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,editPost.this);
        locationActive=true;
        RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
        locationSection.setVisibility(View.VISIBLE);
      }
      String tags=postHashMap.get("tags").toString();
      if (!tags.equals("")) {
        EditText tagsET=(EditText)findViewById(R.id.tags);
        tagsET.setText(tags);
      }
    }
  }
 else   if (isNew) {
    Button cancelBtn=(Button)findViewById(R.id.cancel);
    cancelBtn.setText(getResources().getText(R.string.upload_now));
    if (!isAction) {
      WordPressDB settingsDB=new WordPressDB(this);
      Vector<?> settingsVector=settingsDB.loadSettings(this,id);
      String sLocation=settingsVector.get(13).toString();
      if (!isPage) {
        location=false;
        if (sLocation.equals("1")) {
          location=true;
        }
        enableLBSButtons();
      }
    }
  }
 else {
    WordPressDB settingsDB=new WordPressDB(this);
    Vector<?> categoriesVector=settingsDB.loadSettings(this,id);
    String sURL="";
    if (categoriesVector.get(0).toString().contains("xmlrpc.php")) {
      sURL=categoriesVector.get(0).toString();
    }
 else {
      sURL=categoriesVector.get(0).toString() + "xmlrpc.php";
    }
    String sUsername=categoriesVector.get(2).toString();
    String sPassword=categoriesVector.get(3).toString();
    String sHttpuser=categoriesVector.get(4).toString();
    String sHttppassword=categoriesVector.get(5).toString();
    client=new XMLRPCClient(sURL,sHttpuser,sHttppassword);
    EditText titleET=(EditText)findViewById(R.id.title);
    String setTitle=titleET.getText().toString();
    if (setTitle.equals("")) {
      pd=ProgressDialog.show(editPost.this,getResources().getText((isPage) ? R.string.getting_page : R.string.getting_post),getResources().getText((isPage) ? R.string.please_wait_getting_page : R.string.please_wait_getting_post),true,false);
      XMLRPCMethod method=new XMLRPCMethod("metaWeblog.getPost",new XMLRPCMethodCallback(){
        public void callFinished(        Object result){
          pd.dismiss();
          if (result == null) {
          }
 else {
            HashMap<?,?> contentHash=(HashMap<?,?>)result;
            EditText titleET=(EditText)findViewById(R.id.title);
            titleET.setText(escapeUtils.unescapeHtml(contentHash.get("title").toString()));
            EditText contentET=(EditText)findViewById(R.id.content);
            sSlug=contentHash.get("wp_slug").toString();
            String content="";
            if (contentHash.get("mt_text_more").toString() != "") {
              content=contentHash.get("description").toString() + "<!--more-->\n" + contentHash.get("mt_text_more").toString();
            }
 else {
              content=contentHash.get("description").toString();
            }
            contentET.setText(content);
            SimpleDateFormat sdf=new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
            Calendar cal=Calendar.getInstance();
            TimeZone tz=cal.getTimeZone();
            String shortDisplayName="";
            shortDisplayName=tz.getDisplayName(true,TimeZone.SHORT);
            String cDate=contentHash.get("dateCreated").toString().replace(tz.getID(),shortDisplayName);
            try {
              Date d=sdf.parse(cDate);
              SimpleDateFormat sdfOut=new SimpleDateFormat("MMM dd, yyyy hh:mm a");
              TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
              tvPubDate.setText(sdfOut.format(d));
            }
 catch (            ParseException pe) {
              pe.printStackTrace();
            }
catch (            java.text.ParseException e) {
              e.printStackTrace();
            }
            EditText passwordET=(EditText)findViewById(R.id.post_password);
            if (contentHash.get("wp_password") != null)             passwordET.setText(contentHash.get("wp_password").toString());
            Toast.makeText(editPost.this,getResources().getText(R.string.html),Toast.LENGTH_SHORT).show();
            String status=contentHash.get("post_status").toString();
            if (!isPage) {
              EditText tagsET=(EditText)findViewById(R.id.tags);
              tagsET.setText(escapeUtils.unescapeHtml(contentHash.get("mt_keywords").toString()));
              TextView categoriesTV=(TextView)findViewById(R.id.selectedCategories);
              Object categoriesArray[]=(Object[])contentHash.get("categories");
              if (categoriesArray != null) {
                categories="";
                for (int ctr=0; ctr < categoriesArray.length; ctr++) {
                  String category=categoriesArray[ctr].toString();
                  if (!selectedCategories.contains(category)) {
                    categories+=category + ",";
                    selectedCategories.add(category);
                  }
                }
                categories=categories.trim();
                if (categories.endsWith(",")) {
                  categories=categories.substring(0,categories.length() - 1);
                }
                if (categories != "") {
                  categoriesTV.setText(getResources().getText(R.string.selected_categories) + " " + categories);
                }
              }
              Button selectCategories=(Button)findViewById(R.id.selectCategories);
              selectCategories.setOnClickListener(new Button.OnClickListener(){
                public void onClick(                View v){
                  Bundle bundle=new Bundle();
                  bundle.putString("id",id);
                  if (categories != "") {
                    bundle.putString("categoriesCSV",categories);
                  }
                  Intent i=new Intent(editPost.this,selectCategories.class);
                  i.putExtras(bundle);
                  startActivityForResult(i,5);
                }
              }
);
            }
            Spinner spinner=(Spinner)findViewById(R.id.status);
            if (status.equals("publish")) {
              spinner.setSelection(0,true);
            }
 else             if (status.equals("draft")) {
              spinner.setSelection(1,true);
            }
 else             if (status.equals("pending")) {
              spinner.setSelection(2,true);
            }
 else             if (status.equals("private")) {
              spinner.setSelection(3,true);
            }
          }
        }
      }
);
      Object[] params={postID,sUsername,sPassword};
      method.call(params);
    }
  }
  if ((localDraft || isNew) && !isPage) {
    Button selectCategories=(Button)findViewById(R.id.selectCategories);
    selectCategories.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        Bundle bundle=new Bundle();
        bundle.putString("id",id);
        if (categories != "") {
          bundle.putString("categoriesCSV",categories);
        }
        Intent i=new Intent(editPost.this,selectCategories.class);
        i.putExtras(bundle);
        startActivityForResult(i,5);
      }
    }
);
  }
  final Button postButton=(Button)findViewById(R.id.post);
  postButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      if (localDraft || isNew) {
        boolean result=savePost();
        if (result) {
          Bundle bundle=new Bundle();
          bundle.putString("returnStatus","OK");
          Intent mIntent=new Intent();
          mIntent.putExtras(bundle);
          setResult(RESULT_OK,mIntent);
          finish();
        }
      }
 else {
        showDialog(ID_DIALOG_POSTING);
        Thread t=new Thread(){
          public void run(){
            try {
              finalResult=submitPost();
              mHandler.post(mUpdateResults);
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
        }
;
        t.start();
      }
    }
  }
);
  final Button addPictureButton=(Button)findViewById(R.id.addPictureButton);
  registerForContextMenu(addPictureButton);
  addPictureButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      addPictureButton.performLongClick();
    }
  }
);
  final EditText contentEdit=(EditText)findViewById(R.id.content);
  contentEdit.addTextChangedListener(new TextWatcher(){
    public void afterTextChanged(    Editable s){
      if (localDraft || isNew) {
        ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
        ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
        ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
        ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
        ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
        int position=Selection.getSelectionStart(contentEdit.getText());
        if (position < 0) {
          position=0;
        }
        if (position > 0) {
          if (styleStart > position || position > (cursorLoc + 1)) {
            if (position - cursorLoc > 1) {
              styleStart=cursorLoc;
            }
 else {
              styleStart=position - 1;
            }
          }
          if (boldButton.isChecked()) {
            StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
            for (int i=0; i < ss.length; i++) {
              if (ss[i].getStyle() == android.graphics.Typeface.BOLD) {
                s.removeSpan(ss[i]);
              }
            }
            s.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),styleStart,position,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
          }
          if (emButton.isChecked()) {
            StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
            for (int i=0; i < ss.length; i++) {
              if (ss[i].getStyle() == android.graphics.Typeface.ITALIC) {
                s.removeSpan(ss[i]);
              }
            }
            s.setSpan(new StyleSpan(android.graphics.Typeface.ITALIC),styleStart,position,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
          }
          if (bquoteButton.isChecked()) {
            QuoteSpan[] ss=s.getSpans(styleStart,position,QuoteSpan.class);
            for (int i=0; i < ss.length; i++) {
              s.removeSpan(ss[i]);
            }
            s.setSpan(new QuoteSpan(),styleStart,position,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
          }
          if (underlineButton.isChecked()) {
            UnderlineSpan[] ss=s.getSpans(styleStart,position,UnderlineSpan.class);
            for (int i=0; i < ss.length; i++) {
              s.removeSpan(ss[i]);
            }
            s.setSpan(new UnderlineSpan(),styleStart,position,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
          }
          if (strikeButton.isChecked()) {
            StrikethroughSpan[] ss=s.getSpans(styleStart,position,StrikethroughSpan.class);
            for (int i=0; i < ss.length; i++) {
              s.removeSpan(ss[i]);
            }
            s.setSpan(new StrikethroughSpan(),styleStart,position,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
          }
        }
        cursorLoc=Selection.getSelectionStart(contentEdit.getText());
      }
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  final ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
  boldButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(boldButton,"strong");
    }
  }
);
  final Button linkButton=(Button)findViewById(R.id.link);
  linkButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      TextView contentText=(TextView)findViewById(R.id.content);
      int selectionStart=contentText.getSelectionStart();
      styleStart=selectionStart;
      int selectionEnd=contentText.getSelectionEnd();
      if (selectionStart > selectionEnd) {
        int temp=selectionEnd;
        selectionEnd=selectionStart;
        selectionStart=temp;
      }
      if (selectionStart == -1 || selectionStart == contentText.getText().toString().length() || (selectionStart == selectionEnd)) {
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(editPost.this);
        dialogBuilder.setTitle(getResources().getText(R.string.no_text_selected));
        dialogBuilder.setMessage(getResources().getText(R.string.select_text_to_link) + " " + getResources().getText(R.string.howto_select_text));
        dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        dialogBuilder.create().show();
      }
 else {
        Intent i=new Intent(editPost.this,link.class);
        startActivityForResult(i,2);
      }
    }
  }
);
  final ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
  emButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(emButton,"em");
    }
  }
);
  final ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
  underlineButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(underlineButton,"u");
    }
  }
);
  final ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
  strikeButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(strikeButton,"strike");
    }
  }
);
  final ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
  bquoteButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(bquoteButton,"blockquote");
    }
  }
);
  final Button cancelButton=(Button)findViewById(R.id.cancel);
  cancelButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      if (isNew) {
        boolean result=savePost();
        if (result) {
          WordPressDB lddb=new WordPressDB(editPost.this);
          int newID=-1;
          if (isPage) {
            newID=lddb.getLatestPageDraftID(editPost.this,id);
          }
 else {
            newID=lddb.getLatestDraftID(editPost.this,id);
          }
          Bundle bundle=new Bundle();
          if (newID != -1) {
            if (isAction) {
              Intent mIntent=new Intent(editPost.this,tabView.class);
              bundle.putString("activateTab","posts");
              bundle.putString("id",id);
              bundle.putInt("uploadID",newID);
              bundle.putString("accountName",accountName);
              bundle.putString("action","upload");
              mIntent.putExtras(bundle);
              startActivity(mIntent);
            }
 else {
              bundle.putString("returnStatus","OK");
              bundle.putBoolean("upload",true);
              bundle.putInt("newID",newID);
              Intent mIntent=new Intent();
              mIntent.putExtras(bundle);
              setResult(RESULT_OK,mIntent);
            }
            finish();
          }
        }
      }
 else {
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(editPost.this);
        dialogBuilder.setTitle(getResources().getText(R.string.cancel_edit));
        dialogBuilder.setMessage(getResources().getText((isPage) ? R.string.sure_to_cancel_edit_page : R.string.sure_to_cancel_edit));
        dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
            Bundle bundle=new Bundle();
            bundle.putString("returnStatus","CANCEL");
            Intent mIntent=new Intent();
            mIntent.putExtras(bundle);
            setResult(RESULT_OK,mIntent);
            finish();
          }
        }
);
        dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        dialogBuilder.create().show();
      }
    }
  }
);
  final Button clearPictureButton=(Button)findViewById(R.id.clearPicture);
  clearPictureButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      imageUrl.clear();
      thumbnailUrl.clear();
      selectedImageIDs=new Vector<Uri>();
      selectedImageCtr=0;
      imgThumbs.clear();
      Gallery gallery=(Gallery)findViewById(R.id.gallery);
      gallery.setVisibility(View.GONE);
      gallery.setAdapter(null);
      clearPictureButton.setVisibility(View.GONE);
    }
  }
);
  Button pubDate=(Button)findViewById(R.id.pubDateButton);
  pubDate.setOnClickListener(new TextView.OnClickListener(){
    public void onClick(    View v){
      Calendar c=Calendar.getInstance();
      mYear=c.get(Calendar.YEAR);
      mMonth=c.get(Calendar.MONTH);
      mDay=c.get(Calendar.DAY_OF_MONTH);
      mHour=c.get(Calendar.HOUR_OF_DAY);
      mMinute=c.get(Calendar.MINUTE);
      showDialog(ID_DIALOG_DATE);
    }
  }
);
}
