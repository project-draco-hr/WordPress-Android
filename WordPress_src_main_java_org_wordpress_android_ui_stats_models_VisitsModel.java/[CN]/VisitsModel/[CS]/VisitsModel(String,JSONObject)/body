{
  this.setBlogID(blogID);
  this.setDate(response.getString("date"));
  this.setUnit(response.getString("unit"));
  this.setFields(response.getJSONArray("fields").toString());
  JSONArray dataJSON;
  try {
    dataJSON=response.getJSONArray("data");
  }
 catch (  JSONException e) {
    AppLog.e(AppLog.T.STATS,this.getClass().getName() + " cannot convert the data field to a JSON array",e);
    dataJSON=new JSONArray();
  }
  if (dataJSON == null || dataJSON.length() == 0) {
    mVisits=new ArrayList<VisitModel>(0);
  }
 else {
    HashMap<String,Integer> columnsMapping=new HashMap<String,Integer>(6);
    final JSONArray fieldsJSON=getFieldsJSON();
    if (fieldsJSON == null || fieldsJSON.length() == 0) {
      mVisits=new ArrayList<VisitModel>(0);
    }
 else {
      try {
        for (int i=0; i < fieldsJSON.length(); i++) {
          final String field=fieldsJSON.getString(i);
          columnsMapping.put(field,i);
        }
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,"Cannot read the parameter fields from the JSON response." + "Response: " + response.toString(),e);
        mVisits=new ArrayList<VisitModel>(0);
      }
    }
    int viewsColumnIndex=columnsMapping.get("views");
    int visitorsColumnIndex=columnsMapping.get("visitors");
    int likesColumnIndex=columnsMapping.get("likes");
    int commentsColumnIndex=columnsMapping.get("comments");
    int periodColumnIndex=columnsMapping.get("period");
    int numPoints=dataJSON.length();
    mVisits=new ArrayList<VisitModel>(numPoints);
    for (int i=0; i < numPoints; i++) {
      try {
        JSONArray currentDayData=dataJSON.getJSONArray(i);
        VisitModel currentVisitModel=new VisitModel();
        currentVisitModel.setPeriod(currentDayData.getString(periodColumnIndex));
        currentVisitModel.setViews(currentDayData.getInt(viewsColumnIndex));
        currentVisitModel.setVisitors(currentDayData.getInt(visitorsColumnIndex));
        currentVisitModel.setComments(currentDayData.getInt(commentsColumnIndex));
        currentVisitModel.setLikes(currentDayData.getInt(likesColumnIndex));
        mVisits.add(currentVisitModel);
      }
 catch (      JSONException e) {
        AppLog.e(AppLog.T.STATS,"Cannot read the Visit item at index " + i + " Response: "+ response.toString(),e);
      }
    }
  }
}
