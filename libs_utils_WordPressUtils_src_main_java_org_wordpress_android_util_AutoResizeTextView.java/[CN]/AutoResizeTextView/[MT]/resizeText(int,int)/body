{
  CharSequence text=getText();
  if (text == null || text.length() == 0 || height <= 0 || width <= 0 || mTextSize == 0) {
    return;
  }
  TextPaint textPaint=getPaint();
  float oldTextSize=textPaint.getTextSize();
  float targetTextSize=mMaxTextSize > 0 ? Math.min(mTextSize,mMaxTextSize) : mTextSize;
  int textHeight=getTextHeight(text,textPaint,width,targetTextSize);
  while (textHeight > height && targetTextSize > mMinTextSize) {
    targetTextSize=Math.max(targetTextSize - 2,mMinTextSize);
    textHeight=getTextHeight(text,textPaint,width,targetTextSize);
  }
  if (mAddEllipsis && targetTextSize == mMinTextSize && textHeight > height) {
    TextPaint paint=new TextPaint(textPaint);
    StaticLayout layout=new StaticLayout(text,paint,width,Layout.Alignment.ALIGN_NORMAL,mSpacingMult,mSpacingAdd,false);
    if (layout.getLineCount() > 0) {
      int lastLine=layout.getLineForVertical(height) - 1;
      if (lastLine < 0) {
        setText("");
      }
 else {
        int start=layout.getLineStart(lastLine);
        int end=layout.getLineEnd(lastLine);
        float lineWidth=layout.getLineWidth(lastLine);
        float ellipseWidth=paint.measureText(M_ELLIPSIS);
        while (width < lineWidth + ellipseWidth) {
          lineWidth=paint.measureText(text.subSequence(start,--end + 1).toString());
        }
        setText(text.subSequence(0,end) + M_ELLIPSIS);
      }
    }
  }
  setTextSize(TypedValue.COMPLEX_UNIT_PX,targetTextSize);
  setLineSpacing(mSpacingAdd,mSpacingMult);
  if (mTextResizeListener != null) {
    mTextResizeListener.onTextResize(this,oldTextSize,targetTextSize);
  }
  mNeedsResize=false;
}
