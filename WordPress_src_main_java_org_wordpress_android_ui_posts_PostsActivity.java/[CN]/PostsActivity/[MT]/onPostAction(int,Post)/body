{
  if (post == null) {
    Toast.makeText(PostsActivity.this,R.string.post_not_found,Toast.LENGTH_SHORT).show();
    return;
  }
  if (action == POST_DELETE) {
    if (post.isLocalDraft()) {
      AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(PostsActivity.this);
      dialogBuilder.setTitle(getResources().getText(R.string.delete_draft));
      String deleteDraftMessage=getResources().getText(R.string.delete_sure).toString();
      if (!post.getTitle().isEmpty()) {
        String postTitleEnclosedByQuotes="'" + post.getTitle() + "'";
        deleteDraftMessage+=" " + postTitleEnclosedByQuotes;
      }
      dialogBuilder.setMessage(deleteDraftMessage + "?");
      dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
          WordPress.wpDB.deletePost(post);
          popPostDetail();
          attemptToSelectPost();
          mPostList.getPostListAdapter().loadPosts();
        }
      }
);
      dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      dialogBuilder.setCancelable(true);
      if (!isFinishing()) {
        dialogBuilder.create().show();
      }
    }
 else {
      AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(PostsActivity.this);
      dialogBuilder.setTitle(getResources().getText((post.isPage()) ? R.string.delete_page : R.string.delete_post));
      dialogBuilder.setMessage(getResources().getText((post.isPage()) ? R.string.delete_sure_page : R.string.delete_sure_post) + " '" + post.getTitle()+ "'?");
      dialogBuilder.setPositiveButton(getResources().getText(R.string.yes),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
          new deletePostTask().execute(post);
        }
      }
);
      dialogBuilder.setNegativeButton(getResources().getText(R.string.no),new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      dialogBuilder.setCancelable(true);
      if (!isFinishing()) {
        dialogBuilder.create().show();
      }
    }
  }
 else   if (action == POST_SHARE) {
    if (post.getStatusEnum() != PostStatus.PUBLISHED && post.getStatusEnum() != PostStatus.SCHEDULED) {
      AlertUtil.showAlert(this,R.string.error,post.isPage() ? R.string.page_not_published : R.string.post_not_published);
      return;
    }
    Intent share=new Intent(Intent.ACTION_SEND);
    share.setType("text/plain");
    share.putExtra(Intent.EXTRA_SUBJECT,post.getTitle());
    String shortlink=WPMeShortlinks.getPostShortlink(WordPress.getCurrentBlog(),post);
    share.putExtra(Intent.EXTRA_TEXT,shortlink != null ? shortlink : post.getPermaLink());
    startActivity(Intent.createChooser(share,getResources().getText(R.string.share_url)));
    AppLockManager.getInstance().setExtendedTimeout();
  }
 else   if (action == POST_CLEAR) {
    FragmentManager fm=getFragmentManager();
    ViewPostFragment f=(ViewPostFragment)fm.findFragmentById(R.id.postDetail);
    if (f != null) {
      f.clearContent();
    }
  }
}
