{
  if (newStatus != null && newStatus.equals(CommentStatus.TRASH)) {
    deleteComments(accountId,comments,actionListener);
    return;
  }
  final Blog blog=WordPress.getBlog(accountId);
  if (blog == null || comments == null || comments.size() == 0 || newStatus == null || newStatus == CommentStatus.UNKNOWN) {
    if (actionListener != null)     actionListener.onCommentsModerated(new CommentList());
    return;
  }
  final CommentList moderatedComments=new CommentList();
  final String newStatusStr=CommentStatus.toString(newStatus);
  final int localBlogId=blog.getLocalTableBlogId();
  final int remoteBlogId=blog.getRemoteBlogId();
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      XMLRPCClientInterface client=XMLRPCFactory.instantiate(blog.getUri(),blog.getHttpuser(),blog.getHttppassword());
      for (      Comment comment : comments) {
        Map<String,String> postHash=new HashMap<String,String>();
        postHash.put("status",newStatusStr);
        postHash.put("content",comment.getCommentText());
        postHash.put("author",comment.getAuthorName());
        postHash.put("author_url",comment.getAuthorUrl());
        postHash.put("author_email",comment.getAuthorEmail());
        Object[] params={remoteBlogId,blog.getUsername(),blog.getPassword(),Long.toString(comment.commentID),postHash};
        Object result;
        try {
          result=client.call(ApiHelper.Methods.EDIT_COMMENT,params);
          boolean success=(result != null && Boolean.parseBoolean(result.toString()));
          if (success) {
            comment.setStatus(newStatusStr);
            moderatedComments.add(comment);
          }
        }
 catch (        XMLRPCException e) {
          AppLog.e(T.COMMENTS,"Error while editing comment",e);
        }
catch (        IOException e) {
          AppLog.e(T.COMMENTS,"Error while editing comment",e);
        }
catch (        XmlPullParserException e) {
          AppLog.e(T.COMMENTS,"Error while editing comment",e);
        }
      }
      CommentTable.updateCommentsStatus(localBlogId,moderatedComments,newStatusStr);
      if (actionListener != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            actionListener.onCommentsModerated(moderatedComments);
          }
        }
);
      }
    }
  }
.start();
}
