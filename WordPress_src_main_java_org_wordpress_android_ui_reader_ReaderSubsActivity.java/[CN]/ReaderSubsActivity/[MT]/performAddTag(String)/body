{
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  ReaderActions.ActionListener actionListener=new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (!succeeded && !isFinishing()) {
        getPageAdapter().refreshFollowedTagFragment();
        ToastUtils.showToast(ReaderSubsActivity.this,R.string.reader_toast_err_add_tag);
        mLastAddedTagName=null;
      }
    }
  }
;
  ReaderTag tag=new ReaderTag(tagName,ReaderTagType.FOLLOWED);
  if (ReaderTagActions.performTagAction(tag,TagAction.ADD,actionListener)) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.READER_FOLLOWED_READER_TAG);
    mLastAddedTagName=tag.getTagName();
    getPageAdapter().refreshFollowedTagFragment();
    String labelAddedTag=getString(R.string.reader_label_added_tag);
    showInfoToast(String.format(labelAddedTag,tag.getCapitalizedTagName()));
  }
}
