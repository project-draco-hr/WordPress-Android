{
  if (mSelfHostedURL != null && mSelfHostedURL.length() != 0) {
    mXmlrpcUrl=getSelfHostedXmlrpcUrl(mSelfHostedURL);
  }
 else {
    mXmlrpcUrl=Constants.wpcomXMLRPCURL;
  }
  if (mXmlrpcUrl == null) {
    if (!mHttpAuthRequired)     mErrorMsgId=R.string.no_site_error;
    return null;
  }
  try {
    URI.create(mXmlrpcUrl);
  }
 catch (  Exception e1) {
    mErrorMsgId=R.string.no_site_error;
    return null;
  }
  XMLRPCClient client=new XMLRPCClient(mXmlrpcUrl,mHttpUsername,mHttpPassword);
  Object[] params={mUsername,mPassword};
  try {
    Object[] userBlogs=(Object[])client.call("wp.getUsersBlogs",params);
    if (userBlogs == null) {
      mErrorMsgId=R.string.xmlrpc_error;
      ;
      return null;
    }
    Arrays.sort(userBlogs,Utils.BlogNameComparator);
    List<Map<String,Object>> userBlogList=new ArrayList<Map<String,Object>>();
    for (    Object blog : userBlogs) {
      try {
        userBlogList.add((Map<String,Object>)blog);
      }
 catch (      ClassCastException e) {
        AppLog.e(T.NUX,"invalid data received from XMLRPC call wp.getUsersBlogs");
      }
    }
    return userBlogList;
  }
 catch (  XMLRPCException e) {
    String message=e.getMessage();
    if (message.contains("code 403")) {
      mErrorMsgId=R.string.username_or_password_incorrect;
    }
 else     if (message.contains("404")) {
      mErrorMsgId=R.string.xmlrpc_error;
    }
 else     if (message.contains("425")) {
      mErrorMsgId=R.string.account_two_step_auth_enabled;
    }
 else     if (message.contains("XmlPullParserException")) {
      mErrorMsgId=R.string.xmlrpc_error;
    }
 else {
      mErrorMsgId=R.string.no_site_error;
    }
    return null;
  }
}
