{
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode == RESULT_CANCELED) {
    if (mQuickMediaType >= 0) {
      setResult(Activity.RESULT_CANCELED,new Intent());
      finish();
    }
    if (mFormatBar.getVisibility() == View.VISIBLE)     hideFormatBar();
    return;
  }
  if (data != null || ((requestCode == ACTIVITY_REQUEST_CODE_TAKE_PHOTO || requestCode == ACTIVITY_REQUEST_CODE_TAKE_VIDEO))) {
    Bundle extras;
switch (requestCode) {
case ACTIVITY_REQUEST_CODE_PICTURE_LIBRARY:
      Uri imageUri=data.getData();
    String imgPath=imageUri.toString();
  addMedia(imgPath,imageUri);
break;
case ACTIVITY_REQUEST_CODE_TAKE_PHOTO:
if (resultCode == Activity.RESULT_OK) {
try {
  File f=new File(mMediaCapturePath);
  Uri capturedImageUri=Uri.fromFile(f);
  f=null;
  addMedia(capturedImageUri.toString(),capturedImageUri);
  sendBroadcast(new Intent(Intent.ACTION_MEDIA_MOUNTED,Uri.parse("file://" + Environment.getExternalStorageDirectory())));
}
 catch (Exception e) {
  e.printStackTrace();
}
catch (OutOfMemoryError e) {
  e.printStackTrace();
}
}
break;
case ACTIVITY_REQUEST_CODE_VIDEO_LIBRARY:
Uri videoUri=data.getData();
String videoPath=videoUri.toString();
addMedia(videoPath,videoUri);
break;
case ACTIVITY_REQUEST_CODE_TAKE_VIDEO:
if (resultCode == Activity.RESULT_OK) {
Uri capturedVideo=data.getData();
addMedia(capturedVideo.toString(),capturedVideo);
}
break;
case ACTIVITY_REQUEST_CODE_CREATE_LINK:
try {
extras=data.getExtras();
String linkURL=extras.getString("linkURL");
if (!linkURL.equals("http://") && !linkURL.equals("")) {
if (mSelectionStart > mSelectionEnd) {
int temp=mSelectionEnd;
mSelectionEnd=mSelectionStart;
mSelectionStart=temp;
}
Editable str=mContentEditText.getText();
if (mLocalDraft) {
if (extras.getString("linkText") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkURL);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkURL.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkURL.length());
}
 else {
String linkText=extras.getString("linkText");
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkText);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkText.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkText.length());
}
}
 else {
if (extras.getString("linkText") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML="<a href=\"" + linkURL + "\">"+ linkURL+ "</a>";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
 else {
String linkText=extras.getString("linkText");
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML="<a href=\"" + linkURL + "\">"+ linkText+ "</a>";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
}
}
}
 catch (Exception e) {
e.printStackTrace();
}
break;
case ACTIVITY_REQUEST_CODE_SELECT_CATEGORIES:
extras=data.getExtras();
mCategories=(ArrayList<String>)extras.getSerializable("selectedCategories");
populateSelectedCategories();
break;
}
}
}
