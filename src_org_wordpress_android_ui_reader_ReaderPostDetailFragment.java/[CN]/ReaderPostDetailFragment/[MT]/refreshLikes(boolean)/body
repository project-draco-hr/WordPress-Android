{
  if (!hasActivity())   return;
  if (!hasPost() || !mPost.isWP())   return;
  new Thread(){
    @Override public void run(){
      final ViewGroup container=getContainerView();
      final ImageView imgBtnLike=(ImageView)container.findViewById(R.id.image_like_btn);
      final ViewGroup layoutLikingAvatars=(ViewGroup)mLayoutLikes.findViewById(R.id.layout_liking_avatars);
      final TextView txtLikeCount=(TextView)mLayoutLikes.findViewById(R.id.text_like_count);
      final int marginExtraSmall=getResources().getDimensionPixelSize(R.dimen.margin_extra_small);
      final int marginLarge=getResources().getDimensionPixelSize(R.dimen.margin_large);
      final int likeAvatarSize=getResources().getDimensionPixelSize(R.dimen.avatar_sz_small);
      final int likeAvatarSizeWithMargin=likeAvatarSize + (marginExtraSmall * 2);
      final int displayWidth=DisplayUtils.getDisplayPixelWidth(getActivity());
      final int spaceForAvatars=displayWidth - (marginLarge * 2);
      final int maxAvatars=spaceForAvatars / likeAvatarSizeWithMargin;
      final ArrayList<String> avatars=ReaderUserTable.getAvatarUrls(ReaderLikeTable.getLikesForPost(mPost),maxAvatars);
      mHandler.post(new Runnable(){
        public void run(){
          if (!hasActivity())           return;
          imgBtnLike.setSelected(mPost.isLikedByCurrentUser);
          imgBtnLike.setOnClickListener(new View.OnClickListener(){
            @Override public void onClick(            View view){
              doPostAction(imgBtnLike,ReaderPostActions.PostAction.TOGGLE_LIKE,mPost);
            }
          }
);
          if (avatars.size() == 0 || mPost.numLikes == 0) {
            mLayoutLikes.setVisibility(View.GONE);
            return;
          }
          if (mPost.isLikedByCurrentUser) {
            if (mPost.numLikes == 1) {
              txtLikeCount.setText(R.string.reader_likes_only_you);
            }
 else {
              txtLikeCount.setText(mPost.numLikes == 2 ? getString(R.string.reader_likes_you_and_one) : getString(R.string.reader_likes_you_and_multi,mPost.numLikes - 1));
            }
          }
 else {
            txtLikeCount.setText(mPost.numLikes == 1 ? getString(R.string.reader_likes_one) : getString(R.string.reader_likes_multi,mPost.numLikes));
          }
          View.OnClickListener clickListener=new View.OnClickListener(){
            @Override public void onClick(            View view){
              ReaderActivityLauncher.showReaderLikingUsers(getActivity(),mPost);
            }
          }
;
          mLayoutLikes.setOnClickListener(clickListener);
          if (forceReload || layoutLikingAvatars.getChildCount() < maxAvatars) {
            layoutLikingAvatars.removeAllViews();
            LayoutInflater inflater=getActivity().getLayoutInflater();
            for (            String url : avatars) {
              WPNetworkImageView imgAvatar=(WPNetworkImageView)inflater.inflate(R.layout.reader_like_avatar,layoutLikingAvatars,false);
              layoutLikingAvatars.addView(imgAvatar);
              imgAvatar.setImageUrl(PhotonUtils.fixAvatar(url,likeAvatarSize),WPNetworkImageView.ImageType.AVATAR);
            }
          }
          if (mLayoutLikes.getVisibility() != View.VISIBLE)           mLayoutLikes.setVisibility(View.VISIBLE);
        }
      }
);
    }
  }
.start();
}
