{
  this.mBlogID=blogID;
  this.mPeriod=response.getString("period");
  this.mDate=response.getString("date");
  JSONArray searchTermsArray=null;
  JSONObject jDaysObject=response.getJSONObject("days");
  if (jDaysObject.length() == 0) {
    throw new JSONException("Invalid document returned from the REST API");
  }
  Iterator<String> keys=jDaysObject.keys();
  if (keys.hasNext()) {
    String key=keys.next();
    JSONObject jDateObject=jDaysObject.optJSONObject(key);
    searchTermsArray=null;
    if (jDateObject != null) {
      searchTermsArray=jDateObject.getJSONArray("search_terms");
      this.mEncryptedSearchTerms=jDateObject.optInt("encrypted_search_terms");
      this.mOtherSearchTerms=jDateObject.optInt("other_search_terms");
      this.mTotalSearchTerms=jDateObject.optInt("total_search_terms");
    }
  }
  if (searchTermsArray == null) {
    searchTermsArray=new JSONArray();
  }
  ArrayList<SearchTermModel> list=new ArrayList<>(searchTermsArray.length());
  for (int i=0; i < searchTermsArray.length(); i++) {
    try {
      JSONObject postObject=searchTermsArray.getJSONObject(i);
      String term=postObject.getString("term");
      int total=postObject.getInt("views");
      SearchTermModel currentModel=new SearchTermModel(blogID,mDate,term,total,false);
      list.add(currentModel);
    }
 catch (    JSONException e) {
      AppLog.e(AppLog.T.STATS,"Unexpected SearchTerm object in searchterms array" + "at position " + i + " Response: "+ response.toString(),e);
    }
  }
  this.mSearchTerms=list;
}
