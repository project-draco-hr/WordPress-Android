{
  if (jsonObject == null) {
    if (resultListener != null)     resultListener.onUpdateResult(ReaderActions.UpdateResult.FAILED);
    return;
  }
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      ReaderTopicList serverTopics=new ReaderTopicList();
      serverTopics.addAll(parseTopics(jsonObject,"default",ReaderTopicType.DEFAULT));
      serverTopics.addAll(parseTopics(jsonObject,"subscribed",ReaderTopicType.SUBSCRIBED));
      ReaderTopicList localTopics=new ReaderTopicList();
      localTopics.addAll(ReaderTopicTable.getDefaultTopics());
      localTopics.addAll(ReaderTopicTable.getSubscribedTopics());
      final boolean hasChanges=!localTopics.isSameList(serverTopics);
      if (hasChanges) {
        deleteTopics(localTopics.getDeletions(serverTopics));
        ReaderTopicTable.replaceTopics(serverTopics);
      }
      ReaderTopicList serverRecommended=parseTopics(jsonObject,"recommended",ReaderTopicType.RECOMMENDED);
      ReaderTopicList localRecommended=ReaderTopicTable.getRecommendedTopics(false);
      if (!serverRecommended.isSameList(localRecommended)) {
        ReaderLog.d("recommended topics changed");
        ReaderTopicTable.setRecommendedTopics(serverRecommended);
      }
      if (resultListener != null) {
        handler.post(new Runnable(){
          public void run(){
            resultListener.onUpdateResult(hasChanges ? ReaderActions.UpdateResult.CHANGED : ReaderActions.UpdateResult.UNCHANGED);
          }
        }
);
      }
    }
  }
.start();
}
