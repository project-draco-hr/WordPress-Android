{
  if (!isAdded() || !NetworkUtils.checkConnection(getActivity())) {
    return;
  }
  final Post fullPost=WordPress.wpDB.getPostForLocalTablePostId(post.getPostId());
  if (fullPost == null) {
    ToastUtils.showToast(getActivity(),R.string.post_not_found);
    return;
  }
  mPostsListAdapter.hidePost(post);
  View.OnClickListener undoListener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      mDidUndoTrash=true;
      mPostsListAdapter.unhidePost(post);
    }
  }
;
  String text;
  if (post.isLocalDraft()) {
    text=mIsPage ? getString(R.string.page_deleted) : getString(R.string.post_deleted);
  }
 else {
    text=mIsPage ? getString(R.string.page_trashed) : getString(R.string.post_trashed);
  }
  mDidUndoTrash=false;
  Snackbar.make(getView().findViewById(R.id.coordinator),text,Snackbar.LENGTH_LONG).setAction(R.string.undo,undoListener).show();
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      if (mDidUndoTrash || !isAdded()) {
        return;
      }
      WordPress.wpDB.deletePost(fullPost);
      if (!post.isLocalDraft()) {
        List<Object> apiArgs=new Vector<>();
        apiArgs.add(WordPress.getCurrentBlog());
        apiArgs.add(fullPost.getRemotePostId());
        apiArgs.add(mIsPage);
        new ApiHelper.DeleteSinglePostTask().execute(apiArgs);
      }
    }
  }
,Constants.SNACKBAR_LONG_DURATION_MS);
}
