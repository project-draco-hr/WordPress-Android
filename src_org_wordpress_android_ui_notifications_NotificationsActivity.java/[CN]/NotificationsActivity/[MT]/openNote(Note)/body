{
  if (note == null || isFinishing())   return;
  if (note.isUnread()) {
    getRestClientUtils().markNoteAsRead(note,new RestRequest.Listener(){
      @Override public void onResponse(      JSONObject response){
        if (isFinishing())         return;
        final NotesAdapter notesAdapter=mNotesList.getNotesAdapter();
        note.setUnreadCount("0");
        if (notesAdapter.getPosition(note) < 0) {
          for (int i=0; i < notesAdapter.getCount(); i++) {
            Note item=notesAdapter.getItem(i);
            if (item.getId().equals(note.getId())) {
              item.setUnreadCount("0");
              break;
            }
          }
        }
        WordPress.wpDB.addNote(note,false);
        notesAdapter.notifyDataSetChanged();
      }
    }
,new RestRequest.ErrorListener(){
      @Override public void onErrorResponse(      VolleyError error){
        AppLog.d(T.NOTIFS,String.format("Failed to mark as read %s",error));
      }
    }
);
  }
  FragmentManager fm=getSupportFragmentManager();
  if (fm.getBackStackEntryCount() > 0) {
    fm.popBackStack();
  }
  Fragment detailFragment=getDetailFragmentForNote(note);
  if (detailFragment == null) {
    AppLog.d(T.NOTIFS,String.format("No fragment found for %s",note.toJSONObject()));
    return;
  }
  Intent intent=getIntent();
  if (intent.hasExtra(NOTE_ID_EXTRA) && intent.getStringExtra(NOTE_ID_EXTRA).equals(note.getId())) {
    if (intent.hasExtra(NOTE_REPLY_EXTRA) || intent.hasExtra(NOTE_INSTANT_REPLY_EXTRA)) {
      detailFragment.setArguments(intent.getExtras());
    }
  }
  ((NotificationFragment)detailFragment).setNote(note);
  FragmentTransaction ft=fm.beginTransaction();
  ft.replace(R.id.layout_fragment_container,detailFragment);
  ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
  View container=findViewById(R.id.layout_fragment_container);
  if (container.findViewById(R.id.fragment_notes_list) != null) {
    mMenuDrawer.setDrawerIndicatorEnabled(false);
    ft.addToBackStack(null);
    if (mNotesList != null)     ft.hide(mNotesList);
  }
  ft.commitAllowingStateLoss();
}
