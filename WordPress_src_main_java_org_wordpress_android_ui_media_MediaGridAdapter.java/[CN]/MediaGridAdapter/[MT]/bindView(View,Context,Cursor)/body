{
  int itemViewType=getItemViewType(cursor.getPosition());
  if (itemViewType == ViewTypes.PROGRESS.ordinal()) {
    if (mIsRefreshing) {
      int height=mContext.getResources().getDimensionPixelSize(R.dimen.media_grid_progress_height);
      view.setLayoutParams(new GridView.LayoutParams(GridView.LayoutParams.MATCH_PARENT,height));
      view.setVisibility(View.VISIBLE);
    }
 else {
      view.setLayoutParams(new GridView.LayoutParams(0,0));
      view.setVisibility(View.GONE);
    }
    return;
  }
 else   if (itemViewType == ViewTypes.SPACER.ordinal()) {
    CheckableFrameLayout frameLayout=(CheckableFrameLayout)view.findViewById(R.id.media_grid_frame_layout);
    updateGridWidth(context,frameLayout);
    view.setVisibility(View.INVISIBLE);
    return;
  }
  final GridViewHolder holder;
  if (view.getTag() instanceof GridViewHolder) {
    holder=(GridViewHolder)view.getTag();
  }
 else {
    holder=new GridViewHolder(view);
    view.setTag(holder);
  }
  final String mediaId=cursor.getString(cursor.getColumnIndex("mediaId"));
  String state=cursor.getString(cursor.getColumnIndex("uploadState"));
  boolean isLocalFile=MediaUtils.isLocalFile(state);
  String fileName=cursor.getString(cursor.getColumnIndex("fileName"));
  if (holder.filenameView != null) {
    holder.filenameView.setText(fileName);
  }
  String title=cursor.getString(cursor.getColumnIndex("title"));
  if (title == null || title.equals(""))   title=fileName;
  holder.titleView.setText(title);
  if (holder.uploadDateView != null) {
    String date=MediaUtils.getDate(cursor.getLong(cursor.getColumnIndex("date_created_gmt")));
    holder.uploadDateView.setText(date);
  }
  if (isLocalFile) {
    loadLocalImage(cursor,holder.imageView);
  }
 else {
    loadNetworkImage(cursor,(NetworkImageView)holder.imageView);
  }
  String mimeType=cursor.getString(cursor.getColumnIndex("mimeType"));
  String fileExtension=MediaUtils.getExtensionForMimeType(mimeType);
  fileExtension=fileExtension.toUpperCase();
  if (DisplayUtils.isXLarge(context) && !TextUtils.isEmpty(fileExtension)) {
    holder.fileTypeView.setText("File type: " + fileExtension);
  }
 else {
    holder.fileTypeView.setText(fileExtension);
  }
  String filePath=cursor.getString(cursor.getColumnIndex("fileURL"));
  TextView dimensionView=(TextView)view.findViewById(R.id.media_grid_item_dimension);
  if (dimensionView != null) {
    if (MediaUtils.isValidImage(filePath)) {
      int width=cursor.getInt(cursor.getColumnIndex("width"));
      int height=cursor.getInt(cursor.getColumnIndex("height"));
      if (width > 0 && height > 0) {
        String dimensions=width + "x" + height;
        holder.dimensionView.setText(dimensions);
        holder.dimensionView.setVisibility(View.VISIBLE);
      }
    }
 else {
      holder.dimensionView.setVisibility(View.GONE);
    }
  }
  holder.frameLayout.setTag(mediaId);
  holder.frameLayout.setChecked(mSelectedItems.contains(mediaId));
  updateGridWidth(context,holder.frameLayout);
  if (holder.stateTextView != null) {
    if (state != null && state.length() > 0) {
      if (state.equals("uploading")) {
        holder.progressUpload.setVisibility(View.VISIBLE);
      }
 else {
        holder.progressUpload.setVisibility(View.GONE);
      }
      if (state.equals("failed")) {
        state="retry";
        holder.stateTextView.setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View v){
            if (!inMultiSelect()) {
              ((TextView)v).setText("queued");
              v.setOnClickListener(null);
              mCallback.onRetryUpload(mediaId);
            }
          }
        }
);
      }
      holder.stateTextView.setText(state);
      holder.uploadStateView.setVisibility(View.VISIBLE);
    }
 else {
      holder.uploadStateView.setVisibility(View.GONE);
    }
  }
  int position=cursor.getPosition();
  if (position == mCursorDataCount - 1 && !mHasRetrievedAll) {
    if (mCallback != null) {
      mCallback.fetchMoreData(mCursorDataCount);
    }
  }
}
