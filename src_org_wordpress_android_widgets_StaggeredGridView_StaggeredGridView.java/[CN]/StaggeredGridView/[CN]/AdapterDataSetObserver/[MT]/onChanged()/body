{
  int lastCount=mItemCount;
  mItemCount=mAdapter.getCount();
  if (lazyload && mAdapter.isEmpty())   lazyload=false;
  if (lazyload) {
    if (lastCount != mItemCount) {
      removeView(getChildAt(getChildCount() - 1));
      final int childCount=getChildCount();
      if (childCount > 0) {
        Arrays.fill(mItemTops,Integer.MAX_VALUE);
        Arrays.fill(mItemBottoms,Integer.MIN_VALUE);
        for (int i=0; i < childCount; i++) {
          final View child=getChildAt(i);
          final LayoutParams lp=(LayoutParams)child.getLayoutParams();
          final int top=child.getTop() - mItemMargin;
          final int bottom=child.getBottom();
          final LayoutRecord rec=mLayoutRecords.get(mFirstPosition + i);
          final int colEnd=Math.min(mColCount,lp.column + lp.span);
          for (int col=lp.column; col < colEnd; col++) {
            final int colTop=top;
            final int colBottom=bottom;
            if (colTop < mItemTops[col]) {
              mItemTops[col]=colTop;
            }
            if (colBottom > mItemBottoms[col]) {
              mItemBottoms[col]=colBottom;
            }
          }
        }
        for (int col=0; col < mColCount; col++) {
          if (mItemTops[col] == Integer.MAX_VALUE) {
            mItemTops[col]=0;
            mItemBottoms[col]=0;
          }
        }
      }
      loadlock=false;
    }
  }
 else {
    mDataChanged=true;
    mRecycler.clearTransientViews();
    if (!mHasStableIds) {
      mLayoutRecords.clear();
      recycleAllViews();
      final int colCount=mColCount;
      for (int i=0; i < colCount; i++) {
        mItemBottoms[i]=mItemTops[i];
      }
    }
    if (mFirstPosition > mItemCount - 1 || mAdapter.getItemId(mFirstPosition) != mFirstAdapterId) {
      mFirstPosition=0;
      Arrays.fill(mItemTops,0);
      Arrays.fill(mItemBottoms,0);
      if (mRestoreOffsets != null)       Arrays.fill(mRestoreOffsets,0);
    }
    loadlock=false;
  }
  requestLayout();
}
