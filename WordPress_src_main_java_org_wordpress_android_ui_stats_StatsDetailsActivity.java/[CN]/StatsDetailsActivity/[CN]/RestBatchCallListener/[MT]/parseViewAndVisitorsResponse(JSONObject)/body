{
  mVisitorsCount=0;
  mViewsPerVisitor=0;
  mViewsPerVisitor=0f;
  if (!response.has(mViewAndVisitorsPath)) {
    return;
  }
  try {
    final JSONObject currentJsonObject=response.getJSONObject(mViewAndVisitorsPath);
    if (isSingleCallResponseError(mViewAndVisitorsPath,currentJsonObject)) {
      return;
    }
    int visitors=0;
    int views=0;
    JSONArray data=currentJsonObject.getJSONArray("data");
    JSONArray fields=currentJsonObject.getJSONArray("fields");
    if (data.length() == 0) {
      return;
    }
    JSONArray dataPositionZero=data.getJSONArray(0);
    if (dataPositionZero.length() != fields.length()) {
      return;
    }
    for (int i=0; i < fields.length(); i++) {
      if (fields.get(i).toString().equalsIgnoreCase("views")) {
        views=Integer.parseInt(dataPositionZero.get(i).toString());
      }
      if (fields.get(i).toString().equalsIgnoreCase("visitors")) {
        visitors=Integer.parseInt(dataPositionZero.get(i).toString());
      }
    }
    if (visitors == 0) {
      visitors=1;
    }
    if (views == 0) {
      mVisitorsCount=0;
      mViewsPerVisitor=0;
      mViewsPerVisitor=0f;
    }
 else {
      mViewsCount=views;
      mVisitorsCount=visitors;
      mViewsPerVisitor=((float)views) / visitors;
    }
  }
 catch (  JSONException e) {
    logSingleCallError(mViewAndVisitorsPath,e);
  }
}
