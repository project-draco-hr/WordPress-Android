{
  CommentList comments=new CommentList();
  if (commentMap == null || commentMap.size() == 0)   return comments;
  String author, postID, commentContent, dateCreatedFormatted, status, authorEmail, authorURL, postTitle;
  int commentID;
  for (int i=0; i < commentMap.size(); i++) {
    Map<String,Object> contentHash=commentMap.get(i);
    commentID=(Integer)contentHash.get("commentID");
    postID=contentHash.get("postID").toString();
    commentContent=contentHash.get("comment").toString();
    dateCreatedFormatted=contentHash.get("commentDateFormatted").toString();
    status=contentHash.get("status").toString();
    author=StringUtils.unescapeHTML(contentHash.get("author").toString());
    authorEmail=StringUtils.unescapeHTML(contentHash.get("email").toString());
    authorURL=StringUtils.unescapeHTML(contentHash.get("url").toString());
    postTitle=StringUtils.unescapeHTML(contentHash.get("postTitle").toString());
    comments.add(new Comment(postID,commentID,i,author,dateCreatedFormatted,commentContent,status,postTitle,authorURL,authorEmail,GravatarUtils.gravatarUrlFromEmail(authorEmail,140)));
  }
  return comments;
}
