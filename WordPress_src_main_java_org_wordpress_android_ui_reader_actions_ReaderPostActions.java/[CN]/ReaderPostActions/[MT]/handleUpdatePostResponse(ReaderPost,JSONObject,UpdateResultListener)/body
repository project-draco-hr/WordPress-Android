{
  if (jsonObject == null) {
    if (resultListener != null) {
      resultListener.onUpdateResult(UpdateResult.FAILED);
    }
    return;
  }
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      ReaderPost serverPost=ReaderPost.fromJson(jsonObject);
      if (serverPost.feedId == 0 && localPost.feedId != 0) {
        serverPost.feedId=localPost.feedId;
        serverPost.feedItemId=localPost.feedItemId;
        serverPost.isFollowedByCurrentUser=localPost.isFollowedByCurrentUser;
      }
      boolean hasChanges=!serverPost.isSamePost(localPost);
      if (hasChanges) {
        AppLog.d(T.READER,"post updated");
        localPost.numReplies=serverPost.numReplies;
        localPost.numLikes=serverPost.numLikes;
        localPost.isFollowedByCurrentUser=serverPost.isFollowedByCurrentUser;
        localPost.isLikedByCurrentUser=serverPost.isLikedByCurrentUser;
        localPost.isCommentsOpen=serverPost.isCommentsOpen;
        localPost.setTitle(serverPost.getTitle());
        localPost.setText(serverPost.getText());
        ReaderPostTable.addOrUpdatePost(localPost);
      }
      if (handlePostLikes(serverPost,jsonObject)) {
        hasChanges=true;
      }
      if (resultListener != null) {
        final UpdateResult result=(hasChanges ? UpdateResult.CHANGED : UpdateResult.UNCHANGED);
        handler.post(new Runnable(){
          public void run(){
            resultListener.onUpdateResult(result);
          }
        }
);
      }
    }
  }
.start();
}
