{
  if (jsonObject == null) {
    if (resultListener != null) {
      resultListener.onUpdateResult(ReaderActions.UpdateResult.FAILED);
    }
    return;
  }
  final Handler handler=new Handler();
  new Thread(){
    @Override public void run(){
      ReaderPost updatedPost=ReaderPost.fromJson(jsonObject);
      final boolean hasChanges=(updatedPost.numReplies != originalPost.numReplies || updatedPost.numLikes != originalPost.numLikes || updatedPost.isCommentsOpen != originalPost.isCommentsOpen || updatedPost.isLikedByCurrentUser != originalPost.isLikedByCurrentUser || updatedPost.isFollowedByCurrentUser != originalPost.isFollowedByCurrentUser);
      if (hasChanges) {
        AppLog.d(T.READER,"post updated");
        if (originalPost.hasFeaturedImage()) {
          updatedPost.setFeaturedImage(originalPost.getFeaturedImage());
        }
        if (originalPost.hasFeaturedVideo()) {
          updatedPost.setFeaturedVideo(originalPost.getFeaturedVideo());
          updatedPost.isVideoPress=originalPost.isVideoPress;
        }
        updatedPost.timestamp=originalPost.timestamp;
        updatedPost.setPublished(originalPost.getPublished());
        ReaderPostTable.addOrUpdatePost(updatedPost);
      }
      handlePostLikes(updatedPost,jsonObject);
      if (resultListener != null) {
        handler.post(new Runnable(){
          public void run(){
            resultListener.onUpdateResult(hasChanges ? ReaderActions.UpdateResult.CHANGED : ReaderActions.UpdateResult.UNCHANGED);
          }
        }
);
      }
    }
  }
.start();
}
