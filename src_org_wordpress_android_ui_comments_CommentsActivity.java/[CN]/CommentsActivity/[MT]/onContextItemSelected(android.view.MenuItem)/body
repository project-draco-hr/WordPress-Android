{
  if (item.getItemId() == CommentsListFragment.MENU_ID_EDIT) {
    Intent i=new Intent(getApplicationContext(),EditCommentActivity.class);
    startActivityForResult(i,0);
    return true;
  }
 else   if (item.getItemId() == CommentsListFragment.MENU_ID_DELETE) {
    showDialog(ID_DIALOG_DELETING);
    CommentActions.deleteComment(WordPress.currentBlog,WordPress.getCurrentBlogId(),WordPress.currentComment,new CommentActions.CommentActionListener(){
      @Override public void onActionResult(      boolean succeeded){
        dismissDialog(ID_DIALOG_DELETING);
        if (succeeded) {
          commentList.refreshComments();
          ToastUtils.showToast(CommentsActivity.this,getString(R.string.comment_moderated));
        }
 else {
          ToastUtils.showToast(CommentsActivity.this,getString(R.string.error_moderate_comment));
        }
      }
    }
);
    return true;
  }
 else {
    showDialog(ID_DIALOG_MODERATING);
    final CommentStatus status;
switch (item.getItemId()) {
case CommentsListFragment.MENU_ID_APPROVED:
      status=CommentStatus.APPROVED;
    break;
case CommentsListFragment.MENU_ID_UNAPPROVED:
  status=CommentStatus.UNAPPROVED;
break;
case CommentsListFragment.MENU_ID_SPAM:
status=CommentStatus.SPAM;
break;
default :
return true;
}
CommentActions.moderateComment(WordPress.currentBlog,WordPress.currentComment,status,new CommentActions.CommentActionListener(){
@Override public void onActionResult(boolean succeeded){
dismissDialog(ID_DIALOG_MODERATING);
if (succeeded) {
commentList.refreshComments();
ToastUtils.showToast(CommentsActivity.this,getString(R.string.comment_moderated));
}
 else {
ToastUtils.showToast(CommentsActivity.this,getString(R.string.error_moderate_comment));
}
}
}
);
return true;
}
}
