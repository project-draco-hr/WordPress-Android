{
  String prefix=getString(R.string.stats_for);
switch (timeframe) {
case DAY:
    return String.format(prefix,StatsUtils.parseDate(date,StatsConstants.STATS_INPUT_DATE_FORMAT,StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_DAY_SHORT_FORMAT));
case WEEK:
  try {
    SimpleDateFormat sdf;
    Calendar c;
    final Date parsedDate;
    sdf=new SimpleDateFormat("yyyy'W'MM'W'dd");
    parsedDate=sdf.parse(date);
    c=Calendar.getInstance();
    c.setFirstDayOfWeek(Calendar.MONDAY);
    c.setTime(parsedDate);
    c.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);
    String startDateLabel=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_DAY_LONG_FORMAT);
    c.add(Calendar.DAY_OF_WEEK,+6);
    String endDateLabel=StatsUtils.msToString(c.getTimeInMillis(),StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_DAY_LONG_FORMAT);
    return String.format(prefix,startDateLabel + " - " + endDateLabel);
  }
 catch (  ParseException e) {
    AppLog.e(AppLog.T.UTILS,e);
    return "";
  }
case MONTH:
return String.format(prefix,StatsUtils.parseDate(date,StatsConstants.STATS_INPUT_DATE_FORMAT,StatsConstants.STATS_OUTPUT_DATE_MONTH_LONG_FORMAT));
case YEAR:
return String.format(prefix,StatsUtils.parseDate(date,StatsConstants.STATS_INPUT_DATE_FORMAT,StatsConstants.STATS_OUTPUT_DATE_YEAR_FORMAT));
}
return "";
}
