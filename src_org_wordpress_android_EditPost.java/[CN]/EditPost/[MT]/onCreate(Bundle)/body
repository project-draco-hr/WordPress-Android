{
  super.onCreate(icicle);
  Bundle extras=getIntent().getExtras();
  categories=new JSONArray();
  if (extras != null) {
    id=extras.getInt("id");
    blog=new Blog(id,this);
    accountName=EscapeUtils.unescapeHtml(extras.getString("accountName"));
    postID=extras.getLong("postID");
    localDraft=extras.getBoolean("localDraft",false);
    isPage=extras.getBoolean("isPage",false);
    isNew=extras.getBoolean("isNew",false);
    setText=extras.getString("setText");
    option=extras.getString("option");
    if (!isNew)     post=new Post(id,postID,isPage,this);
  }
  Display display=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (height > width) {
    width=height;
  }
  if (width > 480) {
    isLargeScreen=true;
  }
  if (isPage) {
    setContentView(R.layout.edit_page);
  }
 else {
    setContentView(R.layout.edit);
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
  Spinner spinner=(Spinner)findViewById(R.id.status);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  spinner.setAdapter(adapter);
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    isAction=true;
    isNew=true;
    WordPressDB settingsDB=new WordPressDB(this);
    Vector<?> accounts=settingsDB.getAccounts(this);
    if (accounts.size() > 0) {
      final String blogNames[]=new String[accounts.size()];
      final int accountIDs[]=new int[accounts.size()];
      for (int i=0; i < accounts.size(); i++) {
        HashMap<?,?> curHash=(HashMap<?,?>)accounts.get(i);
        try {
          blogNames[i]=EscapeUtils.unescapeHtml(curHash.get("blogName").toString());
        }
 catch (        Exception e) {
          blogNames[i]="(No Blog Title)";
        }
        accountIDs[i]=(Integer)curHash.get("id");
      }
      if (accounts.size() != 1) {
        AlertDialog.Builder builder=new AlertDialog.Builder(this);
        builder.setTitle(getResources().getText(R.string.select_a_blog));
        builder.setItems(blogNames,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int item){
            id=accountIDs[item];
            accountName=blogNames[item];
            setTitle(accountName + " - " + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
            setContent();
            lbsCheck();
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
 else {
        id=accountIDs[0];
        accountName=blogNames[0];
        setTitle(accountName + " - " + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
        setContent();
      }
    }
 else {
      Intent i=new Intent(this,wpAndroid.class);
      Toast.makeText(getApplicationContext(),getResources().getText(R.string.no_account),Toast.LENGTH_LONG).show();
      startActivity(i);
      finish();
    }
  }
 else {
    selectedImageIDs.clear();
    selectedImageCtr=0;
    if (!isPage) {
      lbsCheck();
    }
  }
  if (isNew) {
    setTitle(accountName + " - " + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
  }
 else {
    setTitle(accountName + " - " + getResources().getText((isPage) ? R.string.edit_page : R.string.edit_post));
  }
  if (isNew) {
    if (!isAction) {
      if (!isPage) {
        enableLBSButtons();
      }
    }
  }
 else {
    if (post.isUploaded()) {
      Button uploadNowButton=(Button)findViewById(R.id.cancel);
      uploadNowButton.setVisibility(View.GONE);
    }
    EditText titleET=(EditText)findViewById(R.id.title);
    EditText contentET=(EditText)findViewById(R.id.content);
    EditText passwordET=(EditText)findViewById(R.id.post_password);
    titleET.setText(post.getTitle());
    contentET.setText(Html.fromHtml(post.getDescription() + post.getMt_text_more()));
    long pubDate=post.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        Date date=new Date(pubDate);
        SimpleDateFormat sdf=new SimpleDateFormat("MMM dd, yyyy 'at' hh:mm a");
        String sPubDate=sdf.format(date);
        TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
        tvPubDate.setText(sPubDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (post.getWP_password() != null)     passwordET.setText(post.getWP_password());
    if (post.getPost_status() != null) {
      String status=post.getPost_status();
      if (status.equals("publish")) {
        spinner.setSelection(0,true);
      }
 else       if (status.equals("draft")) {
        spinner.setSelection(1,true);
      }
 else       if (status.equals("pending")) {
        spinner.setSelection(2,true);
      }
 else       if (status.equals("private")) {
        spinner.setSelection(3,true);
      }
    }
    String picturePaths=post.getMediaPaths();
    if (!picturePaths.equals("")) {
      String[] pPaths=picturePaths.split(",");
      for (int i=0; i < pPaths.length; i++) {
        Uri imagePath=Uri.parse(pPaths[i]);
        addMedia(imagePath.getEncodedPath(),imagePath);
      }
    }
    if (!isPage) {
      if (post.getCategories() != null) {
        categories=post.getCategories();
        if (!categories.equals("")) {
          for (int i=0; i < categories.length(); i++) {
            try {
              selectedCategories.add(categories.getString(i));
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
          }
          TextView tvCategories=(TextView)findViewById(R.id.selectedCategories);
          tvCategories.setText(getResources().getText(R.string.selected_categories) + " " + getCategoriesCSV());
        }
      }
    }
    if (blog.isLocation()) {
      enableLBSButtons();
    }
    Double latitude=post.getLatitude();
    Double longitude=post.getLongitude();
    if (latitude != 0.0) {
      new getAddressTask().execute(latitude,longitude);
    }
    if (blog.isLocation() && latitude > 0) {
      Button updateLocation=(Button)findViewById(R.id.updateLocation);
      updateLocation.setOnClickListener(new Button.OnClickListener(){
        public void onClick(        View v){
          lm=(LocationManager)getSystemService(LOCATION_SERVICE);
          lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
          lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
          locationActive=true;
        }
      }
);
      RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
      locationSection.setVisibility(View.VISIBLE);
    }
 else     if (blog.isLocation()) {
      lm=(LocationManager)getSystemService(LOCATION_SERVICE);
      lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
      lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
      locationActive=true;
      RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
      locationSection.setVisibility(View.VISIBLE);
    }
    String tags=post.getMt_keywords();
    if (!tags.equals("")) {
      EditText tagsET=(EditText)findViewById(R.id.tags);
      tagsET.setText(tags);
    }
  }
  if (!isPage) {
    Button selectCategories=(Button)findViewById(R.id.selectCategories);
    selectCategories.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        Bundle bundle=new Bundle();
        bundle.putInt("id",id);
        if (categories.length() > 0) {
          bundle.putString("categoriesCSV",getCategoriesCSV());
        }
        Intent i=new Intent(EditPost.this,SelectCategories.class);
        i.putExtras(bundle);
        startActivityForResult(i,5);
      }
    }
);
  }
  final Button fullScreen=(Button)findViewById(R.id.fullscreen);
  fullScreen.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(EditPost.this,Write.class);
      i.putExtra("accountName",accountName);
      i.putExtra("setText",setText);
      i.putExtra("id",id);
      i.putExtra("isNew",true);
      startActivityForResult(i,0);
      finish();
    }
  }
);
  final Button saveButton=(Button)findViewById(R.id.post);
  saveButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      boolean result=savePost();
      if (result) {
        if (post.isUploaded())         post.upload();
        finish();
      }
    }
  }
);
  final Button uploadNowButton=(Button)findViewById(R.id.cancel);
  uploadNowButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      boolean result=savePost();
      post.upload();
      if (result) {
        Bundle bundle=new Bundle();
        if (isAction) {
          Intent mIntent=new Intent(EditPost.this,Dashboard.class);
          mIntent.putExtras(bundle);
          startActivity(mIntent);
        }
        finish();
      }
    }
  }
);
  final Button addPictureButton=(Button)findViewById(R.id.addPictureButton);
  registerForContextMenu(addPictureButton);
  addPictureButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      addPictureButton.performLongClick();
    }
  }
);
  final EditText contentEdit=(EditText)findViewById(R.id.content);
  contentEdit.addTextChangedListener(new TextWatcher(){
    public void afterTextChanged(    Editable s){
      if (localDraft || isNew) {
        ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
        ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
        ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
        ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
        ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
        int position=Selection.getSelectionStart(contentEdit.getText());
        if (position < 0) {
          position=0;
        }
        if (position > 0) {
          if (styleStart > position || position > (cursorLoc + 1)) {
            if (position - cursorLoc > 1) {
              styleStart=cursorLoc;
            }
 else {
              styleStart=position - 1;
            }
          }
          if (boldButton.isChecked()) {
            StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
            for (int i=0; i < ss.length; i++) {
              if (ss[i].getStyle() == android.graphics.Typeface.BOLD) {
                s.removeSpan(ss[i]);
              }
            }
            s.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),styleStart,position,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
          }
          if (emButton.isChecked()) {
            StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
            for (int i=0; i < ss.length; i++) {
              if (ss[i].getStyle() == android.graphics.Typeface.ITALIC) {
                s.removeSpan(ss[i]);
              }
            }
            s.setSpan(new StyleSpan(android.graphics.Typeface.ITALIC),styleStart,position,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
          }
          if (bquoteButton.isChecked()) {
            QuoteSpan[] ss=s.getSpans(styleStart,position,QuoteSpan.class);
            for (int i=0; i < ss.length; i++) {
              s.removeSpan(ss[i]);
            }
            s.setSpan(new QuoteSpan(),styleStart,position,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
          }
          if (underlineButton.isChecked()) {
            UnderlineSpan[] ss=s.getSpans(styleStart,position,UnderlineSpan.class);
            for (int i=0; i < ss.length; i++) {
              s.removeSpan(ss[i]);
            }
            s.setSpan(new UnderlineSpan(),styleStart,position,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
          }
          if (strikeButton.isChecked()) {
            StrikethroughSpan[] ss=s.getSpans(styleStart,position,StrikethroughSpan.class);
            for (int i=0; i < ss.length; i++) {
              s.removeSpan(ss[i]);
            }
            s.setSpan(new StrikethroughSpan(),styleStart,position,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
          }
        }
        cursorLoc=Selection.getSelectionStart(contentEdit.getText());
      }
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  final ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
  boldButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(boldButton,"strong");
    }
  }
);
  final Button linkButton=(Button)findViewById(R.id.link);
  linkButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      TextView contentText=(TextView)findViewById(R.id.content);
      int selectionStart=contentText.getSelectionStart();
      styleStart=selectionStart;
      int selectionEnd=contentText.getSelectionEnd();
      if (selectionStart > selectionEnd) {
        int temp=selectionEnd;
        selectionEnd=selectionStart;
        selectionStart=temp;
      }
      if (selectionStart == -1 || selectionStart == contentText.getText().toString().length() || (selectionStart == selectionEnd)) {
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(EditPost.this);
        dialogBuilder.setTitle(getResources().getText(R.string.no_text_selected));
        dialogBuilder.setMessage(getResources().getText(R.string.select_text_to_link) + " " + getResources().getText(R.string.howto_select_text));
        dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        dialogBuilder.create().show();
      }
 else {
        Intent i=new Intent(EditPost.this,Link.class);
        startActivityForResult(i,2);
      }
    }
  }
);
  final ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
  emButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(emButton,"em");
    }
  }
);
  final ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
  underlineButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(underlineButton,"u");
    }
  }
);
  final ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
  strikeButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(strikeButton,"strike");
    }
  }
);
  final ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
  bquoteButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(bquoteButton,"blockquote");
    }
  }
);
  final Button clearPictureButton=(Button)findViewById(R.id.clearPicture);
  clearPictureButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      imageUrl.clear();
      thumbnailUrl.clear();
      selectedImageIDs=new Vector<Uri>();
      selectedImageCtr=0;
      imgThumbs.clear();
      Gallery gallery=(Gallery)findViewById(R.id.gallery);
      gallery.setVisibility(View.GONE);
      gallery.setAdapter(null);
      clearPictureButton.setVisibility(View.GONE);
    }
  }
);
  Button pubDate=(Button)findViewById(R.id.pubDateButton);
  pubDate.setOnClickListener(new TextView.OnClickListener(){
    public void onClick(    View v){
      Calendar c=Calendar.getInstance();
      mYear=c.get(Calendar.YEAR);
      mMonth=c.get(Calendar.MONTH);
      mDay=c.get(Calendar.DAY_OF_MONTH);
      mHour=c.get(Calendar.HOUR_OF_DAY);
      mMinute=c.get(Calendar.MINUTE);
      showDialog(ID_DIALOG_DATE);
    }
  }
);
}
