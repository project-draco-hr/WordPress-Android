{
  boolean returnValue=false;
  HashMap<?,?> firstHash=(HashMap<?,?>)commentValues.get(0);
  String blogID=firstHash.get("blogID").toString();
  try {
    db.delete(COMMENTS_TABLE,"blogID=" + blogID,null);
  }
 catch (  Exception e) {
    return false;
  }
  for (int i=0; i < commentValues.size(); i++) {
    try {
      ContentValues values=new ContentValues();
      HashMap<?,?> thisHash=(HashMap<?,?>)commentValues.get(i);
      values.put("blogID",thisHash.get("blogID").toString());
      values.put("postID",thisHash.get("postID").toString());
      values.put("iCommentID",thisHash.get("commentID").toString());
      values.put("author",thisHash.get("author").toString());
      values.put("comment",thisHash.get("comment").toString());
      values.put("commentDate",thisHash.get("commentDate").toString());
      values.put("commentDateFormatted",thisHash.get("commentDateFormatted").toString());
      values.put("status",thisHash.get("status").toString());
      values.put("url",thisHash.get("url").toString());
      values.put("email",thisHash.get("email").toString());
      values.put("postTitle",thisHash.get("postTitle").toString());
synchronized (this) {
        try {
          returnValue=db.insert(COMMENTS_TABLE,null,values) > 0;
        }
 catch (        Exception e) {
          return false;
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return (returnValue);
}
