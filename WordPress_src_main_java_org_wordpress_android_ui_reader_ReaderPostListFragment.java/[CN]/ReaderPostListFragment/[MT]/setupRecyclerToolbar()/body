{
  Menu menu=mRecyclerView.addToolbarMenu(R.menu.reader_list);
  mSettingsMenuItem=menu.findItem(R.id.menu_settings);
  mSearchMenuItem=menu.findItem(R.id.menu_search);
  mSettingsMenuItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      ReaderActivityLauncher.showReaderSubs(getActivity());
      return true;
    }
  }
);
  mSearchView=(SearchView)mSearchMenuItem.getActionView();
  mSearchView.setQueryHint(getString(R.string.reader_hint_post_search));
  mSearchView.setSubmitButtonEnabled(false);
  mSearchView.setIconifiedByDefault(true);
  mSearchView.setIconified(true);
  View view=mSearchView.findViewById(android.support.v7.appcompat.R.id.search_src_text);
  if (view instanceof AutoCompleteTextView) {
    ((AutoCompleteTextView)view).setThreshold(1);
  }
  MenuItemCompat.setOnActionExpandListener(mSearchMenuItem,new MenuItemCompat.OnActionExpandListener(){
    @Override public boolean onMenuItemActionExpand(    MenuItem item){
      mSettingsMenuItem.setVisible(false);
      return true;
    }
    @Override public boolean onMenuItemActionCollapse(    MenuItem item){
      hideSearchMessage();
      resetSearchSuggestionAdapter();
      mCurrentSearchQuery=null;
      mSettingsMenuItem.setVisible(true);
      resetPostAdapter(ReaderPostListType.TAG_FOLLOWED);
      return true;
    }
  }
);
  mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String query){
      submitSearchQuery(query);
      return true;
    }
    @Override public boolean onQueryTextChange(    String newText){
      if (TextUtils.isEmpty(newText)) {
        showSearchMessage();
      }
 else {
        populateSearchSuggestionAdapter(newText);
      }
      return true;
    }
  }
);
}
