{
  if (!isAdded())   return;
  Toolbar toolbar=(Toolbar)rootView.findViewById(R.id.toolbar_reader);
  toolbar.setVisibility(View.VISIBLE);
  toolbar.inflateMenu(R.menu.reader_menu);
  toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
switch (item.getItemId()) {
case R.id.menu_tags:
        ReaderActivityLauncher.showReaderSubsForResult(getActivity());
      return true;
default :
    return false;
}
}
}
);
mSpinner=(Spinner)toolbar.findViewById(R.id.reader_spinner);
mSpinner.setAdapter(getSpinnerAdapter());
mSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
final ReaderTag tag=(ReaderTag)getSpinnerAdapter().getItem(position);
if (tag == null) {
  return;
}
if (!isCurrentTag(tag)) {
  Map<String,String> properties=new HashMap<>();
  properties.put("tag",tag.getTagName());
  AnalyticsTracker.track(AnalyticsTracker.Stat.READER_LOADED_TAG,properties);
  if (tag.getTagName().equals(ReaderTag.TAG_NAME_FRESHLY_PRESSED)) {
    AnalyticsTracker.track(AnalyticsTracker.Stat.READER_LOADED_FRESHLY_PRESSED);
  }
}
setCurrentTag(tag,true);
AppLog.d(T.READER,String.format("reader post list > tag %s displayed",tag.getTagNameForLog()));
}
@Override public void onNothingSelected(AdapterView<?> parent){
}
}
);
}
