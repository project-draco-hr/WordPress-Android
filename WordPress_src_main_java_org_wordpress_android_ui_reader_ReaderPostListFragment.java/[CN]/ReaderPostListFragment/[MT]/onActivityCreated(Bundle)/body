{
  super.onActivityCreated(savedInstanceState);
  if (hasFragmentToolbar()) {
    final Toolbar toolbar=(Toolbar)getActivity().findViewById(R.id.toolbar_reader);
    toolbar.setVisibility(View.VISIBLE);
    toolbar.inflateMenu(R.menu.reader_list);
    toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener(){
      @Override public boolean onMenuItemClick(      MenuItem menuItem){
        if (menuItem.getItemId() == R.id.menu_tags) {
          ReaderActivityLauncher.showReaderSubsForResult(getActivity());
          return true;
        }
        return false;
      }
    }
);
    mRecyclerView.setOnScrollListener(new ReaderScrollListener(getActivity()){
      @Override public void onMoved(      int distance){
        toolbar.setTranslationY(-distance);
      }
    }
);
    if (mSpinner == null) {
      enableTagSpinner(toolbar);
    }
    selectTagInSpinner(getCurrentTag());
  }
  boolean adapterAlreadyExists=hasPostAdapter();
  mRecyclerView.setAdapter(getPostAdapter());
  if (!adapterAlreadyExists && getPostListType().isTagType()) {
    boolean isRecreated=(savedInstanceState != null);
    getPostAdapter().setCurrentTag(mCurrentTag);
    if (!isRecreated && ReaderTagTable.shouldAutoUpdateTag(mCurrentTag)) {
      updatePostsWithTag(getCurrentTag(),UpdateAction.REQUEST_NEWER);
    }
  }
  if (getPostListType().isPreviewType()) {
    createFollowButton();
  }
switch (getPostListType()) {
case BLOG_PREVIEW:
    loadBlogOrFeedInfo();
  animateHeaderDelayed();
break;
case TAG_PREVIEW:
updateTagPreviewHeader();
animateHeaderDelayed();
break;
}
}
