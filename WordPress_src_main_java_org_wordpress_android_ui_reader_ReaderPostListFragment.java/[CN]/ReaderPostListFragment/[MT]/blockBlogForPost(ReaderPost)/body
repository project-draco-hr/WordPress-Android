{
  if (post == null || !hasPostRecycler()) {
    return;
  }
  if (!NetworkUtils.checkConnection(getActivity())) {
    return;
  }
  ReaderActions.ActionListener actionListener=new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (!succeeded && isAdded()) {
        hideUndoBar();
        ToastUtils.showToast(getActivity(),R.string.reader_toast_err_block_blog,ToastUtils.Duration.LONG);
      }
    }
  }
;
  final ReaderBlogActions.BlockedBlogResult blockResult=ReaderBlogActions.blockBlogFromReader(post.blogId,actionListener);
  AnalyticsTracker.track(AnalyticsTracker.Stat.READER_BLOCKED_BLOG);
  getPostRecycler().removePostsInBlog(post.blogId);
  UndoBarController.UndoListener undoListener=new UndoBarController.UndoListener(){
    @Override public void onUndo(    Parcelable parcelable){
      ReaderBlogActions.undoBlockBlogFromReader(blockResult);
      refreshPosts();
    }
  }
;
  new UndoBarController.UndoBar(getActivity()).message(getString(R.string.reader_toast_blog_blocked)).listener(undoListener).translucent(true).show();
}
