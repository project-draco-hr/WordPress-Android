{
  if (!isAdded())   return;
  final android.support.v7.app.ActionBar actionBar=((ActionBarActivity)getActivity()).getSupportActionBar();
  final Toolbar toolbar=(Toolbar)getActivity().findViewById(R.id.toolbar);
  if (actionBar == null || toolbar == null) {
    return;
  }
  if (getPostListType().equals(ReaderPostListType.TAG_FOLLOWED)) {
    actionBar.setDisplayShowTitleEnabled(false);
    actionBar.setDisplayHomeAsUpEnabled(false);
    if (mSpinner == null) {
      mSpinner=new Spinner(getActivity());
      toolbar.addView(mSpinner);
      mSpinner.setAdapter(getSpinnerAdapter());
      mSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
        @Override public void onItemSelected(        AdapterView<?> parent,        View view,        int position,        long id){
          final ReaderTag tag=(ReaderTag)getSpinnerAdapter().getItem(position);
          if (tag == null) {
            return;
          }
          if (!isCurrentTag(tag)) {
            Map<String,String> properties=new HashMap<String,String>();
            properties.put("tag",tag.getTagName());
            AnalyticsTracker.track(AnalyticsTracker.Stat.READER_LOADED_TAG,properties);
            if (tag.getTagName().equals(ReaderTag.TAG_NAME_FRESHLY_PRESSED)) {
              AnalyticsTracker.track(AnalyticsTracker.Stat.READER_LOADED_FRESHLY_PRESSED);
            }
          }
          setCurrentTag(tag);
          AppLog.d(T.READER,String.format("reader post list > tag %s displayed",tag.getTagNameForLog()));
        }
        @Override public void onNothingSelected(        AdapterView<?> parent){
        }
      }
);
    }
  }
 else {
    actionBar.setDisplayShowTitleEnabled(true);
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
}
