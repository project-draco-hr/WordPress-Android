{
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.reader_fragment_post_cards,container,false);
  mRecyclerView=(ReaderRecyclerView)rootView.findViewById(R.id.recycler_view);
  Context context=container.getContext();
  int spacingHorizontal=context.getResources().getDimensionPixelSize(R.dimen.reader_card_spacing);
  int spacingVertical=context.getResources().getDimensionPixelSize(R.dimen.reader_card_gutters);
  mRecyclerView.addItemDecoration(new ReaderItemDecoration(spacingHorizontal,spacingVertical));
  mNewPostsBar=(TextView)rootView.findViewById(R.id.text_new_posts);
  mNewPostsBar.setVisibility(View.GONE);
  mNewPostsBar.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      reloadPosts();
      hideNewPostsBar();
    }
  }
);
  ViewGroup header=(ViewGroup)rootView.findViewById(R.id.frame_header);
switch (getPostListType()) {
case TAG_PREVIEW:
    mTagInfoView=(ViewGroup)inflater.inflate(R.layout.reader_tag_info_view,container,false);
  header.addView(mTagInfoView);
header.setVisibility(View.INVISIBLE);
break;
case BLOG_PREVIEW:
mBlogInfoView=new ReaderBlogInfoView(context);
header.addView(mBlogInfoView);
header.setVisibility(View.INVISIBLE);
break;
}
mEmptyView=rootView.findViewById(R.id.empty_view);
mProgress=(ProgressBar)rootView.findViewById(R.id.progress_footer);
mProgress.setVisibility(View.GONE);
mSwipeToRefreshHelper=new SwipeToRefreshHelper(getActivity(),(SwipeRefreshLayout)rootView.findViewById(R.id.ptr_layout),new RefreshListener(){
@Override public void onRefreshStarted(){
if (!isAdded()) {
return;
}
if (!NetworkUtils.checkConnection(getActivity())) {
showSwipeToRefreshProgress(false);
return;
}
switch (getPostListType()) {
case TAG_FOLLOWED:
case TAG_PREVIEW:
updatePostsWithTag(getCurrentTag(),RequestDataAction.LOAD_NEWER,RefreshType.MANUAL);
break;
case BLOG_PREVIEW:
updatePostsInCurrentBlog(RequestDataAction.LOAD_NEWER);
break;
}
showSwipeToRefreshProgress(true);
}
}
);
return rootView;
}
