{
  final ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.reader_fragment_post_cards,container,false);
  mRecyclerView=(FilteredRecyclerView)rootView.findViewById(R.id.reader_recycler_view);
  Context context=container.getContext();
  mEmptyView=rootView.findViewById(R.id.empty_custom_view);
  mEmptyView.findViewById(R.id.layout_box_images).setVisibility(shouldShowBoxAndPagesAnimation() ? View.VISIBLE : View.GONE);
  mRecyclerView.setLogT(AppLog.T.READER);
  mRecyclerView.setCustomEmptyView(mEmptyView);
  mRecyclerView.setFilterListener(new FilteredRecyclerView.FilterListener(){
    @Override public List<FilterCriteria> onLoadFilterCriteriaOptions(    boolean refresh){
      return null;
    }
    @Override public void onLoadFilterCriteriaOptionsAsync(    FilteredRecyclerView.FilterCriteriaAsyncLoaderListener listener,    boolean refresh){
      loadTags(listener);
    }
    @Override public void onLoadData(){
      if (!isAdded()) {
        return;
      }
      if (!NetworkUtils.checkConnection(getActivity())) {
        mRecyclerView.setRefreshing(false);
        return;
      }
      if (mFirstLoad) {
        mRecyclerView.setRefreshing(false);
        mFirstLoad=false;
        return;
      }
 else {
switch (getPostListType()) {
case TAG_FOLLOWED:
case TAG_PREVIEW:
          updatePostsWithTag(getCurrentTag(),UpdateAction.REQUEST_NEWER);
        break;
case BLOG_PREVIEW:
      updatePostsInCurrentBlogOrFeed(UpdateAction.REQUEST_NEWER);
    break;
}
mRecyclerView.setRefreshing(true);
}
}
@Override public void onFilterSelected(int position,FilterCriteria criteria){
onTagChanged((ReaderTag)criteria);
}
@Override public FilterCriteria onRecallSelection(){
if (hasCurrentTag()) {
return getCurrentTag();
}
 else {
AppLog.w(T.READER,"reader post list > no current tag in onRecallSelection");
return ReaderUtils.getDefaultTag();
}
}
@Override public String onShowEmptyViewMessage(EmptyViewMessageType emptyViewMsgType){
return null;
}
@Override public void onShowCustomEmptyView(EmptyViewMessageType emptyViewMsgType){
setEmptyTitleAndDescription(EmptyViewMessageType.NETWORK_ERROR.equals(emptyViewMsgType) || EmptyViewMessageType.PERMISSION_ERROR.equals(emptyViewMsgType) || EmptyViewMessageType.GENERIC_ERROR.equals(emptyViewMsgType));
}
}
);
int spacingHorizontal=context.getResources().getDimensionPixelSize(R.dimen.reader_card_margin);
int spacingVertical=context.getResources().getDimensionPixelSize(R.dimen.reader_card_gutters);
mRecyclerView.addItemDecoration(new RecyclerItemDecoration(spacingHorizontal,spacingVertical,false));
if (!ReaderUtils.isLoggedOutReader()) {
ViewGroup controls=(ViewGroup)inflater.inflate(R.layout.reader_filtered_recyclerview_controls,null);
View btnSettings=controls.findViewById(R.id.btn_settings);
ReaderUtils.setBackgroundToRoundRipple(btnSettings);
btnSettings.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
ReaderActivityLauncher.showReaderSubs(v.getContext());
}
}
);
View btnSearch=controls.findViewById(R.id.btn_search);
ReaderUtils.setBackgroundToRoundRipple(btnSearch);
btnSearch.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
}
}
);
mRecyclerView.addToolbarCustomControl(controls,null);
}
mRecyclerView.setToolbarBackgroundColor(getResources().getColor(R.color.blue_medium));
mRecyclerView.setToolbarSpinnerTextColor(getResources().getColor(R.color.white));
mRecyclerView.setToolbarSpinnerDrawable(R.drawable.arrow);
mRecyclerView.setToolbarLeftAndRightPadding(getResources().getDimensionPixelSize(R.dimen.margin_medium) + spacingHorizontal,getResources().getDimensionPixelSize(R.dimen.margin_extra_large) + spacingHorizontal);
mNewPostsBar=rootView.findViewById(R.id.layout_new_posts);
mNewPostsBar.setVisibility(View.GONE);
mNewPostsBar.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
mRecyclerView.scrollRecycleViewToPosition(0);
refreshPosts();
}
}
);
mProgress=(ProgressBar)rootView.findViewById(R.id.progress_footer);
mProgress.setVisibility(View.GONE);
return rootView;
}
