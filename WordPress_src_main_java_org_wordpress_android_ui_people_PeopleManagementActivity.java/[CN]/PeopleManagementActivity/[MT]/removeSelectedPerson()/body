{
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  Person person=getCurrentPerson();
  if (person == null) {
    return;
  }
  final boolean isFollower=person.isFollower();
  final boolean isEmailFollower=person.isEmailFollower();
  PeopleUtils.RemoveUserCallback callback=new PeopleUtils.RemoveUserCallback(){
    @Override public void onSuccess(    long personID,    int localTableBlogId){
      if (!isFollower && !isEmailFollower) {
        AnalyticsUtils.trackWithCurrentBlogDetails(AnalyticsTracker.Stat.PERSON_REMOVED);
      }
      Person person=PeopleTable.getPerson(personID,localTableBlogId,isFollower);
      String text;
      if (person != null) {
        PeopleTable.deletePerson(personID,localTableBlogId);
        text=getString(R.string.person_removed,person.getDisplayName());
      }
 else {
        if (isFollower || isEmailFollower) {
          text=getString(R.string.follower_removed_general);
        }
 else {
          text=getString(R.string.user_removed_general);
        }
      }
      ToastUtils.showToast(PeopleManagementActivity.this,text,ToastUtils.Duration.LONG);
      navigateBackToPeopleListFragment();
      refreshPeopleListFragment();
    }
    @Override public void onError(){
      ToastUtils.showToast(PeopleManagementActivity.this,R.string.error_remove_user,ToastUtils.Duration.LONG);
    }
  }
;
  if (isFollower || isEmailFollower) {
    PeopleUtils.removeFollower(person.getBlogId(),person.getPersonID(),person.getLocalTableBlogId(),isEmailFollower,callback);
  }
 else {
    PeopleUtils.removeUser(person.getBlogId(),person.getPersonID(),person.getLocalTableBlogId(),callback);
  }
}
