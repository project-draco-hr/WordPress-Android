{
  if (NetworkUtils.isNetworkAvailable(this)) {
    List<Object> apiArgs=new ArrayList<Object>();
    apiArgs.add(WordPress.getCurrentBlog());
    ApiHelper.SyncMediaLibraryTask.Callback callback=new ApiHelper.SyncMediaLibraryTask.Callback(){
      @Override public void onSuccess(      int count){
        mBlogMediaStatus=1;
        runOnUiThread(new Runnable(){
          @Override public void run(){
            if (!mPendingVideoPressInfoRequests.isEmpty()) {
              for (              String videoId : mPendingVideoPressInfoRequests) {
                String blogId=String.valueOf(WordPress.currentBlog.getLocalTableBlogId());
                String videoUrl=WordPress.wpDB.getMediaUrlByVideoPressId(blogId,videoId);
                String posterUrl=WordPressMediaUtils.getVideoPressVideoPosterFromURL(videoUrl);
                mEditorFragment.setUrlForVideoPressId(videoId,videoUrl,posterUrl);
              }
              mPendingVideoPressInfoRequests.clear();
            }
          }
        }
);
      }
      @Override public void onFailure(      final ApiHelper.ErrorType errorType,      String errorMessage,      Throwable throwable){
        mBlogMediaStatus=0;
        ToastUtils.showToast(EditPostActivity.this,R.string.error_refresh_media,ToastUtils.Duration.SHORT);
      }
    }
;
    ApiHelper.SyncMediaLibraryTask getMediaTask=new ApiHelper.SyncMediaLibraryTask(0,MediaGridFragment.Filter.ALL,callback);
    getMediaTask.execute(apiArgs);
  }
 else {
    mBlogMediaStatus=0;
    ToastUtils.showToast(this,R.string.error_refresh_media,ToastUtils.Duration.SHORT);
  }
}
