{
  if (result != null) {
    try {
      if (dataSet.size() > 0) {
        final int intervalT=interval;
        RelativeLayout filters=(RelativeLayout)findViewById(R.id.filters);
        filters.setVisibility(View.VISIBLE);
        TextView reportTitle=(TextView)findViewById(R.id.chartTitle);
        reportTitle.setVisibility(View.VISIBLE);
        ImageView iv=(ImageView)findViewById(R.id.chart);
        if (reportType.equals("views")) {
          if (intervalT != 1) {
            iv.setVisibility(View.VISIBLE);
          }
 else {
            iv.setVisibility(View.GONE);
          }
          reportTitle.setText(getResources().getText(R.string.report_views));
          String dataValues="", dateStrings="", xLabels="";
          Object[] key=numDataSet.toArray();
          Arrays.sort(key);
          TableLayout tl=(TableLayout)findViewById(R.id.dataTable);
          tl.removeAllViews();
          LayoutInflater inflater=getLayoutInflater();
          TableRow table_row=(TableRow)inflater.inflate(R.layout.table_row_header,tl,false);
          TextView col_1=(TextView)table_row.findViewById(R.id.col1);
          col_1.setText(getResources().getText(R.string.date));
          col_1.setTypeface(Typeface.DEFAULT_BOLD);
          TextView col_2=(TextView)table_row.findViewById(R.id.col2);
          col_2.setText(getResources().getText(R.string.report_views));
          col_2.setTypeface(Typeface.DEFAULT_BOLD);
          tl.addView(table_row);
          HashMap<?,?> row;
          for (int i=0; i < dataSet.size(); i++) {
            row=(HashMap<?,?>)dataSet.get(i);
            String date;
            try {
              date=row.get("date").toString();
            }
 catch (            Exception e) {
              return;
            }
            String value=numDataSet.get(i).toString();
            dateStrings+=date + ",";
            dataValues+=value + ",";
            if (i == 0)             xLabels+=date + "|";
 else             if (i == (dataSet.size() - 1))             xLabels+=date;
 else             xLabels+="|";
            TableRow tr=(TableRow)inflater.inflate(R.layout.table_row,tl,false);
            TextView col1=(TextView)tr.findViewById(R.id.col1);
            col1.setText(date);
            TextView col2=(TextView)tr.findViewById(R.id.col2);
            col2.setText(value);
            if (i % 2 == 0) {
              tr.setBackgroundColor(Color.parseColor("#FFE6F0FF"));
            }
            tl.addView(tr);
          }
          int maxValue=Integer.parseInt(key[key.length - 1].toString());
          int minValue=Integer.parseInt(key[0].toString());
          dataValues=dataValues.substring(0,dataValues.length() - 1);
          dateStrings=dateStrings.substring(0,dateStrings.length() - 1);
          long minBuffer=Math.round(minValue - (maxValue * .10));
          if (minBuffer < 0) {
            minBuffer=0;
          }
          long maxBuffer=Math.round(maxValue + (maxValue * .10));
          for (int i=0; i < 9; i++) {
            if (minBuffer % 10 == 0)             break;
 else {
              minBuffer--;
            }
          }
          for (int i=0; i < 9; i++) {
            if (maxBuffer % 10 == 0)             break;
 else {
              maxBuffer++;
            }
          }
          long yInterval=maxBuffer / 10;
          for (int i=0; i < 9; i++) {
            if (yInterval % 10 == 0)             break;
 else {
              yInterval++;
            }
          }
          float xGrid=100.00f / 6;
          if (yInterval == 0) {
            yInterval=1;
          }
          long numRows=(maxBuffer - minBuffer) / yInterval;
          float yGrid=100.00f / numRows;
          Display display=getWindowManager().getDefaultDisplay();
          int width=display.getWidth();
          int height=display.getHeight();
          String screenSize="320x240";
          if (width > 480 || height > 480) {
            screenSize="480x360";
          }
          final String chartViewURL="http://chart.apis.google.com/chart?chts=464646,20" + "&cht=bvs" + "&chbh=a"+ "&chd=t:" + dataValues + "&chs="+ screenSize+ "&chxt=y,x"+ "&chxl=1:|"+ xLabels+ "&chds="+ minBuffer+ ","+ maxBuffer+ "&chxr=0,"+ minBuffer+ ","+ maxBuffer+ ","+ yInterval+ "&chf=c,lg,90,FFFFFF,0,FFFFFF,0.5"+ "&chco=a3bcd3,cccccc77"+ "&chls=4"+ "&chf=c,lg,90,FFFFFF,0,FFFFFF,0.5&chls=4&chxs=0,464646,19,0,t|1,464646,16,0,t,ffffff&chxtc=0,0"+ "&chg="+ xGrid+ ","+ yGrid+ ",1,0";
          new statsChartTask().execute(chartViewURL);
        }
 else         if (reportType.equals("postviews")) {
          reportTitle.setText(getResources().getText(R.string.report_postviews));
          iv.setVisibility(View.GONE);
          Object[] key=numDataSet.toArray();
          Arrays.sort(key);
          TableLayout tl=(TableLayout)findViewById(R.id.dataTable);
          tl.removeAllViews();
          LayoutInflater inflater=getLayoutInflater();
          TableRow table_row=(TableRow)inflater.inflate(R.layout.table_row_header,tl,false);
          TextView col_1=(TextView)table_row.findViewById(R.id.col1);
          col_1.setText(getResources().getText(R.string.report_post_title));
          col_1.setTypeface(Typeface.DEFAULT_BOLD);
          TextView col_2=(TextView)table_row.findViewById(R.id.col2);
          col_2.setText(getResources().getText(R.string.report_views));
          col_2.setTypeface(Typeface.DEFAULT_BOLD);
          tl.addView(table_row);
          HashMap<?,?> row;
          for (int i=0; i < dataSet.size(); i++) {
            row=(HashMap<?,?>)dataSet.get(i);
            String date=row.get("title").toString();
            String value=numDataSet.get(i).toString();
            TableRow tr=(TableRow)inflater.inflate(R.layout.table_row,tl,false);
            TextView col1=(TextView)tr.findViewById(R.id.col1);
            col1.setText(date);
            TextView col2=(TextView)tr.findViewById(R.id.col2);
            col2.setText(value);
            if (i % 2 == 0) {
              tr.setBackgroundColor(Color.parseColor("#FFE6F0FF"));
            }
            tl.addView(tr);
          }
        }
 else         if (reportType.equals("referrers") || reportType.equals("searchterms") || reportType.equals("clicks")) {
          iv.setVisibility(View.GONE);
          Object[] key=numDataSet.toArray();
          Arrays.sort(key);
          TableLayout tl=(TableLayout)findViewById(R.id.dataTable);
          tl.removeAllViews();
          LayoutInflater inflater=getLayoutInflater();
          TableRow table_row=(TableRow)inflater.inflate(R.layout.table_row_header,tl,false);
          TextView col_1=(TextView)table_row.findViewById(R.id.col1);
          if (reportType.equals("referrers")) {
            col_1.setText(getResources().getText(R.string.report_referrers));
            reportTitle.setText(getResources().getText(R.string.report_referrers));
          }
 else           if (reportType.equals("searchterms")) {
            reportTitle.setText(getResources().getText(R.string.report_searchterms));
            col_1.setText(getResources().getText(R.string.report_searchterms));
          }
 else {
            reportTitle.setText(getResources().getText(R.string.report_clicks));
            col_1.setText(getResources().getText(R.string.report_clicks));
          }
          col_1.setTypeface(Typeface.DEFAULT_BOLD);
          TextView col_2=(TextView)table_row.findViewById(R.id.col2);
          col_2.setText("Views");
          col_2.setTypeface(Typeface.DEFAULT_BOLD);
          tl.addView(table_row);
          HashMap<?,?> row;
          for (int i=0; i < dataSet.size(); i++) {
            row=(HashMap<?,?>)dataSet.get(i);
            String date=row.get("value").toString();
            String value=numDataSet.get(i).toString();
            TableRow tr=(TableRow)inflater.inflate(R.layout.table_row,tl,false);
            TextView col1=(TextView)tr.findViewById(R.id.col1);
            col1.setText(date);
            Linkify.addLinks(col1,Linkify.WEB_URLS);
            TextView col2=(TextView)tr.findViewById(R.id.col2);
            col2.setText(value);
            if (i % 2 == 0) {
              tr.setBackgroundColor(Color.parseColor("#FFE6F0FF"));
            }
            tl.addView(tr);
          }
        }
        if (!isFinishing())         titleBar.stopRotatingRefreshIcon();
      }
 else {
        titleBar.stopRotatingRefreshIcon();
        RelativeLayout filters=(RelativeLayout)findViewById(R.id.filters);
        filters.setVisibility(View.VISIBLE);
        Toast.makeText(ViewStats.this,getResources().getText(R.string.no_data_found),Toast.LENGTH_SHORT).show();
      }
    }
 catch (    NumberFormatException e) {
      errorMsg=e.getMessage();
    }
catch (    IllegalStateException e) {
      errorMsg=e.getMessage();
    }
catch (    NotFoundException e) {
      errorMsg=e.getMessage();
    }
  }
  if (!errorMsg.equals("")) {
    titleBar.stopRotatingRefreshIcon();
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(ViewStats.this);
    dialogBuilder.setTitle(getResources().getText(R.string.connection_error));
    dialogBuilder.setMessage(errorMsg);
    dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
      }
    }
);
    dialogBuilder.setCancelable(true);
    if (!isFinishing()) {
      dialogBuilder.create().show();
    }
  }
 else {
    titleBar.stopRotatingRefreshIcon();
  }
}
