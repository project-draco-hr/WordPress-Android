{
  final String commentText=EditTextUtils.getText(mEditComment);
  if (TextUtils.isEmpty(commentText)) {
    return;
  }
  if (!NetworkUtils.checkConnection(this)) {
    return;
  }
  AnalyticsTracker.track(AnalyticsTracker.Stat.READER_COMMENTED_ON_ARTICLE);
  mImgSubmitComment.setEnabled(false);
  mEditComment.setEnabled(false);
  final long fakeCommentId=ReaderCommentActions.generateFakeCommentId();
  ReaderActions.CommentActionListener actionListener=new ReaderActions.CommentActionListener(){
    @Override public void onActionResult(    boolean succeeded,    ReaderComment newComment){
      if (isFinishing()) {
        return;
      }
      mImgSubmitComment.setEnabled(true);
      mEditComment.setEnabled(true);
      if (succeeded) {
        getCommentAdapter().setHighlightCommentId(0,false);
        getCommentAdapter().replaceComment(fakeCommentId,newComment);
        mListView.invalidateViews();
        setReplyToCommentId(0);
        mEditComment.getAutoSaveTextHelper().clearSavedText(mEditComment);
      }
 else {
        mEditComment.setText(commentText);
        getCommentAdapter().removeComment(fakeCommentId);
        ToastUtils.showToast(ReaderCommentListActivity.this,R.string.reader_toast_err_comment_failed,ToastUtils.Duration.LONG);
      }
    }
  }
;
  ReaderComment newComment=ReaderCommentActions.submitPostComment(getPost(),fakeCommentId,commentText,mReplyToCommentId,actionListener);
  if (newComment != null) {
    mEditComment.setText(null);
    getCommentAdapter().setHighlightCommentId(newComment.commentId,true);
    getCommentAdapter().addComment(newComment);
    scrollToCommentId(fakeCommentId);
  }
}
