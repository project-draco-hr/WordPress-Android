{
  showProgressBar();
  Vector settings=new Vector();
  settingsDB settingsDB=new settingsDB(this);
  settings=settingsDB.loadSettings(this,id);
  String sURL="";
  if (settings.get(0).toString().contains("xmlrpc.php")) {
    sURL=settings.get(0).toString();
  }
 else {
    sURL=settings.get(0).toString() + "xmlrpc.php";
  }
  String sUsername=settings.get(2).toString();
  String sPassword=settings.get(3).toString();
  int sBlogId=Integer.parseInt(settings.get(10).toString());
  client=new XMLRPCClient(sURL);
  XMLRPCMethod method=new XMLRPCMethod("blogger.getRecentPosts",new XMLRPCMethodCallback(){
    public void callFinished(    Object[] result){
      String s="done";
      s=result.toString();
      if (result.length == 0) {
        closeProgressBar();
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(viewPosts.this);
        dialogBuilder.setTitle(getResources().getText(R.string.posts_not_found));
        dialogBuilder.setMessage(getResources().getText(R.string.posts_no_posts));
        dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        dialogBuilder.create().show();
      }
 else {
        HashMap contentHash=new HashMap();
        String rTitles[]=new String[result.length];
        String rPostIDs[]=new String[result.length];
        String rDateCreated[]=new String[result.length];
        String rDateCreatedFormatted[]=new String[result.length];
        Vector dbVector=new Vector();
        for (int ctr=0; ctr < result.length; ctr++) {
          HashMap<String,String> dbValues=new HashMap();
          contentHash=(HashMap)result[ctr];
          rTitles[ctr]=escapeUtils.unescapeHtml(contentHash.get("content").toString().substring(contentHash.get("content").toString().indexOf("<title>") + 7,contentHash.get("content").toString().indexOf("</title>")));
          rPostIDs[ctr]=contentHash.get("postid").toString();
          rDateCreated[ctr]=contentHash.get("dateCreated").toString();
          Date d=new Date();
          SimpleDateFormat sdf=new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
          String cDate=rDateCreated[ctr].replace("America/Los_Angeles","PST");
          try {
            d=sdf.parse(cDate);
            SimpleDateFormat sdfOut=new SimpleDateFormat("MMMM dd, yyyy hh:mm a");
            rDateCreatedFormatted[ctr]=sdfOut.format(d);
          }
 catch (          ParseException pe) {
            pe.printStackTrace();
            rDateCreatedFormatted[ctr]=rDateCreated[ctr];
          }
          dbValues.put("blogID",id);
          dbValues.put("postID",rPostIDs[ctr]);
          dbValues.put("title",rTitles[ctr]);
          dbValues.put("postDate",rDateCreated[ctr]);
          dbValues.put("postDateFormatted",rDateCreatedFormatted[ctr]);
          dbVector.add(ctr,dbValues);
        }
        postStoreDB postStoreDB=new postStoreDB(viewPosts.this);
        postStoreDB.savePosts(viewPosts.this,dbVector);
        closeProgressBar();
        loadPosts();
      }
    }
  }
);
  Object[] params={"spacer",sBlogId,sUsername,sPassword,30};
  method.call(params);
}
