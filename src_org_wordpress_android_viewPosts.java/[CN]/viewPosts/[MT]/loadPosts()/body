{
  postStoreDB postStoreDB=new postStoreDB(this);
  Vector loadedPosts;
  if (isPage) {
    loadedPosts=postStoreDB.loadPages(viewPosts.this,id);
  }
 else {
    loadedPosts=postStoreDB.loadPosts(viewPosts.this,id);
  }
  if (loadedPosts != null) {
    titles=new String[loadedPosts.size()];
    postIDs=new String[loadedPosts.size()];
    dateCreated=new String[loadedPosts.size()];
    dateCreatedFormatted=new String[loadedPosts.size()];
  }
 else {
    titles=new String[0];
    postIDs=new String[0];
    dateCreated=new String[0];
    dateCreatedFormatted=new String[0];
  }
  if (loadedPosts != null) {
    for (int i=0; i < loadedPosts.size(); i++) {
      HashMap contentHash=(HashMap)loadedPosts.get(i);
      titles[i]=escapeUtils.unescapeHtml(contentHash.get("title").toString());
      if (isPage) {
        postIDs[i]=contentHash.get("pageID").toString();
        dateCreated[i]=contentHash.get("pageDate").toString();
        dateCreatedFormatted[i]=contentHash.get("pageDateFormatted").toString();
      }
 else {
        postIDs[i]=contentHash.get("postID").toString();
        dateCreated[i]=contentHash.get("postDate").toString();
        dateCreatedFormatted[i]=contentHash.get("postDateFormatted").toString();
      }
    }
    List postIDList=Arrays.asList(postIDs);
    List newPostIDList=new ArrayList();
    newPostIDList.add("postsHeader");
    newPostIDList.addAll(postIDList);
    postIDs=(String[])newPostIDList.toArray(new String[newPostIDList.size()]);
    List postTitleList=Arrays.asList(titles);
    List newPostTitleList=new ArrayList();
    newPostTitleList.add(getResources().getText((isPage) ? R.string.tab_pages : R.string.tab_posts));
    newPostTitleList.addAll(postTitleList);
    titles=(String[])newPostTitleList.toArray(new String[newPostTitleList.size()]);
    List dateList=Arrays.asList(dateCreated);
    List newDateList=new ArrayList();
    newDateList.add("postsHeader");
    newDateList.addAll(dateList);
    dateCreated=(String[])newDateList.toArray(new String[newDateList.size()]);
    List dateFormattedList=Arrays.asList(dateCreatedFormatted);
    List newDateFormattedList=new ArrayList();
    newDateFormattedList.add("postsHeader");
    newDateFormattedList.addAll(dateFormattedList);
    dateCreatedFormatted=(String[])newDateFormattedList.toArray(new String[newDateFormattedList.size()]);
  }
  boolean drafts=loadDrafts();
  if (drafts) {
    List draftIDList=Arrays.asList(draftIDs);
    List newDraftIDList=new ArrayList();
    newDraftIDList.add("draftsHeader");
    newDraftIDList.addAll(draftIDList);
    draftIDs=(String[])newDraftIDList.toArray(new String[newDraftIDList.size()]);
    List titleList=Arrays.asList(draftTitles);
    List newTitleList=new ArrayList();
    newTitleList.add(getResources().getText(R.string.local_drafts));
    newTitleList.addAll(titleList);
    draftTitles=(String[])newTitleList.toArray(new String[newTitleList.size()]);
    List publishList=Arrays.asList(publish);
    List newPublishList=new ArrayList();
    newPublishList.add("draftsHeader");
    newPublishList.addAll(publishList);
    publish=(String[])newPublishList.toArray(new String[newPublishList.size()]);
    postIDs=StringHelper.mergeStringArrays(draftIDs,postIDs);
    titles=StringHelper.mergeStringArrays(draftTitles,titles);
    dateCreatedFormatted=StringHelper.mergeStringArrays(publish,dateCreatedFormatted);
  }
  if (loadedPosts != null || drafts == true) {
    setListAdapter(new PostListAdapter(viewPosts.this));
    ListView listView=(ListView)findViewById(android.R.id.list);
    listView.setSelector(R.layout.list_selector);
    listView.setOnItemClickListener(new OnItemClickListener(){
      public void onItemClick(      AdapterView<?> arg0,      View arg1,      int arg2,      long arg3){
        arg1.performLongClick();
      }
    }
);
    listView.setOnCreateContextMenuListener(new OnCreateContextMenuListener(){
      public void onCreateContextMenu(      ContextMenu menu,      View v,      ContextMenuInfo menuInfo){
        AdapterView.AdapterContextMenuInfo info;
        try {
          info=(AdapterView.AdapterContextMenuInfo)menuInfo;
        }
 catch (        ClassCastException e) {
          return;
        }
        selectedID=info.targetView.getId();
        rowID=info.position;
        if (totalDrafts > 0 && rowID <= totalDrafts && rowID != 0) {
          menu.clear();
          menu.setHeaderTitle(getResources().getText(R.string.draft_actions));
          menu.add(1,0,0,getResources().getText(R.string.edit_draft));
          menu.add(1,1,0,getResources().getText(R.string.upload));
          menu.add(1,2,0,getResources().getText(R.string.delete_draft));
        }
 else         if (rowID == 1 || ((rowID != (totalDrafts + 1)) && rowID != 0)) {
          menu.clear();
          if (isPage) {
            menu.setHeaderTitle(getResources().getText(R.string.page_actions));
            menu.add(2,0,0,getResources().getText(R.string.preview_page));
            menu.add(2,1,0,getResources().getText(R.string.view_comments));
            menu.add(2,2,0,getResources().getText(R.string.edit_page));
          }
 else {
            menu.setHeaderTitle(getResources().getText(R.string.post_actions));
            menu.add(0,0,0,getResources().getText(R.string.preview_post));
            menu.add(0,1,0,getResources().getText(R.string.view_comments));
            menu.add(0,2,0,getResources().getText(R.string.edit_post));
          }
        }
      }
    }
);
    return true;
  }
 else {
    return false;
  }
}
