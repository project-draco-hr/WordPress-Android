{
  final WordPressDB lDraftsDB=new WordPressDB(this);
  Vector<?> post;
  if (isPage) {
    post=lDraftsDB.loadPageDraft(this,String.valueOf(selectedID));
  }
 else {
    post=lDraftsDB.loadPost(this,String.valueOf(selectedID));
  }
  HashMap<?,?> postHashMap=(HashMap<?,?>)post.get(0);
  String title=postHashMap.get("title").toString();
  String content=StringHelper.convertHTMLTagsForUpload(postHashMap.get("content").toString());
  String picturePaths=postHashMap.get("picturePaths").toString();
  if (!picturePaths.equals("")) {
    String[] pPaths=picturePaths.split(",");
    for (int i=0; i < pPaths.length; i++) {
      Uri imagePath=Uri.parse(pPaths[i]);
      selectedImageIDs.add(selectedImageCtr,imagePath);
      imageUrl.add(selectedImageCtr,pPaths[i]);
      selectedImageCtr++;
    }
  }
  String tags="";
  if (!isPage) {
    String categories=postHashMap.get("categories").toString();
    if (!categories.equals("")) {
      String[] aCategories=categories.split(",");
      for (int i=0; i < aCategories.length; i++) {
        selectedCategories.add(aCategories[i]);
      }
    }
    tags=postHashMap.get("tags").toString();
  }
  String status="publish";
  if (postHashMap.get("status") != null) {
    status=postHashMap.get("status").toString();
  }
  Boolean publishThis=false;
  String imageContent="";
  boolean mediaError=false;
  if (selectedImageCtr > 0) {
    String state=android.os.Environment.getExternalStorageState();
    if (!state.equals(android.os.Environment.MEDIA_MOUNTED)) {
      mediaError=true;
    }
 else {
      imageContent=uploadImages();
    }
  }
  String res="";
  if (!mediaError) {
    Thread updateDialog=new Thread(){
      public void run(){
        loadingDialog.setMessage(getResources().getText((isPage) ? R.string.page_attempt_upload : R.string.post_attempt_upload));
      }
    }
;
    this.runOnUiThread(updateDialog);
    String[] theCategories=new String[selectedCategories.size()];
    for (int i=0; i < selectedCategories.size(); i++) {
      theCategories[i]=selectedCategories.get(i).toString();
    }
    WordPressDB settingsDB=new WordPressDB(this);
    Vector<?> settingsVector=settingsDB.loadSettings(this,id);
    String sURL="";
    if (settingsVector.get(0).toString().contains("xmlrpc.php")) {
      sURL=settingsVector.get(0).toString();
    }
 else {
      sURL=settingsVector.get(0).toString() + "xmlrpc.php";
    }
    String sUsername=settingsVector.get(2).toString();
    String sPassword=settingsVector.get(3).toString();
    String sImagePlacement=settingsVector.get(4).toString();
    int sBlogId=Integer.parseInt(settingsVector.get(10).toString());
    Map<String,Object> contentStruct=new HashMap<String,Object>();
    if (imageContent != "") {
      if (sImagePlacement.equals("Above Text")) {
        content=imageContent + content;
      }
 else {
        content=content + imageContent;
      }
    }
    if (!isPage) {
      HashMap<?,?> globalSettings=settingsDB.getNotificationOptions(this);
      boolean taglineValue=false;
      String tagline="";
      if (globalSettings != null) {
        if (globalSettings.get("tagline_flag").toString().equals("1")) {
          taglineValue=true;
        }
        if (taglineValue) {
          tagline=globalSettings.get("tagline").toString();
          if (!tagline.equals("")) {
            content+="\n\n<span class=\"post_sig\">" + tagline + "</span>\n\n";
          }
        }
      }
    }
    contentStruct.put("post_type",(isPage) ? "page" : "post");
    contentStruct.put("title",title);
    content=content.replace("/\n\n/g","</p><p>");
    content=content.replace("/\n/g","<br />");
    contentStruct.put("description",content);
    if (!isPage) {
      if (tags != "") {
        contentStruct.put("mt_keywords",tags);
      }
      if (theCategories.length > 0) {
        contentStruct.put("categories",theCategories);
      }
    }
    contentStruct.put("post_status",status);
    Double latitude=0.0;
    Double longitude=0.0;
    if (!isPage) {
      latitude=(Double)postHashMap.get("latitude");
      longitude=(Double)postHashMap.get("longitude");
      if (latitude > 0) {
        HashMap<Object,Object> hLatitude=new HashMap<Object,Object>();
        hLatitude.put("key","geo_latitude");
        hLatitude.put("value",latitude);
        HashMap<Object,Object> hLongitude=new HashMap<Object,Object>();
        hLongitude.put("key","geo_longitude");
        hLongitude.put("value",longitude);
        HashMap<Object,Object> hPublic=new HashMap<Object,Object>();
        hPublic.put("key","geo_public");
        hPublic.put("value",1);
        Object[] geo={hLatitude,hLongitude,hPublic};
        contentStruct.put("custom_fields",geo);
      }
    }
    client=new XMLRPCClient(sURL);
    Object[] params={sBlogId,sUsername,sPassword,contentStruct,publishThis};
    Object result=null;
    boolean success=false;
    try {
      result=(Object)client.call("metaWeblog.newPost",params);
      success=true;
    }
 catch (    final XMLRPCException e) {
      Thread prompt=new Thread(){
        public void run(){
          dismissDialog(ID_DIALOG_POSTING);
          AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(viewPosts.this);
          dialogBuilder.setTitle(getResources().getText(R.string.connection_error));
          dialogBuilder.setMessage(e.getLocalizedMessage());
          dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              clearCounters();
            }
          }
);
          dialogBuilder.setCancelable(true);
          if (!isFinishing()) {
            dialogBuilder.create().show();
          }
        }
      }
;
      this.runOnUiThread(prompt);
    }
    if (success) {
      newID=result.toString();
      res="OK";
      dismissDialog(ID_DIALOG_POSTING);
      Thread action=new Thread(){
        public void run(){
          AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(viewPosts.this);
          dialogBuilder.setTitle(getResources().getText(R.string.success));
          if (xmlrpcError) {
            if (vpUpgrade) {
              dialogBuilder.setMessage(getResources().getText((isPage) ? R.string.page_id : R.string.post_id) + " " + newID+ " "+ getResources().getText(R.string.added_successfully_image_error)+ ": "+ mediaErrorMsg);
              dialogBuilder.setNegativeButton(getResources().getString(R.string.no),new DialogInterface.OnClickListener(){
                public void onClick(                DialogInterface dialog,                int whichButton){
                  boolean isInteger=false;
                  try {
                    Integer.parseInt(newID);
                    isInteger=true;
                  }
 catch (                  NumberFormatException e) {
                  }
                  if (isInteger) {
                    clearCounters();
                    if (isPage) {
                      lDraftsDB.deletePageDraft(viewPosts.this,String.valueOf(selectedID));
                    }
 else {
                      lDraftsDB.deletePost(viewPosts.this,String.valueOf(selectedID));
                    }
                    refreshPosts(false);
                  }
                }
              }
);
            }
            dialogBuilder.setMessage(getResources().getText((isPage) ? R.string.page_id : R.string.post_id) + " " + newID+ " "+ getResources().getText(R.string.added_successfully_image_error)+ ": "+ mediaErrorMsg);
          }
 else {
            dialogBuilder.setMessage(getResources().getText((isPage) ? R.string.page_id : R.string.post_id) + " " + newID+ " "+ getResources().getText(R.string.added_successfully));
          }
          dialogBuilder.setPositiveButton((vpUpgrade) ? getResources().getString(R.string.yes) : "OK",new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              boolean isInteger=false;
              try {
                Integer.parseInt(newID);
                isInteger=true;
              }
 catch (              NumberFormatException e) {
              }
              if (isInteger) {
                clearCounters();
                if (isPage) {
                  lDraftsDB.deletePageDraft(viewPosts.this,String.valueOf(selectedID));
                }
 else {
                  lDraftsDB.deletePost(viewPosts.this,String.valueOf(selectedID));
                }
                refreshPosts(false);
              }
              if (vpUpgrade) {
                String url="http://videopress.com";
                Intent i=new Intent(Intent.ACTION_VIEW);
                i.setData(Uri.parse(url));
                startActivity(i);
              }
            }
          }
);
          dialogBuilder.setCancelable(true);
          if (!isFinishing()) {
            dialogBuilder.create().show();
          }
        }
      }
;
      this.runOnUiThread(action);
    }
  }
 else {
    Thread prompt=new Thread(){
      public void run(){
        dismissDialog(ID_DIALOG_POSTING);
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(viewPosts.this);
        dialogBuilder.setTitle(getResources().getText(R.string.sdcard_title));
        dialogBuilder.setMessage(getResources().getText(R.string.sdcard_message));
        dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
            clearCounters();
          }
        }
);
        dialogBuilder.setCancelable(true);
        if (!isFinishing()) {
          dialogBuilder.create().show();
        }
      }
    }
;
    this.runOnUiThread(prompt);
  }
  return res;
}
