{
  if (!loadMore) {
    showProgressBar();
  }
  Vector settings=new Vector();
  WordPressDB settingsDB=new WordPressDB(this);
  settings=settingsDB.loadSettings(this,id);
  String sURL="";
  if (settings.get(0).toString().contains("xmlrpc.php")) {
    sURL=settings.get(0).toString();
  }
 else {
    sURL=settings.get(0).toString() + "xmlrpc.php";
  }
  String sUsername=settings.get(2).toString();
  String sPassword=settings.get(3).toString();
  int sBlogId=Integer.parseInt(settings.get(10).toString());
  client=new XMLRPCClient(sURL);
  XMLRPCMethod method=new XMLRPCMethod((isPage) ? "wp.getPageList" : "blogger.getRecentPosts",new XMLRPCMethodCallback(){
    public void callFinished(    Object[] result){
      String s="done";
      s=result.toString();
      if (result.length == 0) {
        if (!loadMore) {
          closeProgressBar();
        }
 else {
          switcher.showPrevious();
        }
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(viewPosts.this);
        dialogBuilder.setTitle(getResources().getText((isPage) ? R.string.pages_not_found : R.string.posts_not_found));
        dialogBuilder.setMessage(getResources().getText((isPage) ? R.string.pages_no_pages : R.string.posts_no_posts));
        dialogBuilder.setPositiveButton("OK",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        if (!isFinishing()) {
          dialogBuilder.create().show();
        }
      }
 else {
        HashMap contentHash=new HashMap();
        String rTitles[]=new String[result.length];
        String rPostIDs[]=new String[result.length];
        String rDateCreated[]=new String[result.length];
        String rDateCreatedFormatted[]=new String[result.length];
        String rParentID[]=new String[result.length];
        Vector dbVector=new Vector();
        WordPressDB postStoreDB=new WordPressDB(viewPosts.this);
        Date d=new Date();
        SimpleDateFormat sdf=new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
        Calendar cal=Calendar.getInstance();
        TimeZone tz=cal.getTimeZone();
        String shortDisplayName="";
        shortDisplayName=tz.getDisplayName(true,TimeZone.SHORT);
        for (int ctr=0; ctr < result.length; ctr++) {
          HashMap<String,String> dbValues=new HashMap();
          contentHash=(HashMap)result[ctr];
          if (isPage) {
            rTitles[ctr]=escapeUtils.unescapeHtml(contentHash.get("page_title").toString());
            rPostIDs[ctr]=contentHash.get("page_id").toString();
            rDateCreated[ctr]=contentHash.get("dateCreated").toString();
            rParentID[ctr]=contentHash.get("page_parent_id").toString();
          }
 else {
            rTitles[ctr]=escapeUtils.unescapeHtml(contentHash.get("content").toString().substring(contentHash.get("content").toString().indexOf("<title>") + 7,contentHash.get("content").toString().indexOf("</title>")));
            rPostIDs[ctr]=contentHash.get("postid").toString();
            rDateCreated[ctr]=contentHash.get("dateCreated").toString();
          }
          String cDate=rDateCreated[ctr].replace(tz.getID(),shortDisplayName);
          try {
            d=sdf.parse(cDate);
            SimpleDateFormat sdfOut=new SimpleDateFormat("MMMM dd, yyyy hh:mm a");
            rDateCreatedFormatted[ctr]=sdfOut.format(d);
          }
 catch (          ParseException pe) {
            pe.printStackTrace();
            rDateCreatedFormatted[ctr]=rDateCreated[ctr];
          }
          dbValues.put("blogID",id);
          dbValues.put("title",rTitles[ctr]);
          if (isPage) {
            dbValues.put("pageID",rPostIDs[ctr]);
            dbValues.put("pageDate",rDateCreated[ctr]);
            dbValues.put("pageDateFormatted",rDateCreatedFormatted[ctr]);
            dbValues.put("parentID",rParentID[ctr]);
            dbVector.add(ctr,dbValues);
          }
 else {
            dbValues.put("postID",rPostIDs[ctr]);
            dbValues.put("postDate",rDateCreated[ctr]);
            dbValues.put("postDateFormatted",rDateCreatedFormatted[ctr]);
            dbVector.add(ctr,dbValues);
          }
        }
        if (isPage) {
          postStoreDB.savePages(viewPosts.this,dbVector);
        }
 else {
          postStoreDB.savePosts(viewPosts.this,dbVector);
        }
        loadPosts(loadMore);
        if (!loadMore) {
          closeProgressBar();
        }
 else {
          switcher.showPrevious();
        }
      }
    }
  }
);
  if (isPage) {
    Object[] params={sBlogId,sUsername,sPassword};
    method.call(params);
  }
 else {
    Object[] params={"spacer",sBlogId,sUsername,sPassword,numRecords};
    method.call(params);
  }
}
