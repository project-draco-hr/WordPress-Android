{
  super.onActivityResult(requestCode,resultCode,data);
  boolean isResultOK=(resultCode == Activity.RESULT_OK);
  final ReaderPostListFragment listFragment=getListFragment();
switch (requestCode) {
case ReaderConstants.INTENT_READER_SUBS:
    if (listFragment != null && data != null && data.getBooleanExtra(ReaderSubsActivity.KEY_TAGS_CHANGED,false)) {
      String lastAddedTag=data.getStringExtra(ReaderSubsActivity.KEY_LAST_ADDED_TAG_NAME);
      listFragment.doTagsChanged(lastAddedTag);
    }
  if (listFragment != null && listFragment.getPostListType() == ReaderTypes.ReaderPostListType.TAG_FOLLOWED && ReaderTag.TAG_NAME_FOLLOWING.equals(listFragment.getCurrentTagName())) {
    listFragment.refreshPosts();
  }
break;
case ReaderConstants.INTENT_READER_REBLOG:
if (isResultOK && data != null && listFragment != null) {
long blogId=data.getLongExtra(ReaderConstants.ARG_BLOG_ID,0);
long postId=data.getLongExtra(ReaderConstants.ARG_POST_ID,0);
listFragment.reloadPost(ReaderPostTable.getPost(blogId,postId,true));
}
break;
case SignInActivity.REQUEST_CODE:
if (isResultOK) {
removeListFragment();
mHasPerformedInitialUpdate=false;
performInitialUpdate();
}
break;
}
}
