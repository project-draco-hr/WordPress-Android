{
  if (!NetworkUtils.checkConnection(getActivity())) {
    return;
  }
  final ReaderActions.ActionListener actionListener=new ReaderActions.ActionListener(){
    @Override public void onActionResult(    boolean succeeded){
      if (!succeeded && hasActivity()) {
        hideUndoBar();
        ToastUtils.showToast(getActivity(),R.string.reader_toast_err_generic);
      }
    }
  }
;
  final ReaderPostList postsToRestore=ReaderBlogActions.blockBlogFromReader(post.blogId,actionListener);
  Animation.AnimationListener aniListener=new Animation.AnimationListener(){
    @Override public void onAnimationStart(    Animation animation){
    }
    @Override public void onAnimationRepeat(    Animation animation){
    }
    @Override public void onAnimationEnd(    Animation animation){
      if (hasActivity()) {
        getPostAdapter().removePost(position);
      }
    }
  }
;
  ReaderAnim.animateListItem(mListView,position,ReaderAnim.AnimateListItemStyle.BLOCK,aniListener);
  UndoBarController.UndoListener undoListener=new UndoBarController.UndoListener(){
    @Override public void onUndo(    Parcelable parcelable){
      if (ReaderBlogActions.unblockBlogFromReader(post.blogId,postsToRestore,actionListener)) {
        refreshPosts();
      }
    }
  }
;
  new UndoBarController.UndoBar(getActivity()).message(getString(R.string.reader_toast_blog_blocked)).listener(undoListener).translucent(true).show();
}
