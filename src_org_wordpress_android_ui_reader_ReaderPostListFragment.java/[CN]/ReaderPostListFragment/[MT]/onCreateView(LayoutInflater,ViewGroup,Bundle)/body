{
  final Context context=container.getContext();
  final Resources resources=context.getResources();
  final ViewGroup view=(ViewGroup)inflater.inflate(R.layout.reader_fragment_post_list,container,false);
  boolean hasTransparentActionBar=isFullScreenSupported();
  mListView=(WPListView)view.findViewById(android.R.id.list);
  final ViewGroup layoutHeader=(ViewGroup)view.findViewById(R.id.layout_header);
  mNewPostsBar=(TextView)view.findViewById(R.id.text_new_posts);
  mNewPostsBar.setVisibility(View.GONE);
  mNewPostsBar.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      reloadPosts(true);
      hideNewPostsBar();
    }
  }
);
  if (hasTransparentActionBar) {
    ReaderFullScreenUtils.addTopMargin(context,layoutHeader);
    ReaderFullScreenUtils.addTopMargin(context,mNewPostsBar);
  }
switch (getPostListType()) {
case TAG_FOLLOWED:
    if (hasTransparentActionBar) {
      ReaderFullScreenUtils.addListViewHeader(context,mListView);
    }
  break;
case TAG_PREVIEW:
mTagPreviewHeader=(ViewGroup)inflater.inflate(R.layout.reader_tag_preview_header,container,false);
layoutHeader.addView(mTagPreviewHeader);
layoutHeader.setVisibility(View.VISIBLE);
break;
case BLOG_PREVIEW:
layoutHeader.setVisibility(View.VISIBLE);
mListView.setHeaderDividersEnabled(false);
mMshotHeight=resources.getDimensionPixelSize(R.dimen.reader_mshot_image_height);
mMshotSpacerView=ReaderFullScreenUtils.addListViewHeader(context,mListView,mMshotHeight);
mBlogInfoView=new ReaderBlogInfoHeader(context);
view.addView(mBlogInfoView);
mBlogInfoView.bringToFront();
mBlogInfoView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
@Override public void onGlobalLayout(){
mMshotSpacerView.getLayoutParams().height=mMshotHeight + mBlogInfoView.getInfoHeight();
updateBlogInfoView();
mBlogInfoView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
}
}
);
mListView.setOnScrollChangedListener(this);
break;
}
mEmptyView=view.findViewById(R.id.empty_view);
mListView.setOnScrollListener(this);
mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
position-=mListView.getHeaderViewsCount();
if (position >= 0 && mPostSelectedListener != null) {
ReaderPost post=(ReaderPost)getPostAdapter().getItem(position);
if (post != null) {
mPostSelectedListener.onPostSelected(post.blogId,post.postId);
}
}
}
}
);
mProgress=(ProgressBar)view.findViewById(R.id.progress_footer);
mProgress.setVisibility(View.GONE);
mPullToRefreshHelper=new PullToRefreshHelper(getActivity(),(PullToRefreshLayout)view.findViewById(R.id.ptr_layout),new RefreshListener(){
@Override public void onRefreshStarted(View view){
if (getActivity() == null || !NetworkUtils.checkConnection(getActivity())) {
mPullToRefreshHelper.setRefreshing(false);
return;
}
switch (getPostListType()) {
case TAG_FOLLOWED:
case TAG_PREVIEW:
updatePostsWithTag(getCurrentTag(),RequestDataAction.LOAD_NEWER,RefreshType.MANUAL);
break;
case BLOG_PREVIEW:
updatePostsInCurrentBlog(RequestDataAction.LOAD_NEWER);
break;
}
}
}
);
return view;
}
