{
  if (!NetworkUtils.checkConnection(getActivity())) {
    return;
  }
  final ReaderPostList postsToRestore=ReaderBlogActions.blockBlogFromReader(blogId);
  Animation.AnimationListener aniListener=new Animation.AnimationListener(){
    @Override public void onAnimationStart(    Animation animation){
    }
    @Override public void onAnimationRepeat(    Animation animation){
    }
    @Override public void onAnimationEnd(    Animation animation){
      if (hasActivity()) {
        refreshPosts();
      }
    }
  }
;
  ReaderAnim.animateListItem(mListView,mContextMenuListItemPosition,ReaderAnim.AnimateListItemStyle.DELETION,aniListener);
  UndoBarController.UndoListener undoListener=new UndoBarController.UndoListener(){
    @Override public void onUndo(    Parcelable parcelable){
      if (ReaderBlogActions.unblockBlogFromReader(blogId,postsToRestore)) {
        refreshPosts();
      }
    }
  }
;
  new UndoBarController.UndoBar(getActivity()).message(getString(R.string.reader_toast_blog_blocked)).listener(undoListener).translucent(true).show();
}
