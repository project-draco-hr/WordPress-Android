{
switch (uploadStatus) {
case "uploading":
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(getString(R.string.stop_upload_dialog_title));
builder.setPositiveButton(R.string.stop_upload_button,new DialogInterface.OnClickListener(){
  public void onClick(  DialogInterface dialog,  int id){
    mEditorFragmentListener.onMediaUploadCancelClicked(mediaId,true);
    mWebView.post(new Runnable(){
      @Override public void run(){
        mWebView.execJavaScriptFromString("ZSSEditor.removeImage(" + mediaId + ");");
        mUploadingMedia.remove(mediaId);
      }
    }
);
    dialog.dismiss();
  }
}
);
builder.setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int id){
  dialog.dismiss();
}
}
);
AlertDialog dialog=builder.create();
dialog.show();
break;
case "failed":
mEditorFragmentListener.onMediaRetryClicked(mediaId);
mWebView.post(new Runnable(){
@Override public void run(){
mWebView.execJavaScriptFromString("ZSSEditor.unmarkImageUploadFailed(" + mediaId + ");");
mWebView.execJavaScriptFromString("ZSSEditor.setProgressOnImage(" + mediaId + ", "+ 0+ ");");
mFailedMediaIds.remove(mediaId);
mUploadingMedia.put(mediaId,MediaType.IMAGE);
}
}
);
break;
default :
FragmentManager fragmentManager=getFragmentManager();
if (fragmentManager.findFragmentByTag(ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG) != null) {
return;
}
mEditorFragmentListener.onTrackableEvent(TrackableEvent.IMAGE_EDITED);
ImageSettingsDialogFragment imageSettingsDialogFragment=new ImageSettingsDialogFragment();
imageSettingsDialogFragment.setTargetFragment(this,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_REQUEST_CODE);
Bundle dialogBundle=new Bundle();
dialogBundle.putString("maxWidth",mBlogSettingMaxImageWidth);
dialogBundle.putBoolean("featuredImageSupported",mFeaturedImageSupported);
HashMap<String,String> headerMap=new HashMap<>(mCustomHttpHeaders);
try {
final String imageSrc=meta.getString("src");
String authHeader=mEditorFragmentListener.onAuthHeaderRequested(UrlUtils.makeHttps(imageSrc));
if (authHeader.length() > 0) {
meta.put("src",UrlUtils.makeHttps(imageSrc));
headerMap.put("Authorization",authHeader);
}
}
 catch (JSONException e) {
AppLog.e(T.EDITOR,"Could not retrieve image url from JSON metadata");
}
dialogBundle.putSerializable("headerMap",headerMap);
dialogBundle.putString("imageMeta",meta.toString());
String imageId=JSONUtils.getString(meta,"attachment_id");
if (!imageId.isEmpty()) {
dialogBundle.putBoolean("isFeatured",mFeaturedImageId == Integer.parseInt(imageId));
}
imageSettingsDialogFragment.setArguments(dialogBundle);
FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();
fragmentTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
fragmentTransaction.add(android.R.id.content,imageSettingsDialogFragment,ImageSettingsDialogFragment.IMAGE_SETTINGS_DIALOG_TAG).addToBackStack(null).commit();
mWebView.notifyVisibilityChanged(false);
break;
}
}
