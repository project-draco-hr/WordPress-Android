{
  View view=inflater.inflate(R.layout.fragment_editor,container,false);
  if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE && !getResources().getBoolean(R.bool.is_large_tablet_landscape)) {
    mHideActionBarOnSoftKeyboardUp=true;
  }
  mWaitingMediaFiles=new ConcurrentHashMap<>();
  mWaitingGalleries=Collections.newSetFromMap(new ConcurrentHashMap<MediaGallery,Boolean>());
  mUploadingMedia=new HashMap<>();
  mFailedMediaIds=new HashSet<>();
  mWebView=(EditorWebViewAbstract)view.findViewById(R.id.webview);
  if (mWebView.shouldSwitchToCompatibilityMode()) {
    ViewGroup parent=(ViewGroup)mWebView.getParent();
    int index=parent.indexOfChild(mWebView);
    parent.removeView(mWebView);
    mWebView=new EditorWebViewCompatibility(getActivity(),null);
    mWebView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));
    parent.addView(mWebView,index);
  }
  mWebView.setOnTouchListener(this);
  mWebView.setOnImeBackListener(this);
  mWebView.setAuthHeaderRequestListener(this);
  mWebView.setOnDragListener(new View.OnDragListener(){
    private final String MIMETYPE_JPEG="image/jpeg";
    private final String MIMETYPE_PNG="image/png";
    private final String[] mSupportedMimeTypes={ClipDescription.MIMETYPE_TEXT_PLAIN,ClipDescription.MIMETYPE_TEXT_HTML,MIMETYPE_JPEG,MIMETYPE_PNG};
    private boolean isSupported(    ClipDescription clipDescription){
      for (      String supportedMimeType : mSupportedMimeTypes) {
        if (clipDescription.hasMimeType(supportedMimeType)) {
          return true;
        }
      }
      return false;
    }
    @Override public boolean onDrag(    View view,    DragEvent dragEvent){
switch (dragEvent.getAction()) {
case DragEvent.ACTION_DRAG_STARTED:
        return isSupported(dragEvent.getClipDescription());
case DragEvent.ACTION_DRAG_ENTERED:
      break;
case DragEvent.ACTION_DRAG_LOCATION:
    int x=DisplayUtils.pxToDp(getActivity(),(int)dragEvent.getX());
  int y=DisplayUtils.pxToDp(getActivity(),(int)dragEvent.getY());
mWebView.execJavaScriptFromString("ZSSEditor.moveCaretToCoords(" + x + ", "+ y+ ");");
break;
case DragEvent.ACTION_DRAG_EXITED:
break;
case DragEvent.ACTION_DROP:
ClipDescription clipDescription=dragEvent.getClipDescription();
if (clipDescription.getMimeTypeCount() < 1) {
break;
}
if (clipDescription.hasMimeType(MIMETYPE_JPEG) || clipDescription.hasMimeType(MIMETYPE_PNG)) {
mEditorFragmentListener.onMediaDropped(dragEvent.getClipData().getItemAt(0).getUri());
}
 else if (clipDescription.hasMimeType(ClipDescription.MIMETYPE_TEXT_PLAIN)) {
insertTextToEditor(dragEvent.getClipData().getItemAt(0).getText().toString());
}
 else if (clipDescription.hasMimeType(ClipDescription.MIMETYPE_TEXT_HTML)) {
insertTextToEditor(dragEvent.getClipData().getItemAt(0).getHtmlText());
}
break;
case DragEvent.ACTION_DRAG_ENDED:
default :
break;
}
return true;
}
private void insertTextToEditor(String text){
mWebView.execJavaScriptFromString("ZSSEditor.insertHTML('" + text + "');");
}
}
);
if (mCustomHttpHeaders != null && mCustomHttpHeaders.size() > 0) {
for (Map.Entry<String,String> entry : mCustomHttpHeaders.entrySet()) {
mWebView.setCustomHeader(entry.getKey(),entry.getValue());
}
}
mWebView.addOnLayoutChangeListener(new View.OnLayoutChangeListener(){
@Override public void onLayoutChange(View v,int left,int top,int right,int bottom,int oldLeft,int oldTop,int oldRight,int oldBottom){
mWebView.post(new Runnable(){
@Override public void run(){
mWebView.execJavaScriptFromString("try {ZSSEditor.refreshVisibleViewportSize();} catch (e) " + "{console.log(e)}");
}
}
);
}
}
);
mEditorFragmentListener.onEditorFragmentInitialized();
initJsEditor();
if (savedInstanceState != null) {
setTitle(savedInstanceState.getCharSequence(KEY_TITLE));
setContent(savedInstanceState.getCharSequence(KEY_CONTENT));
}
mSourceView=view.findViewById(R.id.sourceview);
mSourceViewTitle=(SourceViewEditText)view.findViewById(R.id.sourceview_title);
mSourceViewContent=(SourceViewEditText)view.findViewById(R.id.sourceview_content);
mSourceViewTitle.setOnFocusChangeListener(new View.OnFocusChangeListener(){
@Override public void onFocusChange(View v,boolean hasFocus){
updateFormatBarEnabledState(!hasFocus);
}
}
);
mSourceViewTitle.setOnTouchListener(this);
mSourceViewContent.setOnTouchListener(this);
mSourceViewTitle.setOnImeBackListener(this);
mSourceViewContent.setOnImeBackListener(this);
mSourceViewContent.addTextChangedListener(new HtmlStyleTextWatcher());
mSourceViewTitle.setHint(mTitlePlaceholder);
mSourceViewContent.setHint("<p>" + mContentPlaceholder + "</p>");
setupFormatBarButtonMap(view);
return view;
}
