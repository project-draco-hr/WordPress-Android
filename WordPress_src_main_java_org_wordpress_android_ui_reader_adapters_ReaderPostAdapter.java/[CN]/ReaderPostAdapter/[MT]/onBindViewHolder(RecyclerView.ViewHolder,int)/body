{
  if (!(holder instanceof ReaderPostViewHolder)) {
    if (holder instanceof BlogInfoViewHolder) {
      BlogInfoViewHolder blogHolder=(BlogInfoViewHolder)holder;
      blogHolder.mBlogInfoView.setOnBlogInfoLoadedListener(mBlogInfoLoadedListener);
      blogHolder.mBlogInfoView.loadBlogInfo(mCurrentBlogId,mCurrentFeedId);
    }
 else     if (holder instanceof TagInfoViewHolder) {
      TagInfoViewHolder tagHolder=(TagInfoViewHolder)holder;
      tagHolder.mTagInfoView.setCurrentTag(mCurrentTag);
    }
 else     if (holder instanceof TagToolbarViewHolder) {
      TagToolbarViewHolder toolbarHolder=(TagToolbarViewHolder)holder;
      toolbarHolder.mTagToolbar.setCurrentTag(mCurrentTag);
      toolbarHolder.mTagToolbar.setOnTagChangedListener(mOnTagChangedListener);
    }
    return;
  }
  final ReaderPost post=getItem(position);
  final ReaderPostViewHolder postHolder=(ReaderPostViewHolder)holder;
  ReaderTypes.ReaderPostListType postListType=getPostListType();
  if (mGapMarkerIds != null && post.hasIds(mGapMarkerIds)) {
    postHolder.layoutGapMarker.setVisibility(View.VISIBLE);
  }
 else {
    postHolder.layoutGapMarker.setVisibility(View.GONE);
  }
  postHolder.txtTitle.setText(post.getTitle());
  String dateLine;
  if (post.hasAuthorName() && !post.getAuthorName().equalsIgnoreCase(post.getBlogName())) {
    dateLine=post.getAuthorName() + " \u2022 " + DateTimeUtils.javaDateToTimeSpan(post.getDatePublished());
  }
 else {
    dateLine=DateTimeUtils.javaDateToTimeSpan(post.getDatePublished());
  }
  postHolder.txtDate.setText(dateLine);
  if (post.hasBlogUrl()) {
    String imageUrl=GravatarUtils.blavatarFromUrl(post.getUrl(),mAvatarSzMedium);
    postHolder.imgAvatar.setImageUrl(imageUrl,WPNetworkImageView.ImageType.BLAVATAR);
  }
 else {
    postHolder.imgAvatar.setImageUrl(post.getPostAvatarForDisplay(mAvatarSzMedium),WPNetworkImageView.ImageType.AVATAR);
  }
  if (post.hasBlogName()) {
    postHolder.txtBlogName.setText(post.getBlogName());
  }
 else   if (post.hasAuthorName()) {
    postHolder.txtBlogName.setText(post.getAuthorName());
  }
 else {
    postHolder.txtBlogName.setText(null);
  }
  if (!isBlogPreview()) {
    postHolder.layoutPostHeader.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        ReaderActivityLauncher.showReaderBlogPreview(view.getContext(),post);
      }
    }
);
  }
  if (post.hasExcerpt()) {
    postHolder.txtText.setVisibility(View.VISIBLE);
    postHolder.txtText.setText(post.getExcerpt());
  }
 else {
    postHolder.txtText.setVisibility(View.GONE);
  }
  final int titleMargin;
  if (post.hasFeaturedImage()) {
    final String imageUrl=post.getFeaturedImageForDisplay(mPhotonWidth,mPhotonHeight);
    postHolder.imgFeatured.setImageUrl(imageUrl,WPNetworkImageView.ImageType.PHOTO);
    postHolder.imgFeatured.setVisibility(View.VISIBLE);
    titleMargin=mMarginLarge;
  }
 else   if (post.hasFeaturedVideo()) {
    postHolder.imgFeatured.setVideoUrl(post.postId,post.getFeaturedVideo());
    postHolder.imgFeatured.setVisibility(View.VISIBLE);
    titleMargin=mMarginLarge;
  }
 else {
    postHolder.imgFeatured.setVisibility(View.GONE);
    titleMargin=(postHolder.layoutPostHeader.getVisibility() == View.VISIBLE ? 0 : mMarginLarge);
  }
  LinearLayout.LayoutParams params=(LinearLayout.LayoutParams)postHolder.txtTitle.getLayoutParams();
  params.topMargin=titleMargin;
  if (post.wordCount > 0 && !post.isDiscoverPost()) {
    String wordCountStr=String.format(mWordCountFmtStr,post.wordCount);
    int readingTimeInMinutes=post.wordCount / READING_WORDS_PER_MINUTE;
    if (readingTimeInMinutes >= MIN_READING_TIME_MINUTES) {
      wordCountStr+=" (~" + String.format(mReadingTimeFmtStr,readingTimeInMinutes) + ")";
    }
    postHolder.txtWordCount.setText(wordCountStr);
    postHolder.txtWordCount.setVisibility(View.VISIBLE);
  }
 else {
    postHolder.txtWordCount.setVisibility(View.GONE);
  }
  final String tagToDisplay=(mCurrentTag != null ? post.getTagForDisplay(mCurrentTag.getTagName()) : null);
  if (!TextUtils.isEmpty(tagToDisplay)) {
    postHolder.txtTag.setText(ReaderUtils.makeHashTag(tagToDisplay));
    postHolder.txtTag.setVisibility(View.VISIBLE);
    postHolder.txtTag.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (mOnTagSelectedListener != null) {
          mOnTagSelectedListener.onTagSelected(tagToDisplay);
        }
      }
    }
);
  }
 else {
    postHolder.txtTag.setVisibility(View.GONE);
    postHolder.txtTag.setOnClickListener(null);
  }
  boolean showLikes;
  boolean showComments;
  if (post.isDiscoverPost()) {
    showLikes=false;
    showComments=false;
  }
 else   if (mIsLoggedOutReader) {
    showLikes=post.numLikes > 0;
    showComments=post.numReplies > 0;
  }
 else {
    showLikes=post.canLikePost();
    showComments=post.isWP() && !post.isJetpack && (post.isCommentsOpen || post.numReplies > 0);
  }
  if (showLikes || showComments) {
    showCounts(postHolder,post);
  }
  if (showLikes) {
    postHolder.likeCount.setSelected(post.isLikedByCurrentUser);
    postHolder.likeCount.setVisibility(View.VISIBLE);
    if (mIsLoggedOutReader) {
      postHolder.likeCount.setEnabled(false);
      postHolder.likeCount.setOnClickListener(null);
    }
 else {
      postHolder.likeCount.setEnabled(true);
      postHolder.likeCount.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          toggleLike(v.getContext(),postHolder,post);
        }
      }
);
    }
  }
 else {
    postHolder.likeCount.setVisibility(View.GONE);
    postHolder.likeCount.setOnClickListener(null);
  }
  if (showComments) {
    postHolder.commentCount.setVisibility(View.VISIBLE);
    postHolder.commentCount.setEnabled(true);
    postHolder.commentCount.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        ReaderActivityLauncher.showReaderComments(v.getContext(),post.blogId,post.postId);
      }
    }
);
  }
 else {
    postHolder.commentCount.setVisibility(View.GONE);
    postHolder.commentCount.setOnClickListener(null);
  }
  if (!mIsLoggedOutReader && postListType == ReaderTypes.ReaderPostListType.TAG_FOLLOWED) {
    postHolder.imgMore.setVisibility(View.VISIBLE);
    postHolder.imgMore.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (mOnPostPopupListener != null) {
          mOnPostPopupListener.onShowPostPopup(view,post);
        }
      }
    }
);
  }
 else {
    postHolder.imgMore.setVisibility(View.GONE);
    postHolder.imgMore.setOnClickListener(null);
  }
  if (post.isDiscoverPost()) {
    showDiscoverData(postHolder,post);
  }
 else {
    postHolder.layoutDiscover.setVisibility(View.GONE);
  }
  if (mCanRequestMorePosts && mDataRequestedListener != null && (position >= getItemCount() - 1)) {
    mDataRequestedListener.onRequestData();
  }
  if (mPostSelectedListener != null) {
    postHolder.cardView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        mPostSelectedListener.onPostSelected(post);
      }
    }
);
  }
}
