{
  if (post == null || TextUtils.isEmpty(commentText))   return null;
  ReaderComment newComment=new ReaderComment();
  newComment.commentId=fakeCommentId;
  newComment.postId=post.postId;
  newComment.blogId=post.blogId;
  newComment.parentId=replyToCommentId;
  newComment.setText(commentText);
  String published=DateTimeUtils.nowUTC().toString();
  newComment.setPublished(published);
  newComment.timestamp=DateTimeUtils.iso8601ToTimestamp(published);
  ReaderUser currentUser=ReaderUserTable.getCurrentUser();
  if (currentUser != null) {
    newComment.setAuthorAvatar(currentUser.getAvatarUrl());
    newComment.setAuthorName(currentUser.getDisplayName());
  }
  ReaderCommentTable.addOrUpdateComment(newComment);
  final String path;
  if (replyToCommentId == 0) {
    path="sites/" + post.blogId + "/posts/"+ post.postId+ "/replies/new";
  }
 else {
    path="sites/" + post.blogId + "/comments/"+ Long.toString(replyToCommentId)+ "/replies/new";
  }
  Map<String,String> params=new HashMap<String,String>();
  params.put("content",commentText);
  RestRequest.Listener listener=new RestRequest.Listener(){
    @Override public void onResponse(    JSONObject jsonObject){
      ReaderCommentTable.deleteComment(post,fakeCommentId);
      AppLog.i(T.READER,"comment succeeded");
      ReaderComment newComment=ReaderComment.fromJson(jsonObject,post.blogId);
      ReaderCommentTable.addOrUpdateComment(newComment);
      if (actionListener != null)       actionListener.onActionResult(true,newComment);
    }
  }
;
  RestRequest.ErrorListener errorListener=new RestRequest.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError volleyError){
      ReaderCommentTable.deleteComment(post,fakeCommentId);
      AppLog.w(T.READER,"comment failed");
      AppLog.e(T.READER,volleyError);
      if (actionListener != null)       actionListener.onActionResult(false,null);
    }
  }
;
  AppLog.i(T.READER,"submitting comment");
  WordPress.getRestClientUtils().post(path,params,null,listener,errorListener);
  return newComment;
}
