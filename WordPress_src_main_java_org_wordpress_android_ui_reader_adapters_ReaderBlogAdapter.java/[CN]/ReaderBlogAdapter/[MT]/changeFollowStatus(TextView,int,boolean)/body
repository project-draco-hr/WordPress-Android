{
  if (!isPositionValid(position)) {
    return;
  }
  final long blogId;
  final String blogUrl;
switch (getBlogType()) {
case RECOMMENDED:
    ReaderRecommendedBlog blog=mRecommendedBlogs.get(position);
  blogId=blog.blogId;
blogUrl=blog.getBlogUrl();
break;
case FOLLOWED:
ReaderBlog info=mFollowedBlogs.get(position);
blogId=info.blogId;
blogUrl=info.getUrl();
break;
default :
return;
}
ReaderActions.ActionListener actionListener=new ReaderActions.ActionListener(){
@Override public void onActionResult(boolean succeeded){
Context context=txtFollow.getContext();
if (!succeeded && context != null) {
int resId=(isAskingToFollow ? R.string.reader_toast_err_follow_blog : R.string.reader_toast_err_unfollow_blog);
ToastUtils.showToast(context,resId);
ReaderUtils.showFollowStatus(txtFollow,!isAskingToFollow);
checkFollowStatus();
}
}
}
;
ReaderAnim.animateFollowButton(txtFollow,isAskingToFollow);
if (ReaderBlogActions.performFollowAction(blogId,blogUrl,isAskingToFollow,actionListener)) {
if (getBlogType() == ReaderBlogType.FOLLOWED) {
mFollowedBlogs.get(position).isFollowing=isAskingToFollow;
}
notifyDataSetChanged();
if (mFollowListener != null) {
mFollowListener.onFollowBlogChanged();
}
}
}
