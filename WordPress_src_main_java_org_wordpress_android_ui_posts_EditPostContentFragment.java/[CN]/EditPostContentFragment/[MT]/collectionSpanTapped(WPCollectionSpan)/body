{
  final List<String> collectionIds=collectionSpan.getContent();
  if (collectionIds == null || collectionIds.isEmpty()) {
    return false;
  }
  final LayoutInflater layoutInflater=LayoutInflater.from(getActivity());
  final View alertView=layoutInflater.inflate(R.layout.alert_collection_viewer,null);
  if (alertView == null) {
    return false;
  }
  final ListView collectionList=(ListView)alertView.findViewById(R.id.collection_list);
  if (collectionList == null) {
    return false;
  }
  final List<String> removedContent=new ArrayList<>();
  collectionList.setAdapter(new ArrayAdapter<String>(getActivity(),R.layout.collection_item_view,collectionIds){
    @Override public View getView(    final int position,    View convertView,    ViewGroup parent){
      if (convertView == null) {
        convertView=layoutInflater.inflate(R.layout.collection_item_view,parent,false);
      }
      final TextView text=(TextView)convertView.findViewById(R.id.collection_item_text);
      final CheckBox checkbox=(CheckBox)convertView.findViewById(R.id.collection_item_checkbox);
      if (checkbox != null && text != null) {
        text.setText(collectionIds.get(position));
        checkbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
          @Override public void onCheckedChanged(          CompoundButton buttonView,          boolean isChecked){
            if (isChecked) {
              text.setTextColor(getResources().getColor(R.color.calypso_blue));
              removedContent.add(collectionIds.get(position));
            }
 else {
              text.setTextColor(getResources().getColor(R.color.calypso_blue_dark));
              removedContent.remove(collectionIds.get(position));
            }
          }
        }
);
      }
      return convertView;
    }
  }
);
  AlertDialog collectionDialog=new AlertDialog.Builder(getActivity()).setTitle(getString(R.string.delete_from_collection)).setView(alertView).setPositiveButton(getString(R.string.confirm),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      for (      String content : removedContent) {
        collectionSpan.removeContent(content);
      }
      if (collectionSpan.getContent().size() <= 1) {
        final Editable editableText=mContentEditText.getText();
        final int spanStart=editableText.getSpanStart(collectionSpan);
        final int spanEnd=editableText.getSpanEnd(collectionSpan);
        editableText.removeSpan(collectionSpan);
        if (collectionSpan.getContent().size() == 1) {
          final String previewSource=collectionSpan.getContent().get(0);
          AsyncTask<String,String,ImageSpan> background=new AsyncTask<String,String,ImageSpan>(){
            Bitmap bitmap=null;
            int start, end;
            @Override protected ImageSpan doInBackground(            String... params){
              if (previewSource.contains("wordpress.com")) {
                try {
                  URL url=new URL(previewSource);
                  bitmap=BitmapFactory.decodeStream(url.openConnection().getInputStream());
                }
 catch (                MalformedURLException exception) {
                }
catch (                IOException ioException) {
                }
              }
 else {
                bitmap=ImageUtils.getWPImageSpanThumbnailFromFilePath(getActivity(),previewSource,getMaximumThumbnailWidth());
              }
              WPImageSpan collectionSpan=new WPImageSpan(getActivity(),bitmap,Uri.parse(previewSource));
              start=spanStart;
              end=spanEnd;
              if (start > end) {
                int temp=end;
                end=start;
                start=temp;
              }
              return collectionSpan;
            }
            @Override protected void onPostExecute(            ImageSpan result){
              if (editableText != null && result != null) {
                editableText.insert(start," ");
                editableText.setSpan(result,start,end + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
                editableText.insert(end + 1,"\n");
              }
            }
          }
;
          background.execute();
        }
      }
      dialog.dismiss();
    }
  }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      dialog.dismiss();
    }
  }
).create();
  collectionDialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
  collectionDialog.show();
  mScrollDetected=false;
  return true;
}
